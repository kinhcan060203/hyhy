/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(function webpackUniversalModuleDefinition(root, factory) {
  if (typeof exports === "object" && typeof module === "object")
    module.exports = factory();
  else if (typeof define === "function" && define.amd) define([], factory);
  else if (typeof exports === "object") exports["lemon"] = factory();
  else root["lemon"] = factory();
})(self, () => {
  return /******/ (() => {
    // webpackBootstrap
    /******/ var __webpack_modules__ = {
      /***/ "./node_modules/axios/index.js":
        /*!*************************************!*\
  !*** ./node_modules/axios/index.js ***!
  \*************************************/
        /***/ (module, __unused_webpack_exports, __webpack_require__) => {
          eval(
            'module.exports = __webpack_require__(/*! ./lib/axios */ "./node_modules/axios/lib/axios.js");\n\n//# sourceURL=webpack://lemon/./node_modules/axios/index.js?'
          );

          /***/
        },

      /***/ "./node_modules/axios/lib/adapters/xhr.js":
        /*!************************************************!*\
  !*** ./node_modules/axios/lib/adapters/xhr.js ***!
  \************************************************/
        /***/ (module, __unused_webpack_exports, __webpack_require__) => {
          "use strict";
          eval(
            "\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\nvar settle = __webpack_require__(/*! ./../core/settle */ \"./node_modules/axios/lib/core/settle.js\");\nvar cookies = __webpack_require__(/*! ./../helpers/cookies */ \"./node_modules/axios/lib/helpers/cookies.js\");\nvar buildURL = __webpack_require__(/*! ./../helpers/buildURL */ \"./node_modules/axios/lib/helpers/buildURL.js\");\nvar buildFullPath = __webpack_require__(/*! ../core/buildFullPath */ \"./node_modules/axios/lib/core/buildFullPath.js\");\nvar parseHeaders = __webpack_require__(/*! ./../helpers/parseHeaders */ \"./node_modules/axios/lib/helpers/parseHeaders.js\");\nvar isURLSameOrigin = __webpack_require__(/*! ./../helpers/isURLSameOrigin */ \"./node_modules/axios/lib/helpers/isURLSameOrigin.js\");\nvar createError = __webpack_require__(/*! ../core/createError */ \"./node_modules/axios/lib/core/createError.js\");\nvar defaults = __webpack_require__(/*! ../defaults */ \"./node_modules/axios/lib/defaults.js\");\nvar Cancel = __webpack_require__(/*! ../cancel/Cancel */ \"./node_modules/axios/lib/cancel/Cancel.js\");\n\nmodule.exports = function xhrAdapter(config) {\n  return new Promise(function dispatchXhrRequest(resolve, reject) {\n    var requestData = config.data;\n    var requestHeaders = config.headers;\n    var responseType = config.responseType;\n    var onCanceled;\n    function done() {\n      if (config.cancelToken) {\n        config.cancelToken.unsubscribe(onCanceled);\n      }\n\n      if (config.signal) {\n        config.signal.removeEventListener('abort', onCanceled);\n      }\n    }\n\n    if (utils.isFormData(requestData)) {\n      delete requestHeaders['Content-Type']; // Let the browser set it\n    }\n\n    var request = new XMLHttpRequest();\n\n    // HTTP basic authentication\n    if (config.auth) {\n      var username = config.auth.username || '';\n      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';\n      requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);\n    }\n\n    var fullPath = buildFullPath(config.baseURL, config.url);\n    request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\n\n    // Set the request timeout in MS\n    request.timeout = config.timeout;\n\n    function onloadend() {\n      if (!request) {\n        return;\n      }\n      // Prepare the response\n      var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n      var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?\n        request.responseText : request.response;\n      var response = {\n        data: responseData,\n        status: request.status,\n        statusText: request.statusText,\n        headers: responseHeaders,\n        config: config,\n        request: request\n      };\n\n      settle(function _resolve(value) {\n        resolve(value);\n        done();\n      }, function _reject(err) {\n        reject(err);\n        done();\n      }, response);\n\n      // Clean up request\n      request = null;\n    }\n\n    if ('onloadend' in request) {\n      // Use onloadend if available\n      request.onloadend = onloadend;\n    } else {\n      // Listen for ready state to emulate onloadend\n      request.onreadystatechange = function handleLoad() {\n        if (!request || request.readyState !== 4) {\n          return;\n        }\n\n        // The request errored out and we didn't get a response, this will be\n        // handled by onerror instead\n        // With one exception: request that using file: protocol, most browsers\n        // will return status as 0 even though it's a successful request\n        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {\n          return;\n        }\n        // readystate handler is calling before onerror or ontimeout handlers,\n        // so we should call onloadend on the next 'tick'\n        setTimeout(onloadend);\n      };\n    }\n\n    // Handle browser request cancellation (as opposed to a manual cancellation)\n    request.onabort = function handleAbort() {\n      if (!request) {\n        return;\n      }\n\n      reject(createError('Request aborted', config, 'ECONNABORTED', request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle low level network errors\n    request.onerror = function handleError() {\n      // Real errors are hidden from us by the browser\n      // onerror should only fire if it's a network error\n      reject(createError('Network Error', config, null, request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Handle timeout\n    request.ontimeout = function handleTimeout() {\n      var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';\n      var transitional = config.transitional || defaults.transitional;\n      if (config.timeoutErrorMessage) {\n        timeoutErrorMessage = config.timeoutErrorMessage;\n      }\n      reject(createError(\n        timeoutErrorMessage,\n        config,\n        transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',\n        request));\n\n      // Clean up request\n      request = null;\n    };\n\n    // Add xsrf header\n    // This is only done if running in a standard browser environment.\n    // Specifically not if we're in a web worker, or react-native.\n    if (utils.isStandardBrowserEnv()) {\n      // Add xsrf header\n      var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?\n        cookies.read(config.xsrfCookieName) :\n        undefined;\n\n      if (xsrfValue) {\n        requestHeaders[config.xsrfHeaderName] = xsrfValue;\n      }\n    }\n\n    // Add headers to the request\n    if ('setRequestHeader' in request) {\n      utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n        if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {\n          // Remove Content-Type if data is undefined\n          delete requestHeaders[key];\n        } else {\n          // Otherwise add header to the request\n          request.setRequestHeader(key, val);\n        }\n      });\n    }\n\n    // Add withCredentials to request if needed\n    if (!utils.isUndefined(config.withCredentials)) {\n      request.withCredentials = !!config.withCredentials;\n    }\n\n    // Add responseType to request if needed\n    if (responseType && responseType !== 'json') {\n      request.responseType = config.responseType;\n    }\n\n    // Handle progress if needed\n    if (typeof config.onDownloadProgress === 'function') {\n      request.addEventListener('progress', config.onDownloadProgress);\n    }\n\n    // Not all browsers support upload events\n    if (typeof config.onUploadProgress === 'function' && request.upload) {\n      request.upload.addEventListener('progress', config.onUploadProgress);\n    }\n\n    if (config.cancelToken || config.signal) {\n      // Handle cancellation\n      // eslint-disable-next-line func-names\n      onCanceled = function(cancel) {\n        if (!request) {\n          return;\n        }\n        reject(!cancel || (cancel && cancel.type) ? new Cancel('canceled') : cancel);\n        request.abort();\n        request = null;\n      };\n\n      config.cancelToken && config.cancelToken.subscribe(onCanceled);\n      if (config.signal) {\n        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);\n      }\n    }\n\n    if (!requestData) {\n      requestData = null;\n    }\n\n    // Send the request\n    request.send(requestData);\n  });\n};\n\n\n//# sourceURL=webpack://lemon/./node_modules/axios/lib/adapters/xhr.js?"
          );

          /***/
        },

      /***/ "./node_modules/axios/lib/axios.js":
        /*!*****************************************!*\
  !*** ./node_modules/axios/lib/axios.js ***!
  \*****************************************/
        /***/ (module, __unused_webpack_exports, __webpack_require__) => {
          "use strict";
          eval(
            '\n\nvar utils = __webpack_require__(/*! ./utils */ "./node_modules/axios/lib/utils.js");\nvar bind = __webpack_require__(/*! ./helpers/bind */ "./node_modules/axios/lib/helpers/bind.js");\nvar Axios = __webpack_require__(/*! ./core/Axios */ "./node_modules/axios/lib/core/Axios.js");\nvar mergeConfig = __webpack_require__(/*! ./core/mergeConfig */ "./node_modules/axios/lib/core/mergeConfig.js");\nvar defaults = __webpack_require__(/*! ./defaults */ "./node_modules/axios/lib/defaults.js");\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n * @return {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  var context = new Axios(defaultConfig);\n  var instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context);\n\n  // Copy context to instance\n  utils.extend(instance, context);\n\n  // Factory for creating new instances\n  instance.create = function create(instanceConfig) {\n    return createInstance(mergeConfig(defaultConfig, instanceConfig));\n  };\n\n  return instance;\n}\n\n// Create the default instance to be exported\nvar axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Expose Cancel & CancelToken\naxios.Cancel = __webpack_require__(/*! ./cancel/Cancel */ "./node_modules/axios/lib/cancel/Cancel.js");\naxios.CancelToken = __webpack_require__(/*! ./cancel/CancelToken */ "./node_modules/axios/lib/cancel/CancelToken.js");\naxios.isCancel = __webpack_require__(/*! ./cancel/isCancel */ "./node_modules/axios/lib/cancel/isCancel.js");\naxios.VERSION = (__webpack_require__(/*! ./env/data */ "./node_modules/axios/lib/env/data.js").version);\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\naxios.spread = __webpack_require__(/*! ./helpers/spread */ "./node_modules/axios/lib/helpers/spread.js");\n\n// Expose isAxiosError\naxios.isAxiosError = __webpack_require__(/*! ./helpers/isAxiosError */ "./node_modules/axios/lib/helpers/isAxiosError.js");\n\nmodule.exports = axios;\n\n// Allow use of default import syntax in TypeScript\nmodule.exports["default"] = axios;\n\n\n//# sourceURL=webpack://lemon/./node_modules/axios/lib/axios.js?'
          );

          /***/
        },

      /***/ "./node_modules/axios/lib/cancel/Cancel.js":
        /*!*************************************************!*\
  !*** ./node_modules/axios/lib/cancel/Cancel.js ***!
  \*************************************************/
        /***/ (module) => {
          "use strict";
          eval(
            "\n\n/**\n * A `Cancel` is an object that is thrown when an operation is canceled.\n *\n * @class\n * @param {string=} message The message.\n */\nfunction Cancel(message) {\n  this.message = message;\n}\n\nCancel.prototype.toString = function toString() {\n  return 'Cancel' + (this.message ? ': ' + this.message : '');\n};\n\nCancel.prototype.__CANCEL__ = true;\n\nmodule.exports = Cancel;\n\n\n//# sourceURL=webpack://lemon/./node_modules/axios/lib/cancel/Cancel.js?"
          );

          /***/
        },

      /***/ "./node_modules/axios/lib/cancel/CancelToken.js":
        /*!******************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CancelToken.js ***!
  \******************************************************/
        /***/ (module, __unused_webpack_exports, __webpack_require__) => {
          "use strict";
          eval(
            "\n\nvar Cancel = __webpack_require__(/*! ./Cancel */ \"./node_modules/axios/lib/cancel/Cancel.js\");\n\n/**\n * A `CancelToken` is an object that can be used to request cancellation of an operation.\n *\n * @class\n * @param {Function} executor The executor function.\n */\nfunction CancelToken(executor) {\n  if (typeof executor !== 'function') {\n    throw new TypeError('executor must be a function.');\n  }\n\n  var resolvePromise;\n\n  this.promise = new Promise(function promiseExecutor(resolve) {\n    resolvePromise = resolve;\n  });\n\n  var token = this;\n\n  // eslint-disable-next-line func-names\n  this.promise.then(function(cancel) {\n    if (!token._listeners) return;\n\n    var i;\n    var l = token._listeners.length;\n\n    for (i = 0; i < l; i++) {\n      token._listeners[i](cancel);\n    }\n    token._listeners = null;\n  });\n\n  // eslint-disable-next-line func-names\n  this.promise.then = function(onfulfilled) {\n    var _resolve;\n    // eslint-disable-next-line func-names\n    var promise = new Promise(function(resolve) {\n      token.subscribe(resolve);\n      _resolve = resolve;\n    }).then(onfulfilled);\n\n    promise.cancel = function reject() {\n      token.unsubscribe(_resolve);\n    };\n\n    return promise;\n  };\n\n  executor(function cancel(message) {\n    if (token.reason) {\n      // Cancellation has already been requested\n      return;\n    }\n\n    token.reason = new Cancel(message);\n    resolvePromise(token.reason);\n  });\n}\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nCancelToken.prototype.throwIfRequested = function throwIfRequested() {\n  if (this.reason) {\n    throw this.reason;\n  }\n};\n\n/**\n * Subscribe to the cancel signal\n */\n\nCancelToken.prototype.subscribe = function subscribe(listener) {\n  if (this.reason) {\n    listener(this.reason);\n    return;\n  }\n\n  if (this._listeners) {\n    this._listeners.push(listener);\n  } else {\n    this._listeners = [listener];\n  }\n};\n\n/**\n * Unsubscribe from the cancel signal\n */\n\nCancelToken.prototype.unsubscribe = function unsubscribe(listener) {\n  if (!this._listeners) {\n    return;\n  }\n  var index = this._listeners.indexOf(listener);\n  if (index !== -1) {\n    this._listeners.splice(index, 1);\n  }\n};\n\n/**\n * Returns an object that contains a new `CancelToken` and a function that, when called,\n * cancels the `CancelToken`.\n */\nCancelToken.source = function source() {\n  var cancel;\n  var token = new CancelToken(function executor(c) {\n    cancel = c;\n  });\n  return {\n    token: token,\n    cancel: cancel\n  };\n};\n\nmodule.exports = CancelToken;\n\n\n//# sourceURL=webpack://lemon/./node_modules/axios/lib/cancel/CancelToken.js?"
          );

          /***/
        },

      /***/ "./node_modules/axios/lib/cancel/isCancel.js":
        /*!***************************************************!*\
  !*** ./node_modules/axios/lib/cancel/isCancel.js ***!
  \***************************************************/
        /***/ (module) => {
          "use strict";
          eval(
            "\n\nmodule.exports = function isCancel(value) {\n  return !!(value && value.__CANCEL__);\n};\n\n\n//# sourceURL=webpack://lemon/./node_modules/axios/lib/cancel/isCancel.js?"
          );

          /***/
        },

      /***/ "./node_modules/axios/lib/core/Axios.js":
        /*!**********************************************!*\
  !*** ./node_modules/axios/lib/core/Axios.js ***!
  \**********************************************/
        /***/ (module, __unused_webpack_exports, __webpack_require__) => {
          "use strict";
          eval(
            "\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\nvar buildURL = __webpack_require__(/*! ../helpers/buildURL */ \"./node_modules/axios/lib/helpers/buildURL.js\");\nvar InterceptorManager = __webpack_require__(/*! ./InterceptorManager */ \"./node_modules/axios/lib/core/InterceptorManager.js\");\nvar dispatchRequest = __webpack_require__(/*! ./dispatchRequest */ \"./node_modules/axios/lib/core/dispatchRequest.js\");\nvar mergeConfig = __webpack_require__(/*! ./mergeConfig */ \"./node_modules/axios/lib/core/mergeConfig.js\");\nvar validator = __webpack_require__(/*! ../helpers/validator */ \"./node_modules/axios/lib/helpers/validator.js\");\n\nvar validators = validator.validators;\n/**\n * Create a new instance of Axios\n *\n * @param {Object} instanceConfig The default config for the instance\n */\nfunction Axios(instanceConfig) {\n  this.defaults = instanceConfig;\n  this.interceptors = {\n    request: new InterceptorManager(),\n    response: new InterceptorManager()\n  };\n}\n\n/**\n * Dispatch a request\n *\n * @param {Object} config The config specific for this request (merged with this.defaults)\n */\nAxios.prototype.request = function request(config) {\n  /*eslint no-param-reassign:0*/\n  // Allow for axios('example/url'[, config]) a la fetch API\n  if (typeof config === 'string') {\n    config = arguments[1] || {};\n    config.url = arguments[0];\n  } else {\n    config = config || {};\n  }\n\n  config = mergeConfig(this.defaults, config);\n\n  // Set config.method\n  if (config.method) {\n    config.method = config.method.toLowerCase();\n  } else if (this.defaults.method) {\n    config.method = this.defaults.method.toLowerCase();\n  } else {\n    config.method = 'get';\n  }\n\n  var transitional = config.transitional;\n\n  if (transitional !== undefined) {\n    validator.assertOptions(transitional, {\n      silentJSONParsing: validators.transitional(validators.boolean),\n      forcedJSONParsing: validators.transitional(validators.boolean),\n      clarifyTimeoutError: validators.transitional(validators.boolean)\n    }, false);\n  }\n\n  // filter out skipped interceptors\n  var requestInterceptorChain = [];\n  var synchronousRequestInterceptors = true;\n  this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n    if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {\n      return;\n    }\n\n    synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;\n\n    requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  var responseInterceptorChain = [];\n  this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n    responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);\n  });\n\n  var promise;\n\n  if (!synchronousRequestInterceptors) {\n    var chain = [dispatchRequest, undefined];\n\n    Array.prototype.unshift.apply(chain, requestInterceptorChain);\n    chain = chain.concat(responseInterceptorChain);\n\n    promise = Promise.resolve(config);\n    while (chain.length) {\n      promise = promise.then(chain.shift(), chain.shift());\n    }\n\n    return promise;\n  }\n\n\n  var newConfig = config;\n  while (requestInterceptorChain.length) {\n    var onFulfilled = requestInterceptorChain.shift();\n    var onRejected = requestInterceptorChain.shift();\n    try {\n      newConfig = onFulfilled(newConfig);\n    } catch (error) {\n      onRejected(error);\n      break;\n    }\n  }\n\n  try {\n    promise = dispatchRequest(newConfig);\n  } catch (error) {\n    return Promise.reject(error);\n  }\n\n  while (responseInterceptorChain.length) {\n    promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());\n  }\n\n  return promise;\n};\n\nAxios.prototype.getUri = function getUri(config) {\n  config = mergeConfig(this.defaults, config);\n  return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\\?/, '');\n};\n\n// Provide aliases for supported request methods\nutils.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, config) {\n    return this.request(mergeConfig(config || {}, {\n      method: method,\n      url: url,\n      data: (config || {}).data\n    }));\n  };\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  /*eslint func-names:0*/\n  Axios.prototype[method] = function(url, data, config) {\n    return this.request(mergeConfig(config || {}, {\n      method: method,\n      url: url,\n      data: data\n    }));\n  };\n});\n\nmodule.exports = Axios;\n\n\n//# sourceURL=webpack://lemon/./node_modules/axios/lib/core/Axios.js?"
          );

          /***/
        },

      /***/ "./node_modules/axios/lib/core/InterceptorManager.js":
        /*!***********************************************************!*\
  !*** ./node_modules/axios/lib/core/InterceptorManager.js ***!
  \***********************************************************/
        /***/ (module, __unused_webpack_exports, __webpack_require__) => {
          "use strict";
          eval(
            '\n\nvar utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");\n\nfunction InterceptorManager() {\n  this.handlers = [];\n}\n\n/**\n * Add a new interceptor to the stack\n *\n * @param {Function} fulfilled The function to handle `then` for a `Promise`\n * @param {Function} rejected The function to handle `reject` for a `Promise`\n *\n * @return {Number} An ID used to remove interceptor later\n */\nInterceptorManager.prototype.use = function use(fulfilled, rejected, options) {\n  this.handlers.push({\n    fulfilled: fulfilled,\n    rejected: rejected,\n    synchronous: options ? options.synchronous : false,\n    runWhen: options ? options.runWhen : null\n  });\n  return this.handlers.length - 1;\n};\n\n/**\n * Remove an interceptor from the stack\n *\n * @param {Number} id The ID that was returned by `use`\n */\nInterceptorManager.prototype.eject = function eject(id) {\n  if (this.handlers[id]) {\n    this.handlers[id] = null;\n  }\n};\n\n/**\n * Iterate over all the registered interceptors\n *\n * This method is particularly useful for skipping over any\n * interceptors that may have become `null` calling `eject`.\n *\n * @param {Function} fn The function to call for each interceptor\n */\nInterceptorManager.prototype.forEach = function forEach(fn) {\n  utils.forEach(this.handlers, function forEachHandler(h) {\n    if (h !== null) {\n      fn(h);\n    }\n  });\n};\n\nmodule.exports = InterceptorManager;\n\n\n//# sourceURL=webpack://lemon/./node_modules/axios/lib/core/InterceptorManager.js?'
          );

          /***/
        },

      /***/ "./node_modules/axios/lib/core/buildFullPath.js":
        /*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/buildFullPath.js ***!
  \******************************************************/
        /***/ (module, __unused_webpack_exports, __webpack_require__) => {
          "use strict";
          eval(
            '\n\nvar isAbsoluteURL = __webpack_require__(/*! ../helpers/isAbsoluteURL */ "./node_modules/axios/lib/helpers/isAbsoluteURL.js");\nvar combineURLs = __webpack_require__(/*! ../helpers/combineURLs */ "./node_modules/axios/lib/helpers/combineURLs.js");\n\n/**\n * Creates a new URL by combining the baseURL with the requestedURL,\n * only when the requestedURL is not already an absolute URL.\n * If the requestURL is absolute, this function returns the requestedURL untouched.\n *\n * @param {string} baseURL The base URL\n * @param {string} requestedURL Absolute or relative URL to combine\n * @returns {string} The combined full path\n */\nmodule.exports = function buildFullPath(baseURL, requestedURL) {\n  if (baseURL && !isAbsoluteURL(requestedURL)) {\n    return combineURLs(baseURL, requestedURL);\n  }\n  return requestedURL;\n};\n\n\n//# sourceURL=webpack://lemon/./node_modules/axios/lib/core/buildFullPath.js?'
          );

          /***/
        },

      /***/ "./node_modules/axios/lib/core/createError.js":
        /*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/createError.js ***!
  \****************************************************/
        /***/ (module, __unused_webpack_exports, __webpack_require__) => {
          "use strict";
          eval(
            "\n\nvar enhanceError = __webpack_require__(/*! ./enhanceError */ \"./node_modules/axios/lib/core/enhanceError.js\");\n\n/**\n * Create an Error with the specified message, config, error code, request and response.\n *\n * @param {string} message The error message.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The created error.\n */\nmodule.exports = function createError(message, config, code, request, response) {\n  var error = new Error(message);\n  return enhanceError(error, config, code, request, response);\n};\n\n\n//# sourceURL=webpack://lemon/./node_modules/axios/lib/core/createError.js?"
          );

          /***/
        },

      /***/ "./node_modules/axios/lib/core/dispatchRequest.js":
        /*!********************************************************!*\
  !*** ./node_modules/axios/lib/core/dispatchRequest.js ***!
  \********************************************************/
        /***/ (module, __unused_webpack_exports, __webpack_require__) => {
          "use strict";
          eval(
            "\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\nvar transformData = __webpack_require__(/*! ./transformData */ \"./node_modules/axios/lib/core/transformData.js\");\nvar isCancel = __webpack_require__(/*! ../cancel/isCancel */ \"./node_modules/axios/lib/cancel/isCancel.js\");\nvar defaults = __webpack_require__(/*! ../defaults */ \"./node_modules/axios/lib/defaults.js\");\nvar Cancel = __webpack_require__(/*! ../cancel/Cancel */ \"./node_modules/axios/lib/cancel/Cancel.js\");\n\n/**\n * Throws a `Cancel` if cancellation has been requested.\n */\nfunction throwIfCancellationRequested(config) {\n  if (config.cancelToken) {\n    config.cancelToken.throwIfRequested();\n  }\n\n  if (config.signal && config.signal.aborted) {\n    throw new Cancel('canceled');\n  }\n}\n\n/**\n * Dispatch a request to the server using the configured adapter.\n *\n * @param {object} config The config that is to be used for the request\n * @returns {Promise} The Promise to be fulfilled\n */\nmodule.exports = function dispatchRequest(config) {\n  throwIfCancellationRequested(config);\n\n  // Ensure headers exist\n  config.headers = config.headers || {};\n\n  // Transform request data\n  config.data = transformData.call(\n    config,\n    config.data,\n    config.headers,\n    config.transformRequest\n  );\n\n  // Flatten headers\n  config.headers = utils.merge(\n    config.headers.common || {},\n    config.headers[config.method] || {},\n    config.headers\n  );\n\n  utils.forEach(\n    ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],\n    function cleanHeaderConfig(method) {\n      delete config.headers[method];\n    }\n  );\n\n  var adapter = config.adapter || defaults.adapter;\n\n  return adapter(config).then(function onAdapterResolution(response) {\n    throwIfCancellationRequested(config);\n\n    // Transform response data\n    response.data = transformData.call(\n      config,\n      response.data,\n      response.headers,\n      config.transformResponse\n    );\n\n    return response;\n  }, function onAdapterRejection(reason) {\n    if (!isCancel(reason)) {\n      throwIfCancellationRequested(config);\n\n      // Transform response data\n      if (reason && reason.response) {\n        reason.response.data = transformData.call(\n          config,\n          reason.response.data,\n          reason.response.headers,\n          config.transformResponse\n        );\n      }\n    }\n\n    return Promise.reject(reason);\n  });\n};\n\n\n//# sourceURL=webpack://lemon/./node_modules/axios/lib/core/dispatchRequest.js?"
          );

          /***/
        },

      /***/ "./node_modules/axios/lib/core/enhanceError.js":
        /*!*****************************************************!*\
  !*** ./node_modules/axios/lib/core/enhanceError.js ***!
  \*****************************************************/
        /***/ (module) => {
          "use strict";
          eval(
            "\n\n/**\n * Update an Error with the specified config, error code, and response.\n *\n * @param {Error} error The error to update.\n * @param {Object} config The config.\n * @param {string} [code] The error code (for example, 'ECONNABORTED').\n * @param {Object} [request] The request.\n * @param {Object} [response] The response.\n * @returns {Error} The error.\n */\nmodule.exports = function enhanceError(error, config, code, request, response) {\n  error.config = config;\n  if (code) {\n    error.code = code;\n  }\n\n  error.request = request;\n  error.response = response;\n  error.isAxiosError = true;\n\n  error.toJSON = function toJSON() {\n    return {\n      // Standard\n      message: this.message,\n      name: this.name,\n      // Microsoft\n      description: this.description,\n      number: this.number,\n      // Mozilla\n      fileName: this.fileName,\n      lineNumber: this.lineNumber,\n      columnNumber: this.columnNumber,\n      stack: this.stack,\n      // Axios\n      config: this.config,\n      code: this.code,\n      status: this.response && this.response.status ? this.response.status : null\n    };\n  };\n  return error;\n};\n\n\n//# sourceURL=webpack://lemon/./node_modules/axios/lib/core/enhanceError.js?"
          );

          /***/
        },

      /***/ "./node_modules/axios/lib/core/mergeConfig.js":
        /*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/mergeConfig.js ***!
  \****************************************************/
        /***/ (module, __unused_webpack_exports, __webpack_require__) => {
          "use strict";
          eval(
            "\n\nvar utils = __webpack_require__(/*! ../utils */ \"./node_modules/axios/lib/utils.js\");\n\n/**\n * Config-specific merge-function which creates a new config-object\n * by merging two configuration objects together.\n *\n * @param {Object} config1\n * @param {Object} config2\n * @returns {Object} New object resulting from merging config2 to config1\n */\nmodule.exports = function mergeConfig(config1, config2) {\n  // eslint-disable-next-line no-param-reassign\n  config2 = config2 || {};\n  var config = {};\n\n  function getMergedValue(target, source) {\n    if (utils.isPlainObject(target) && utils.isPlainObject(source)) {\n      return utils.merge(target, source);\n    } else if (utils.isPlainObject(source)) {\n      return utils.merge({}, source);\n    } else if (utils.isArray(source)) {\n      return source.slice();\n    }\n    return source;\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDeepProperties(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      return getMergedValue(config1[prop], config2[prop]);\n    } else if (!utils.isUndefined(config1[prop])) {\n      return getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function valueFromConfig2(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      return getMergedValue(undefined, config2[prop]);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function defaultToConfig2(prop) {\n    if (!utils.isUndefined(config2[prop])) {\n      return getMergedValue(undefined, config2[prop]);\n    } else if (!utils.isUndefined(config1[prop])) {\n      return getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  // eslint-disable-next-line consistent-return\n  function mergeDirectKeys(prop) {\n    if (prop in config2) {\n      return getMergedValue(config1[prop], config2[prop]);\n    } else if (prop in config1) {\n      return getMergedValue(undefined, config1[prop]);\n    }\n  }\n\n  var mergeMap = {\n    'url': valueFromConfig2,\n    'method': valueFromConfig2,\n    'data': valueFromConfig2,\n    'baseURL': defaultToConfig2,\n    'transformRequest': defaultToConfig2,\n    'transformResponse': defaultToConfig2,\n    'paramsSerializer': defaultToConfig2,\n    'timeout': defaultToConfig2,\n    'timeoutMessage': defaultToConfig2,\n    'withCredentials': defaultToConfig2,\n    'adapter': defaultToConfig2,\n    'responseType': defaultToConfig2,\n    'xsrfCookieName': defaultToConfig2,\n    'xsrfHeaderName': defaultToConfig2,\n    'onUploadProgress': defaultToConfig2,\n    'onDownloadProgress': defaultToConfig2,\n    'decompress': defaultToConfig2,\n    'maxContentLength': defaultToConfig2,\n    'maxBodyLength': defaultToConfig2,\n    'transport': defaultToConfig2,\n    'httpAgent': defaultToConfig2,\n    'httpsAgent': defaultToConfig2,\n    'cancelToken': defaultToConfig2,\n    'socketPath': defaultToConfig2,\n    'responseEncoding': defaultToConfig2,\n    'validateStatus': mergeDirectKeys\n  };\n\n  utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {\n    var merge = mergeMap[prop] || mergeDeepProperties;\n    var configValue = merge(prop);\n    (utils.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);\n  });\n\n  return config;\n};\n\n\n//# sourceURL=webpack://lemon/./node_modules/axios/lib/core/mergeConfig.js?"
          );

          /***/
        },

      /***/ "./node_modules/axios/lib/core/settle.js":
        /*!***********************************************!*\
  !*** ./node_modules/axios/lib/core/settle.js ***!
  \***********************************************/
        /***/ (module, __unused_webpack_exports, __webpack_require__) => {
          "use strict";
          eval(
            "\n\nvar createError = __webpack_require__(/*! ./createError */ \"./node_modules/axios/lib/core/createError.js\");\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n */\nmodule.exports = function settle(resolve, reject, response) {\n  var validateStatus = response.config.validateStatus;\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(createError(\n      'Request failed with status code ' + response.status,\n      response.config,\n      null,\n      response.request,\n      response\n    ));\n  }\n};\n\n\n//# sourceURL=webpack://lemon/./node_modules/axios/lib/core/settle.js?"
          );

          /***/
        },

      /***/ "./node_modules/axios/lib/core/transformData.js":
        /*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/transformData.js ***!
  \******************************************************/
        /***/ (module, __unused_webpack_exports, __webpack_require__) => {
          "use strict";
          eval(
            '\n\nvar utils = __webpack_require__(/*! ./../utils */ "./node_modules/axios/lib/utils.js");\nvar defaults = __webpack_require__(/*! ./../defaults */ "./node_modules/axios/lib/defaults.js");\n\n/**\n * Transform the data for a request or a response\n *\n * @param {Object|String} data The data to be transformed\n * @param {Array} headers The headers for the request or response\n * @param {Array|Function} fns A single function or Array of functions\n * @returns {*} The resulting transformed data\n */\nmodule.exports = function transformData(data, headers, fns) {\n  var context = this || defaults;\n  /*eslint no-param-reassign:0*/\n  utils.forEach(fns, function transform(fn) {\n    data = fn.call(context, data, headers);\n  });\n\n  return data;\n};\n\n\n//# sourceURL=webpack://lemon/./node_modules/axios/lib/core/transformData.js?'
          );

          /***/
        },

      /***/ "./node_modules/axios/lib/defaults.js":
        /*!********************************************!*\
  !*** ./node_modules/axios/lib/defaults.js ***!
  \********************************************/
        /***/ (module, __unused_webpack_exports, __webpack_require__) => {
          "use strict";
          eval(
            "\n\nvar utils = __webpack_require__(/*! ./utils */ \"./node_modules/axios/lib/utils.js\");\nvar normalizeHeaderName = __webpack_require__(/*! ./helpers/normalizeHeaderName */ \"./node_modules/axios/lib/helpers/normalizeHeaderName.js\");\nvar enhanceError = __webpack_require__(/*! ./core/enhanceError */ \"./node_modules/axios/lib/core/enhanceError.js\");\n\nvar DEFAULT_CONTENT_TYPE = {\n  'Content-Type': 'application/x-www-form-urlencoded'\n};\n\nfunction setContentTypeIfUnset(headers, value) {\n  if (!utils.isUndefined(headers) && utils.isUndefined(headers['Content-Type'])) {\n    headers['Content-Type'] = value;\n  }\n}\n\nfunction getDefaultAdapter() {\n  var adapter;\n  if (typeof XMLHttpRequest !== 'undefined') {\n    // For browsers use XHR adapter\n    adapter = __webpack_require__(/*! ./adapters/xhr */ \"./node_modules/axios/lib/adapters/xhr.js\");\n  } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {\n    // For node use HTTP adapter\n    adapter = __webpack_require__(/*! ./adapters/http */ \"./node_modules/axios/lib/adapters/xhr.js\");\n  }\n  return adapter;\n}\n\nfunction stringifySafely(rawValue, parser, encoder) {\n  if (utils.isString(rawValue)) {\n    try {\n      (parser || JSON.parse)(rawValue);\n      return utils.trim(rawValue);\n    } catch (e) {\n      if (e.name !== 'SyntaxError') {\n        throw e;\n      }\n    }\n  }\n\n  return (encoder || JSON.stringify)(rawValue);\n}\n\nvar defaults = {\n\n  transitional: {\n    silentJSONParsing: true,\n    forcedJSONParsing: true,\n    clarifyTimeoutError: false\n  },\n\n  adapter: getDefaultAdapter(),\n\n  transformRequest: [function transformRequest(data, headers) {\n    normalizeHeaderName(headers, 'Accept');\n    normalizeHeaderName(headers, 'Content-Type');\n\n    if (utils.isFormData(data) ||\n      utils.isArrayBuffer(data) ||\n      utils.isBuffer(data) ||\n      utils.isStream(data) ||\n      utils.isFile(data) ||\n      utils.isBlob(data)\n    ) {\n      return data;\n    }\n    if (utils.isArrayBufferView(data)) {\n      return data.buffer;\n    }\n    if (utils.isURLSearchParams(data)) {\n      setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');\n      return data.toString();\n    }\n    if (utils.isObject(data) || (headers && headers['Content-Type'] === 'application/json')) {\n      setContentTypeIfUnset(headers, 'application/json');\n      return stringifySafely(data);\n    }\n    return data;\n  }],\n\n  transformResponse: [function transformResponse(data) {\n    var transitional = this.transitional || defaults.transitional;\n    var silentJSONParsing = transitional && transitional.silentJSONParsing;\n    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n    var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';\n\n    if (strictJSONParsing || (forcedJSONParsing && utils.isString(data) && data.length)) {\n      try {\n        return JSON.parse(data);\n      } catch (e) {\n        if (strictJSONParsing) {\n          if (e.name === 'SyntaxError') {\n            throw enhanceError(e, this, 'E_JSON_PARSE');\n          }\n          throw e;\n        }\n      }\n    }\n\n    return data;\n  }],\n\n  /**\n   * A timeout in milliseconds to abort a request. If set to 0 (default) a\n   * timeout is not created.\n   */\n  timeout: 0,\n\n  xsrfCookieName: 'XSRF-TOKEN',\n  xsrfHeaderName: 'X-XSRF-TOKEN',\n\n  maxContentLength: -1,\n  maxBodyLength: -1,\n\n  validateStatus: function validateStatus(status) {\n    return status >= 200 && status < 300;\n  },\n\n  headers: {\n    common: {\n      'Accept': 'application/json, text/plain, */*'\n    }\n  }\n};\n\nutils.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {\n  defaults.headers[method] = {};\n});\n\nutils.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {\n  defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n});\n\nmodule.exports = defaults;\n\n\n//# sourceURL=webpack://lemon/./node_modules/axios/lib/defaults.js?"
          );

          /***/
        },

      /***/ "./node_modules/axios/lib/env/data.js":
        /*!********************************************!*\
  !*** ./node_modules/axios/lib/env/data.js ***!
  \********************************************/
        /***/ (module) => {
          eval(
            'module.exports = {\n  "version": "0.24.0"\n};\n\n//# sourceURL=webpack://lemon/./node_modules/axios/lib/env/data.js?'
          );

          /***/
        },

      /***/ "./node_modules/axios/lib/helpers/bind.js":
        /*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/bind.js ***!
  \************************************************/
        /***/ (module) => {
          "use strict";
          eval(
            "\n\nmodule.exports = function bind(fn, thisArg) {\n  return function wrap() {\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; i++) {\n      args[i] = arguments[i];\n    }\n    return fn.apply(thisArg, args);\n  };\n};\n\n\n//# sourceURL=webpack://lemon/./node_modules/axios/lib/helpers/bind.js?"
          );

          /***/
        },

      /***/ "./node_modules/axios/lib/helpers/buildURL.js":
        /*!****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/buildURL.js ***!
  \****************************************************/
        /***/ (module, __unused_webpack_exports, __webpack_require__) => {
          "use strict";
          eval(
            "\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\n\nfunction encode(val) {\n  return encodeURIComponent(val).\n    replace(/%3A/gi, ':').\n    replace(/%24/g, '$').\n    replace(/%2C/gi, ',').\n    replace(/%20/g, '+').\n    replace(/%5B/gi, '[').\n    replace(/%5D/gi, ']');\n}\n\n/**\n * Build a URL by appending params to the end\n *\n * @param {string} url The base of the url (e.g., http://www.google.com)\n * @param {object} [params] The params to be appended\n * @returns {string} The formatted url\n */\nmodule.exports = function buildURL(url, params, paramsSerializer) {\n  /*eslint no-param-reassign:0*/\n  if (!params) {\n    return url;\n  }\n\n  var serializedParams;\n  if (paramsSerializer) {\n    serializedParams = paramsSerializer(params);\n  } else if (utils.isURLSearchParams(params)) {\n    serializedParams = params.toString();\n  } else {\n    var parts = [];\n\n    utils.forEach(params, function serialize(val, key) {\n      if (val === null || typeof val === 'undefined') {\n        return;\n      }\n\n      if (utils.isArray(val)) {\n        key = key + '[]';\n      } else {\n        val = [val];\n      }\n\n      utils.forEach(val, function parseValue(v) {\n        if (utils.isDate(v)) {\n          v = v.toISOString();\n        } else if (utils.isObject(v)) {\n          v = JSON.stringify(v);\n        }\n        parts.push(encode(key) + '=' + encode(v));\n      });\n    });\n\n    serializedParams = parts.join('&');\n  }\n\n  if (serializedParams) {\n    var hashmarkIndex = url.indexOf('#');\n    if (hashmarkIndex !== -1) {\n      url = url.slice(0, hashmarkIndex);\n    }\n\n    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;\n  }\n\n  return url;\n};\n\n\n//# sourceURL=webpack://lemon/./node_modules/axios/lib/helpers/buildURL.js?"
          );

          /***/
        },

      /***/ "./node_modules/axios/lib/helpers/combineURLs.js":
        /*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/combineURLs.js ***!
  \*******************************************************/
        /***/ (module) => {
          "use strict";
          eval(
            "\n\n/**\n * Creates a new URL by combining the specified URLs\n *\n * @param {string} baseURL The base URL\n * @param {string} relativeURL The relative URL\n * @returns {string} The combined URL\n */\nmodule.exports = function combineURLs(baseURL, relativeURL) {\n  return relativeURL\n    ? baseURL.replace(/\\/+$/, '') + '/' + relativeURL.replace(/^\\/+/, '')\n    : baseURL;\n};\n\n\n//# sourceURL=webpack://lemon/./node_modules/axios/lib/helpers/combineURLs.js?"
          );

          /***/
        },

      /***/ "./node_modules/axios/lib/helpers/cookies.js":
        /*!***************************************************!*\
  !*** ./node_modules/axios/lib/helpers/cookies.js ***!
  \***************************************************/
        /***/ (module, __unused_webpack_exports, __webpack_require__) => {
          "use strict";
          eval(
            "\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs support document.cookie\n    (function standardBrowserEnv() {\n      return {\n        write: function write(name, value, expires, path, domain, secure) {\n          var cookie = [];\n          cookie.push(name + '=' + encodeURIComponent(value));\n\n          if (utils.isNumber(expires)) {\n            cookie.push('expires=' + new Date(expires).toGMTString());\n          }\n\n          if (utils.isString(path)) {\n            cookie.push('path=' + path);\n          }\n\n          if (utils.isString(domain)) {\n            cookie.push('domain=' + domain);\n          }\n\n          if (secure === true) {\n            cookie.push('secure');\n          }\n\n          document.cookie = cookie.join('; ');\n        },\n\n        read: function read(name) {\n          var match = document.cookie.match(new RegExp('(^|;\\\\s*)(' + name + ')=([^;]*)'));\n          return (match ? decodeURIComponent(match[3]) : null);\n        },\n\n        remove: function remove(name) {\n          this.write(name, '', Date.now() - 86400000);\n        }\n      };\n    })() :\n\n  // Non standard browser env (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return {\n        write: function write() {},\n        read: function read() { return null; },\n        remove: function remove() {}\n      };\n    })()\n);\n\n\n//# sourceURL=webpack://lemon/./node_modules/axios/lib/helpers/cookies.js?"
          );

          /***/
        },

      /***/ "./node_modules/axios/lib/helpers/isAbsoluteURL.js":
        /*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \*********************************************************/
        /***/ (module) => {
          "use strict";
          eval(
            '\n\n/**\n * Determines whether the specified URL is absolute\n *\n * @param {string} url The URL to test\n * @returns {boolean} True if the specified URL is absolute, otherwise false\n */\nmodule.exports = function isAbsoluteURL(url) {\n  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).\n  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed\n  // by any combination of letters, digits, plus, period, or hyphen.\n  return /^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i.test(url);\n};\n\n\n//# sourceURL=webpack://lemon/./node_modules/axios/lib/helpers/isAbsoluteURL.js?'
          );

          /***/
        },

      /***/ "./node_modules/axios/lib/helpers/isAxiosError.js":
        /*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAxiosError.js ***!
  \********************************************************/
        /***/ (module) => {
          "use strict";
          eval(
            "\n\n/**\n * Determines whether the payload is an error thrown by Axios\n *\n * @param {*} payload The value to test\n * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false\n */\nmodule.exports = function isAxiosError(payload) {\n  return (typeof payload === 'object') && (payload.isAxiosError === true);\n};\n\n\n//# sourceURL=webpack://lemon/./node_modules/axios/lib/helpers/isAxiosError.js?"
          );

          /***/
        },

      /***/ "./node_modules/axios/lib/helpers/isURLSameOrigin.js":
        /*!***********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \***********************************************************/
        /***/ (module, __unused_webpack_exports, __webpack_require__) => {
          "use strict";
          eval(
            "\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\n\nmodule.exports = (\n  utils.isStandardBrowserEnv() ?\n\n  // Standard browser envs have full support of the APIs needed to test\n  // whether the request URL is of the same origin as current location.\n    (function standardBrowserEnv() {\n      var msie = /(msie|trident)/i.test(navigator.userAgent);\n      var urlParsingNode = document.createElement('a');\n      var originURL;\n\n      /**\n    * Parse a URL to discover it's components\n    *\n    * @param {String} url The URL to be parsed\n    * @returns {Object}\n    */\n      function resolveURL(url) {\n        var href = url;\n\n        if (msie) {\n        // IE needs attribute set twice to normalize properties\n          urlParsingNode.setAttribute('href', href);\n          href = urlParsingNode.href;\n        }\n\n        urlParsingNode.setAttribute('href', href);\n\n        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils\n        return {\n          href: urlParsingNode.href,\n          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',\n          host: urlParsingNode.host,\n          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, '') : '',\n          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',\n          hostname: urlParsingNode.hostname,\n          port: urlParsingNode.port,\n          pathname: (urlParsingNode.pathname.charAt(0) === '/') ?\n            urlParsingNode.pathname :\n            '/' + urlParsingNode.pathname\n        };\n      }\n\n      originURL = resolveURL(window.location.href);\n\n      /**\n    * Determine if a URL shares the same origin as the current location\n    *\n    * @param {String} requestURL The URL to test\n    * @returns {boolean} True if URL shares the same origin, otherwise false\n    */\n      return function isURLSameOrigin(requestURL) {\n        var parsed = (utils.isString(requestURL)) ? resolveURL(requestURL) : requestURL;\n        return (parsed.protocol === originURL.protocol &&\n            parsed.host === originURL.host);\n      };\n    })() :\n\n  // Non standard browser envs (web workers, react-native) lack needed support.\n    (function nonStandardBrowserEnv() {\n      return function isURLSameOrigin() {\n        return true;\n      };\n    })()\n);\n\n\n//# sourceURL=webpack://lemon/./node_modules/axios/lib/helpers/isURLSameOrigin.js?"
          );

          /***/
        },

      /***/ "./node_modules/axios/lib/helpers/normalizeHeaderName.js":
        /*!***************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/normalizeHeaderName.js ***!
  \***************************************************************/
        /***/ (module, __unused_webpack_exports, __webpack_require__) => {
          "use strict";
          eval(
            '\n\nvar utils = __webpack_require__(/*! ../utils */ "./node_modules/axios/lib/utils.js");\n\nmodule.exports = function normalizeHeaderName(headers, normalizedName) {\n  utils.forEach(headers, function processHeader(value, name) {\n    if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {\n      headers[normalizedName] = value;\n      delete headers[name];\n    }\n  });\n};\n\n\n//# sourceURL=webpack://lemon/./node_modules/axios/lib/helpers/normalizeHeaderName.js?'
          );

          /***/
        },

      /***/ "./node_modules/axios/lib/helpers/parseHeaders.js":
        /*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseHeaders.js ***!
  \********************************************************/
        /***/ (module, __unused_webpack_exports, __webpack_require__) => {
          "use strict";
          eval(
            "\n\nvar utils = __webpack_require__(/*! ./../utils */ \"./node_modules/axios/lib/utils.js\");\n\n// Headers whose duplicates are ignored by node\n// c.f. https://nodejs.org/api/http.html#http_message_headers\nvar ignoreDuplicateOf = [\n  'age', 'authorization', 'content-length', 'content-type', 'etag',\n  'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',\n  'last-modified', 'location', 'max-forwards', 'proxy-authorization',\n  'referer', 'retry-after', 'user-agent'\n];\n\n/**\n * Parse headers into an object\n *\n * ```\n * Date: Wed, 27 Aug 2014 08:58:49 GMT\n * Content-Type: application/json\n * Connection: keep-alive\n * Transfer-Encoding: chunked\n * ```\n *\n * @param {String} headers Headers needing to be parsed\n * @returns {Object} Headers parsed into an object\n */\nmodule.exports = function parseHeaders(headers) {\n  var parsed = {};\n  var key;\n  var val;\n  var i;\n\n  if (!headers) { return parsed; }\n\n  utils.forEach(headers.split('\\n'), function parser(line) {\n    i = line.indexOf(':');\n    key = utils.trim(line.substr(0, i)).toLowerCase();\n    val = utils.trim(line.substr(i + 1));\n\n    if (key) {\n      if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {\n        return;\n      }\n      if (key === 'set-cookie') {\n        parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);\n      } else {\n        parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;\n      }\n    }\n  });\n\n  return parsed;\n};\n\n\n//# sourceURL=webpack://lemon/./node_modules/axios/lib/helpers/parseHeaders.js?"
          );

          /***/
        },

      /***/ "./node_modules/axios/lib/helpers/spread.js":
        /*!**************************************************!*\
  !*** ./node_modules/axios/lib/helpers/spread.js ***!
  \**************************************************/
        /***/ (module) => {
          "use strict";
          eval(
            "\n\n/**\n * Syntactic sugar for invoking a function and expanding an array for arguments.\n *\n * Common use case would be to use `Function.prototype.apply`.\n *\n *  ```js\n *  function f(x, y, z) {}\n *  var args = [1, 2, 3];\n *  f.apply(null, args);\n *  ```\n *\n * With `spread` this example can be re-written.\n *\n *  ```js\n *  spread(function(x, y, z) {})([1, 2, 3]);\n *  ```\n *\n * @param {Function} callback\n * @returns {Function}\n */\nmodule.exports = function spread(callback) {\n  return function wrap(arr) {\n    return callback.apply(null, arr);\n  };\n};\n\n\n//# sourceURL=webpack://lemon/./node_modules/axios/lib/helpers/spread.js?"
          );

          /***/
        },

      /***/ "./node_modules/axios/lib/helpers/validator.js":
        /*!*****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/validator.js ***!
  \*****************************************************/
        /***/ (module, __unused_webpack_exports, __webpack_require__) => {
          "use strict";
          eval(
            "\n\nvar VERSION = (__webpack_require__(/*! ../env/data */ \"./node_modules/axios/lib/env/data.js\").version);\n\nvar validators = {};\n\n// eslint-disable-next-line func-names\n['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {\n  validators[type] = function validator(thing) {\n    return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;\n  };\n});\n\nvar deprecatedWarnings = {};\n\n/**\n * Transitional option validator\n * @param {function|boolean?} validator - set to false if the transitional option has been removed\n * @param {string?} version - deprecated version / removed since version\n * @param {string?} message - some message with additional info\n * @returns {function}\n */\nvalidators.transitional = function transitional(validator, version, message) {\n  function formatMessage(opt, desc) {\n    return '[Axios v' + VERSION + '] Transitional option \\'' + opt + '\\'' + desc + (message ? '. ' + message : '');\n  }\n\n  // eslint-disable-next-line func-names\n  return function(value, opt, opts) {\n    if (validator === false) {\n      throw new Error(formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')));\n    }\n\n    if (version && !deprecatedWarnings[opt]) {\n      deprecatedWarnings[opt] = true;\n      // eslint-disable-next-line no-console\n      console.warn(\n        formatMessage(\n          opt,\n          ' has been deprecated since v' + version + ' and will be removed in the near future'\n        )\n      );\n    }\n\n    return validator ? validator(value, opt, opts) : true;\n  };\n};\n\n/**\n * Assert object's properties type\n * @param {object} options\n * @param {object} schema\n * @param {boolean?} allowUnknown\n */\n\nfunction assertOptions(options, schema, allowUnknown) {\n  if (typeof options !== 'object') {\n    throw new TypeError('options must be an object');\n  }\n  var keys = Object.keys(options);\n  var i = keys.length;\n  while (i-- > 0) {\n    var opt = keys[i];\n    var validator = schema[opt];\n    if (validator) {\n      var value = options[opt];\n      var result = value === undefined || validator(value, opt, options);\n      if (result !== true) {\n        throw new TypeError('option ' + opt + ' must be ' + result);\n      }\n      continue;\n    }\n    if (allowUnknown !== true) {\n      throw Error('Unknown option ' + opt);\n    }\n  }\n}\n\nmodule.exports = {\n  assertOptions: assertOptions,\n  validators: validators\n};\n\n\n//# sourceURL=webpack://lemon/./node_modules/axios/lib/helpers/validator.js?"
          );

          /***/
        },

      /***/ "./node_modules/axios/lib/utils.js":
        /*!*****************************************!*\
  !*** ./node_modules/axios/lib/utils.js ***!
  \*****************************************/
        /***/ (module, __unused_webpack_exports, __webpack_require__) => {
          "use strict";
          eval(
            "\n\nvar bind = __webpack_require__(/*! ./helpers/bind */ \"./node_modules/axios/lib/helpers/bind.js\");\n\n// utils is a library of generic helper functions non-specific to axios\n\nvar toString = Object.prototype.toString;\n\n/**\n * Determine if a value is an Array\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Array, otherwise false\n */\nfunction isArray(val) {\n  return toString.call(val) === '[object Array]';\n}\n\n/**\n * Determine if a value is undefined\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if the value is undefined, otherwise false\n */\nfunction isUndefined(val) {\n  return typeof val === 'undefined';\n}\n\n/**\n * Determine if a value is a Buffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Buffer, otherwise false\n */\nfunction isBuffer(val) {\n  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)\n    && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);\n}\n\n/**\n * Determine if a value is an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an ArrayBuffer, otherwise false\n */\nfunction isArrayBuffer(val) {\n  return toString.call(val) === '[object ArrayBuffer]';\n}\n\n/**\n * Determine if a value is a FormData\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an FormData, otherwise false\n */\nfunction isFormData(val) {\n  return (typeof FormData !== 'undefined') && (val instanceof FormData);\n}\n\n/**\n * Determine if a value is a view on an ArrayBuffer\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false\n */\nfunction isArrayBufferView(val) {\n  var result;\n  if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {\n    result = ArrayBuffer.isView(val);\n  } else {\n    result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);\n  }\n  return result;\n}\n\n/**\n * Determine if a value is a String\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a String, otherwise false\n */\nfunction isString(val) {\n  return typeof val === 'string';\n}\n\n/**\n * Determine if a value is a Number\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Number, otherwise false\n */\nfunction isNumber(val) {\n  return typeof val === 'number';\n}\n\n/**\n * Determine if a value is an Object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is an Object, otherwise false\n */\nfunction isObject(val) {\n  return val !== null && typeof val === 'object';\n}\n\n/**\n * Determine if a value is a plain Object\n *\n * @param {Object} val The value to test\n * @return {boolean} True if value is a plain Object, otherwise false\n */\nfunction isPlainObject(val) {\n  if (toString.call(val) !== '[object Object]') {\n    return false;\n  }\n\n  var prototype = Object.getPrototypeOf(val);\n  return prototype === null || prototype === Object.prototype;\n}\n\n/**\n * Determine if a value is a Date\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Date, otherwise false\n */\nfunction isDate(val) {\n  return toString.call(val) === '[object Date]';\n}\n\n/**\n * Determine if a value is a File\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a File, otherwise false\n */\nfunction isFile(val) {\n  return toString.call(val) === '[object File]';\n}\n\n/**\n * Determine if a value is a Blob\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Blob, otherwise false\n */\nfunction isBlob(val) {\n  return toString.call(val) === '[object Blob]';\n}\n\n/**\n * Determine if a value is a Function\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Function, otherwise false\n */\nfunction isFunction(val) {\n  return toString.call(val) === '[object Function]';\n}\n\n/**\n * Determine if a value is a Stream\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a Stream, otherwise false\n */\nfunction isStream(val) {\n  return isObject(val) && isFunction(val.pipe);\n}\n\n/**\n * Determine if a value is a URLSearchParams object\n *\n * @param {Object} val The value to test\n * @returns {boolean} True if value is a URLSearchParams object, otherwise false\n */\nfunction isURLSearchParams(val) {\n  return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;\n}\n\n/**\n * Trim excess whitespace off the beginning and end of a string\n *\n * @param {String} str The String to trim\n * @returns {String} The String freed of excess whitespace\n */\nfunction trim(str) {\n  return str.trim ? str.trim() : str.replace(/^\\s+|\\s+$/g, '');\n}\n\n/**\n * Determine if we're running in a standard browser environment\n *\n * This allows axios to run in a web worker, and react-native.\n * Both environments support XMLHttpRequest, but not fully standard globals.\n *\n * web workers:\n *  typeof window -> undefined\n *  typeof document -> undefined\n *\n * react-native:\n *  navigator.product -> 'ReactNative'\n * nativescript\n *  navigator.product -> 'NativeScript' or 'NS'\n */\nfunction isStandardBrowserEnv() {\n  if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||\n                                           navigator.product === 'NativeScript' ||\n                                           navigator.product === 'NS')) {\n    return false;\n  }\n  return (\n    typeof window !== 'undefined' &&\n    typeof document !== 'undefined'\n  );\n}\n\n/**\n * Iterate over an Array or an Object invoking a function for each item.\n *\n * If `obj` is an Array callback will be called passing\n * the value, index, and complete array for each item.\n *\n * If 'obj' is an Object callback will be called passing\n * the value, key, and complete object for each property.\n *\n * @param {Object|Array} obj The object to iterate\n * @param {Function} fn The callback to invoke for each item\n */\nfunction forEach(obj, fn) {\n  // Don't bother if no value provided\n  if (obj === null || typeof obj === 'undefined') {\n    return;\n  }\n\n  // Force an array if not already something iterable\n  if (typeof obj !== 'object') {\n    /*eslint no-param-reassign:0*/\n    obj = [obj];\n  }\n\n  if (isArray(obj)) {\n    // Iterate over array values\n    for (var i = 0, l = obj.length; i < l; i++) {\n      fn.call(null, obj[i], i, obj);\n    }\n  } else {\n    // Iterate over object keys\n    for (var key in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n        fn.call(null, obj[key], key, obj);\n      }\n    }\n  }\n}\n\n/**\n * Accepts varargs expecting each argument to be an object, then\n * immutably merges the properties of each object and returns result.\n *\n * When multiple objects contain the same key the later object in\n * the arguments list will take precedence.\n *\n * Example:\n *\n * ```js\n * var result = merge({foo: 123}, {foo: 456});\n * console.log(result.foo); // outputs 456\n * ```\n *\n * @param {Object} obj1 Object to merge\n * @returns {Object} Result of all merge properties\n */\nfunction merge(/* obj1, obj2, obj3, ... */) {\n  var result = {};\n  function assignValue(val, key) {\n    if (isPlainObject(result[key]) && isPlainObject(val)) {\n      result[key] = merge(result[key], val);\n    } else if (isPlainObject(val)) {\n      result[key] = merge({}, val);\n    } else if (isArray(val)) {\n      result[key] = val.slice();\n    } else {\n      result[key] = val;\n    }\n  }\n\n  for (var i = 0, l = arguments.length; i < l; i++) {\n    forEach(arguments[i], assignValue);\n  }\n  return result;\n}\n\n/**\n * Extends object a by mutably adding to it the properties of object b.\n *\n * @param {Object} a The object to be extended\n * @param {Object} b The object to copy properties from\n * @param {Object} thisArg The object to bind function to\n * @return {Object} The resulting value of object a\n */\nfunction extend(a, b, thisArg) {\n  forEach(b, function assignValue(val, key) {\n    if (thisArg && typeof val === 'function') {\n      a[key] = bind(val, thisArg);\n    } else {\n      a[key] = val;\n    }\n  });\n  return a;\n}\n\n/**\n * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)\n *\n * @param {string} content with BOM\n * @return {string} content value without BOM\n */\nfunction stripBOM(content) {\n  if (content.charCodeAt(0) === 0xFEFF) {\n    content = content.slice(1);\n  }\n  return content;\n}\n\nmodule.exports = {\n  isArray: isArray,\n  isArrayBuffer: isArrayBuffer,\n  isBuffer: isBuffer,\n  isFormData: isFormData,\n  isArrayBufferView: isArrayBufferView,\n  isString: isString,\n  isNumber: isNumber,\n  isObject: isObject,\n  isPlainObject: isPlainObject,\n  isUndefined: isUndefined,\n  isDate: isDate,\n  isFile: isFile,\n  isBlob: isBlob,\n  isFunction: isFunction,\n  isStream: isStream,\n  isURLSearchParams: isURLSearchParams,\n  isStandardBrowserEnv: isStandardBrowserEnv,\n  forEach: forEach,\n  merge: merge,\n  extend: extend,\n  trim: trim,\n  stripBOM: stripBOM\n};\n\n\n//# sourceURL=webpack://lemon/./node_modules/axios/lib/utils.js?"
          );

          /***/
        },

      /***/ "./lemon/common/callback.js":
        /*!**********************************!*\
  !*** ./lemon/common/callback.js ***!
  \**********************************/
        /***/ (
          __unused_webpack_module,
          __webpack_exports__,
          __webpack_require__
        ) => {
          "use strict";
          eval(
            '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./log */ "./lemon/common/log.js");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./lemon/common/utils.js");\n\n\nclass Callback {\n  /* key: callbackId, value: function回调函数 */\n  constructor() {\n    /* 通用回调事件列表 */\n    this.onEvents = new Map();\n  }\n\n  /** 回调处理通用逻辑 */\n  _safeOnCallback(func, param) {\n    try {\n      func(param);\n    } catch (error) {\n      _log__WEBPACK_IMPORTED_MODULE_0__["default"].error(error);\n    }\n  }\n\n  /** 添加统一事件回调 */\n  addEvent(callback) {\n    if (!callback) {\n      _log__WEBPACK_IMPORTED_MODULE_0__["default"].debug(\'addEvent callback is null\');\n      return false;\n    }\n    const callbackId = (0,_utils__WEBPACK_IMPORTED_MODULE_1__.guid)();\n    this.onEvents.set(callbackId, callback);\n    return callbackId;\n  }\n\n  /** 触发统一事件回调 */\n  onEvent(jsonData) {\n    this.onEvents.forEach(func => {\n      this._safeOnCallback(func, jsonData);\n    });\n  }\n\n  /** 根据callbackId移除通用回调 */\n  removeEvent(callbackId) {\n    if (this.onEvents.has(callbackId)) {\n      this.onEvents.delete(callbackId);\n    }\n  }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new Callback());\n\n//# sourceURL=webpack://lemon/./lemon/common/callback.js?'
          );

          /***/
        },

      /***/ "./lemon/common/log.js":
        /*!*****************************!*\
  !*** ./lemon/common/log.js ***!
  \*****************************/
        /***/ (
          __unused_webpack_module,
          __webpack_exports__,
          __webpack_require__
        ) => {
          "use strict";
          eval(
            "__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass log {\n  constructor() {\n    this.logLevel = 4;\n    this.tag = '[lemonSDK]';\n  }\n\n  /**\n   * 设置日志级别\n   * 0 : 不打印日志\n   * 1 : error\n   * 2 : warn\n   * 3 : info\n   * 4 : debug\n   * @param {日志级别 int} level\n   */\n  setLevel(level) {\n    this.logLevel = level;\n  }\n  getLevel() {\n    return this.logLevel;\n  }\n\n  /**\n   * error 级别日志打印\n   */\n  error(...msg) {\n    if (this.logLevel > 4 || this.logLevel < 1) {\n      return;\n    }\n    try {\n      console.error(this.tag, ...msg);\n    } catch (error) {\n      console.error(this.tag, error);\n    }\n  }\n\n  /**\n   * warn 级别日志打印\n   */\n  warn(...msg) {\n    if (this.logLevel > 4 || this.logLevel < 2) {\n      return;\n    }\n    try {\n      console.warn(this.tag, ...msg);\n    } catch (error) {\n      console.error(this.tag, error);\n    }\n  }\n\n  /**\n   * info 级别日志打印\n   */\n  info(...msg) {\n    if (this.logLevel != 4 && this.logLevel != 3) {\n      return;\n    }\n    try {\n      console.info(this.tag, ...msg);\n    } catch (error) {\n      console.info(this.tag, error);\n    }\n  }\n\n  /**\n   * debug 级别日志打印\n   */\n  debug(...msg) {\n    if (this.logLevel != 4) {\n      return;\n    }\n    try {\n      console.info(this.tag, ...msg);\n    } catch (error) {\n      console.error(this.tag, error);\n    }\n  }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new log());\n\n//# sourceURL=webpack://lemon/./lemon/common/log.js?"
          );

          /***/
        },

      /***/ "./lemon/common/privateUtil.js":
        /*!*************************************!*\
  !*** ./lemon/common/privateUtil.js ***!
  \*************************************/
        /***/ (
          __unused_webpack_module,
          __webpack_exports__,
          __webpack_require__
        ) => {
          "use strict";
          eval(
            '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _protocol_websocket__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../protocol/websocket */ "./lemon/protocol/websocket.js");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils */ "./lemon/common/utils.js");\n\n\n/**\n * 这个是临时增加的文件，本不应该存在的\n * 因为sdk中有些api是本来不打算提供给外部使用的，但是现在已经提供出去了并且已经在puc demo业务中使用了\n * 为了不影响puc demo的正常运行，把这些api集中在一起，后续会删除这个文件，所以不要在这里新增任何东西了，也不要在外部调用这个文件的api\n */\nclass PrivateUtil {\n  unPackGuid = _utils__WEBPACK_IMPORTED_MODULE_1__.unPackGuid;\n  getNumberTypeFromBasedata = _utils__WEBPACK_IMPORTED_MODULE_1__.getNumberTypeFromBasedata;\n  getNumberFromBasedata = _utils__WEBPACK_IMPORTED_MODULE_1__.getNumberFromBasedata;\n  genLocalGuid = _utils__WEBPACK_IMPORTED_MODULE_1__.genLocalGuid;\n  getSystemIdFromBasedata = _utils__WEBPACK_IMPORTED_MODULE_1__.getSystemIdFromBasedata;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new PrivateUtil());\n\n//# sourceURL=webpack://lemon/./lemon/common/privateUtil.js?'
          );

          /***/
        },

      /***/ "./lemon/common/sessionFactory.js":
        /*!****************************************!*\
  !*** ./lemon/common/sessionFactory.js ***!
  \****************************************/
        /***/ (
          __unused_webpack_module,
          __webpack_exports__,
          __webpack_require__
        ) => {
          "use strict";
          eval(
            "__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SessionFactory)\n/* harmony export */ });\n/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./log */ \"./lemon/common/log.js\");\n/* harmony import */ var _protocol_webrtc__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../protocol/webrtc */ \"./lemon/protocol/webrtc.js\");\n/* harmony import */ var _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../public/baseRequest */ \"./lemon/public/baseRequest.js\");\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils */ \"./lemon/common/utils.js\");\n/* harmony import */ var _public_constant__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../public/constant */ \"./lemon/public/constant.js\");\n\n\n\n\n\n\n/** Session工厂类封装 */\nclass SessionFactory {\n  /** 首次呼叫，初始化对应的session信息 */\n  initSession(makeCallInfo) {\n    return new Promise(resolve => {\n      _log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].info('call - 下呼 - 首次呼叫，初始化session！~', makeCallInfo.call_id);\n      const {\n        ambience_flag = 0,\n        call_mode = 0,\n        call_priority = 1,\n        call_type = 0,\n        camera_flag = 0,\n        duplex_flag = 0,\n        e2ee_flag = 0,\n        hook_flag = 1,\n        listen_flag = 0,\n        src_type = 1,\n        video_orient = 0\n      } = makeCallInfo.attribute || {};\n      const attribute = {\n        ambience_flag,\n        /* 侦听侦视标识 1-环境侦听或环境侦视 */\n        call_mode,\n        /* 呼叫媒体模式 0-音频，1-视频， 2-音视频 */\n        call_priority,\n        /* 呼叫优先级 1-普通呼叫，15-紧急呼叫 */\n        call_type,\n        /* 呼叫类型 */\n        camera_flag,\n        duplex_flag,\n        /* 全双工呼叫标识 0-半双工， 1-全双工 */\n        e2ee_flag,\n        /* 加密呼叫标识 0-非加密， 1-加密 */\n        hook_flag,\n        /* 自动摘机标识 0-自动接听， 1-手动接听 */\n        listen_flag,\n        /* 值守呼叫标识 0-非监听呼叫， 1-监听呼叫 */\n        src_type,\n        /* 呼叫源类型 0-SIP，1-WebPUC，2-网关 */\n        video_orient /* 横竖屏设置 0-横屏，1-竖屏 */\n      };\n      /*\n        注意：此处number_alias为空字符串\n        原因为：\n            信令中如果无此值，PUC服务端序列化会报错\n            但是实际业务中不需要该字段，所以设置为空串\n            后续如果有变化，请咨询PUC服务端相关人员\n      */\n      const {\n        callee_guid,\n        call_id\n      } = makeCallInfo || {};\n      const ids = (0,_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(callee_guid);\n      const time_slot = ids === null || ids === void 0 ? void 0 : ids.time_slot;\n      const time_slot_obj = time_slot ? {\n        time_slot\n      } : {\n        time_slot: \"\"\n      };\n      const session = {\n        call_id,\n        caller: {\n          puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getBaseReq().user_puc_id,\n          system_id: \"000\",\n          number: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getBaseReq().user_id,\n          number_type: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getBaseReq().number_type,\n          number_alias: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__[\"default\"].getBaseReq().dispatcher_name || \"\"\n        },\n        callee: {\n          puc_id: ids === null || ids === void 0 ? void 0 : ids.puc_id,\n          system_id: ids === null || ids === void 0 ? void 0 : ids.system_id,\n          number: ids === null || ids === void 0 ? void 0 : ids.what_id,\n          /* 动态重组，TNND 呼叫时候需要发的 number_type 为 1，而不是基础数据传过来的4，哎！~ */\n          /* 系统派接，TNND 呼叫时候需要发的 number_type 为 1，而不是基础数据传过来的21，哎！~ */\n          number_type: (ids === null || ids === void 0 ? void 0 : ids.number_type) === 4 || (ids === null || ids === void 0 ? void 0 : ids.number_type) === 21 ? 1 : ids === null || ids === void 0 ? void 0 : ids.number_type,\n          number_alias: makeCallInfo.callee_alias || \"\",\n          ...time_slot_obj\n        },\n        attribute,\n        mediaRTC: {\n          peerConnection1: null,\n          peerConnection2: null,\n          localStream1: null,\n          localStream2: null,\n          remoteStream1: null,\n          remoteStream2: null,\n          localSdp1: null,\n          localSdp2: null,\n          remoteSdp1: null,\n          remoteSdp2: null,\n          localCandidates1: [],\n          localCandidates2: [],\n          remoteCandidates1: [],\n          remoteCandidates2: [],\n          transferVideoStream: makeCallInfo !== null && makeCallInfo !== void 0 && makeCallInfo.transferVideoStream ? makeCallInfo === null || makeCallInfo === void 0 ? void 0 : makeCallInfo.transferVideoStream : null,\n          transferAudioStream: makeCallInfo !== null && makeCallInfo !== void 0 && makeCallInfo.transferAudioStream ? makeCallInfo === null || makeCallInfo === void 0 ? void 0 : makeCallInfo.transferAudioStream : null,\n          mediaOptions: {\n            video_frame_size: makeCallInfo !== null && makeCallInfo !== void 0 && makeCallInfo.video_frame_size ? makeCallInfo === null || makeCallInfo === void 0 ? void 0 : makeCallInfo.video_frame_size : 3\n          }\n        },\n        status: {\n          /* 呼叫状态 */\n          callState: _public_constant__WEBPACK_IMPORTED_MODULE_4__.CALL_STATUS.NORMAL,\n          /* 呼叫方向 */\n          callDirection: _public_constant__WEBPACK_IMPORTED_MODULE_4__.CALL_DIRECTION.NORMAL,\n          /* 讲话人 */\n          speaker: {\n            number: '',\n            number_type: 0,\n            puc_id: '',\n            system_id: ''\n          }\n        }\n      };\n      _log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].info('call - 下呼 - session初始化完毕！~', JSON.stringify(session));\n      resolve(session);\n    });\n  }\n\n  /** 初始化接听session */\n  _initConnect(session) {\n    return new Promise(function (resolve, reject) {\n      const call_id = session.call_id;\n      if (!session) {\n        _log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error('call - 上呼 - 接听session为空！', call_id);\n        return;\n      }\n      if (session.status.callState !== _public_constant__WEBPACK_IMPORTED_MODULE_4__.CALL_STATUS.INCOMING) {\n        _log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error('call - 上呼 - 当前通话状态为：' + session.status.callState + '，不允许接听！', call_id);\n        reject('当前通话状态为: ' + session.status.callState + '，不允许接听！');\n        return;\n      }\n      if (!(session.status.callDirection === _public_constant__WEBPACK_IMPORTED_MODULE_4__.CALL_DIRECTION.CALLIN || session.status.callDirection === _public_constant__WEBPACK_IMPORTED_MODULE_4__.CALL_DIRECTION.MONITOR)) {\n        _log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error('call - 上呼 - 当前通话方向为：' + session.status.callDirection + '，不允许接听！', call_id);\n        reject('当前通话方向为: ' + session.status.callDirection + '，不允许接听！');\n        return;\n      }\n      resolve(session);\n    });\n  }\n\n  /** 根据上呼信息构建会话session */\n  inviteSessionBuild(message) {\n    var _message$media, _message$media$video, _message$attribute, _message$media2, _message$attribute2, _message$media3, _message$attribute3;\n    const session = {\n      call_id: message.call_id,\n      caller: message.caller,\n      callee: message.callee,\n      attribute: message.attribute,\n      mediaRTC: {\n        peerConnection1: null,\n        peerConnection2: null,\n        localStream1: null,\n        localStream2: null,\n        remoteStream1: null,\n        remoteStream2: null,\n        localSdp1: null,\n        localSdp2: null,\n        localCandidates1: [],\n        localCandidates2: []\n      },\n      status: {\n        /* 呼叫状态 */\n        callState: _public_constant__WEBPACK_IMPORTED_MODULE_4__.CALL_STATUS.INCOMING,\n        /* 呼叫方向 */\n        callDirection: _public_constant__WEBPACK_IMPORTED_MODULE_4__.CALL_DIRECTION.NORMAL,\n        /* 讲话人 */\n        speaker: {\n          number: '',\n          number_type: 0\n        }\n      }\n    };\n    if ((_message$media = message.media) !== null && _message$media !== void 0 && (_message$media$video = _message$media.video) !== null && _message$media$video !== void 0 && _message$media$video.video_frame_size) {\n      var _session$mediaRTC;\n      if (session !== null && session !== void 0 && (_session$mediaRTC = session.mediaRTC) !== null && _session$mediaRTC !== void 0 && _session$mediaRTC.mediaOptions) {\n        session.mediaRTC.mediaOptions.video_frame_size = message.media.video.video_frame_size;\n      } else {\n        session.mediaRTC.mediaOptions = {\n          video_frame_size: message.media.video.video_frame_size\n        };\n      }\n    }\n    if (((_message$attribute = message.attribute) === null || _message$attribute === void 0 ? void 0 : _message$attribute.call_mode) !== _public_constant__WEBPACK_IMPORTED_MODULE_4__.CALL_MODE.VIDEO && message !== null && message !== void 0 && (_message$media2 = message.media) !== null && _message$media2 !== void 0 && _message$media2.audio) {\n      session.mediaRTC.remoteSdp1 = {\n        type: 'offer',\n        sdp: message.media.audio.web_audio_sdp\n      };\n      session.mediaRTC.remoteCandidates1 = JSON.parse(message.media.audio.web_audio_candidate);\n    }\n    if (((_message$attribute2 = message.attribute) === null || _message$attribute2 === void 0 ? void 0 : _message$attribute2.call_mode) !== _public_constant__WEBPACK_IMPORTED_MODULE_4__.CALL_MODE.AUDIO && message !== null && message !== void 0 && (_message$media3 = message.media) !== null && _message$media3 !== void 0 && _message$media3.video) {\n      session.mediaRTC.remoteSdp2 = {\n        type: 'offer',\n        sdp: message.media.video.web_video_sdp\n      };\n      session.mediaRTC.remoteCandidates2 = JSON.parse(message.media.video.web_video_candidate);\n    }\n    if (((_message$attribute3 = message.attribute) === null || _message$attribute3 === void 0 ? void 0 : _message$attribute3.listen_flag) === 1) {\n      /* 当前呼叫为监听 */\n      session.status.callDirection = _public_constant__WEBPACK_IMPORTED_MODULE_4__.CALL_DIRECTION.MONITOR;\n    } else {\n      /* 当前呼叫为普通呼入 */\n      session.status.callDirection = _public_constant__WEBPACK_IMPORTED_MODULE_4__.CALL_DIRECTION.CALLIN;\n    }\n    return session;\n  }\n\n  /** 初始化媒体配置参数 */\n  _initMediaOptions(session) {\n    switch (session.attribute.call_mode) {\n      case _public_constant__WEBPACK_IMPORTED_MODULE_4__.CALL_MODE.AUDIO:\n        {\n          var _session$mediaRTC2;\n          if (session !== null && session !== void 0 && (_session$mediaRTC2 = session.mediaRTC) !== null && _session$mediaRTC2 !== void 0 && _session$mediaRTC2.mediaOptions) {\n            session.mediaRTC.mediaOptions.audio = true;\n            session.mediaRTC.mediaOptions.video = false;\n          } else {\n            session.mediaRTC.mediaOptions = {\n              audio: true,\n              video: false\n            };\n          }\n          break;\n        }\n      case _public_constant__WEBPACK_IMPORTED_MODULE_4__.CALL_MODE.VIDEO:\n        {\n          var _session$mediaRTC3;\n          if (session !== null && session !== void 0 && (_session$mediaRTC3 = session.mediaRTC) !== null && _session$mediaRTC3 !== void 0 && _session$mediaRTC3.mediaOptions) {\n            session.mediaRTC.mediaOptions.audio = false;\n            session.mediaRTC.mediaOptions.video = true;\n          } else {\n            session.mediaRTC.mediaOptions = {\n              audio: false,\n              video: true\n            };\n          }\n          break;\n        }\n      case _public_constant__WEBPACK_IMPORTED_MODULE_4__.CALL_MODE.AUDIO_VIDEO:\n        {\n          var _session$mediaRTC4;\n          if (session !== null && session !== void 0 && (_session$mediaRTC4 = session.mediaRTC) !== null && _session$mediaRTC4 !== void 0 && _session$mediaRTC4.mediaOptions) {\n            session.mediaRTC.mediaOptions.audio = true;\n            session.mediaRTC.mediaOptions.video = true;\n          } else {\n            session.mediaRTC.mediaOptions = {\n              audio: true,\n              video: true\n            };\n          }\n          break;\n        }\n    }\n  }\n\n  /** 设置媒体配置参数 */\n  _setMediaOption(session) {\n    return new Promise(resolve => {\n      this._initMediaOptions(session);\n      _log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].info('call - 通用逻辑 - 初始化媒体信息结果：', session.call_id, JSON.stringify(session.mediaRTC.mediaOptions, ['audio', 'video']));\n      resolve(session);\n    });\n  }\n\n  /** 设置Session状态：呼叫状态与呼叫方向*/\n  _setSessionStatus(session) {\n    return new Promise(function (resolve) {\n      session.status.callState = _public_constant__WEBPACK_IMPORTED_MODULE_4__.CALL_STATUS.SETUP_CALLING;\n      session.status.callDirection = _public_constant__WEBPACK_IMPORTED_MODULE_4__.CALL_DIRECTION.CALLOUT;\n      _log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].info('call - 通用逻辑 - 初始化状态信息结果：', session.call_id, JSON.stringify(session.status, ['callState', 'callDirection']));\n      resolve(session);\n    });\n  }\n\n  /** 获取视频约束条件 */\n  _getVideoConstraints(mediaOptions) {\n    var _webrtc$getVideoInput;\n    const constraints = {\n      video: true,\n      audio: false\n    };\n    if (!mediaOptions) {\n      return constraints;\n    }\n    switch (mediaOptions.video_frame_size) {\n      case -1:\n        constraints.video = true;\n        break;\n      case 1:\n        constraints.video = {\n          width: {\n            exact: 320\n          },\n          height: {\n            exact: 240\n          },\n          frameRate: {\n            min: 24\n          }\n        };\n        break;\n      case 3:\n        constraints.video = {\n          width: {\n            exact: 640\n          },\n          height: {\n            exact: 480\n          },\n          frameRate: {\n            min: 24\n          }\n        };\n        break;\n      case 6:\n        constraints.video = {\n          width: {\n            max: 1280,\n            min: 960\n          },\n          height: {\n            max: 720,\n            min: 640\n          },\n          frameRate: {\n            min: 10\n          }\n        };\n        break;\n      case 7:\n        constraints.video = {\n          width: {\n            max: 1920,\n            min: 1280\n          },\n          height: {\n            max: 1080,\n            min: 720\n          },\n          frameRate: {\n            min: 10\n          }\n        };\n        break;\n      default:\n        constraints.video = true;\n        break;\n    }\n    if ((_webrtc$getVideoInput = _protocol_webrtc__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getVideoInputDevice()) !== null && _webrtc$getVideoInput !== void 0 && _webrtc$getVideoInput.deviceId) {\n      if (typeof constraints.video === 'boolean') {\n        constraints.video = {\n          videoDeviceId: {\n            exact: _protocol_webrtc__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getVideoInputDevice().deviceId\n          },\n          deviceId: {\n            exact: _protocol_webrtc__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getVideoInputDevice().deviceId\n          }\n        };\n      } else {\n        constraints.video.deviceId = {\n          exact: _protocol_webrtc__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getVideoInputDevice().deviceId\n        };\n      }\n    }\n    return constraints;\n  }\n\n  /** 初始化音频媒体流 */\n  _setAudioStream(session) {\n    return new Promise(resolve => {\n      var _webrtc$getAudioInput;\n      if (!session.mediaRTC.mediaOptions.audio) {\n        /* 屏蔽音频流 */\n        resolve(session);\n        return;\n      }\n      if (session.attribute.call_type === _public_constant__WEBPACK_IMPORTED_MODULE_4__.CALL_TYPE.PUSH_VIDEO_CALL) {\n        _log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].info('sdk-call-setAudioStream  —> 该路呼叫为视频推送', session.call_id);\n        session.mediaRTC.localstream1 = null;\n        resolve(session);\n        return;\n      }\n      const constraints = {\n        audio: true,\n        video: false\n      };\n      if ((_webrtc$getAudioInput = _protocol_webrtc__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getAudioInputDevice()) !== null && _webrtc$getAudioInput !== void 0 && _webrtc$getAudioInput.deviceId) {\n        constraints.audio = {\n          deviceId: {\n            exact: _protocol_webrtc__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getAudioInputDevice().deviceId\n          }\n        };\n      }\n      _protocol_webrtc__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMedia(constraints).then(stream => {\n        if (stream) {\n          /* 放置本地音频媒体流 */\n          session.mediaRTC.localStream1 = stream;\n          _log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].info('call - 音频 - 本地音频流获取成功！~', session.call_id);\n        } else {\n          _log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error('call - 音频 - 本地音频流为空', session.call_id);\n        }\n        resolve(session);\n      }).catch(err => {\n        /* 此处没有走reject流程，是为了保证本地音频流获取异常的情况下，依然可以发起呼叫 */\n        _log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error('call - 音频 - 本地音频流获取失败：', session.call_id, err);\n        resolve(session);\n      });\n    });\n  }\n\n  /** 初始化视频媒体流 */\n  _setVideoStream(session, videoStreamedFunc) {\n    return new Promise(resolve => {\n      var _session$attribute;\n      if (!session.mediaRTC.mediaOptions.video) {\n        /* 屏蔽视频流 */\n        resolve(session);\n        return;\n      }\n      const call_id = session.call_id;\n      if (session.attribute.call_type === _public_constant__WEBPACK_IMPORTED_MODULE_4__.CALL_TYPE.PULL_VIDEO_CALL || (session === null || session === void 0 ? void 0 : (_session$attribute = session.attribute) === null || _session$attribute === void 0 ? void 0 : _session$attribute.call_type) === _public_constant__WEBPACK_IMPORTED_MODULE_4__.CALL_TYPE.THIRD_PLATFORM_VIDEO_PLAYBACK) {\n        _log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].info('call - 视频 - 视频上拉和天网视频上拉，不需要采集自己的流', call_id);\n        resolve(session);\n        return;\n      }\n      if (session.attribute.call_type === _public_constant__WEBPACK_IMPORTED_MODULE_4__.CALL_TYPE.PUSH_VIDEO_CALL) {\n        _log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].info('sdk-call-setVideoStream  —> 视频推送', session.call_id);\n        session.mediaRTC.localstream2 = null;\n        // 视频转发时，为什么向前台推送了空视频？\n        // callback.onMediaStream(session.call_id, session.mediaRTC.localstream2, call_enums.mediaCallbackType.WebRTCVideoSrc)\n        // if (typeof videoStreamedFunc === 'function') {\n        //   videoStreamedFunc(session, MEDIA_CALLBACK_TYPE.WEBRTC_VIDEO_SRC);\n        // }\n        resolve(session);\n        return;\n      }\n      const constraints = this._getVideoConstraints(session.mediaRTC.mediaOptions);\n      _log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].info('call - 视频 - 视频约束条件：', call_id, JSON.stringify(constraints));\n      _protocol_webrtc__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getMedia(constraints).then(function (stream) {\n        if (stream) {\n          _log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].info('call - 视频 - 本地视频流获取成功！~', call_id);\n          session.mediaRTC.localStream2 = stream;\n\n          /* 本地视频流播放时以流畅度为主，保证web的出流最大限度的不会卡顿 */\n          session.mediaRTC.localStream2.getVideoTracks().forEach(videoTrack => {\n            videoTrack.contentHint = 'motion';\n          });\n          if (typeof videoStreamedFunc === 'function') {\n            videoStreamedFunc(session, _public_constant__WEBPACK_IMPORTED_MODULE_4__.MEDIA_CALLBACK_TYPE.WEBRTC_VIDEO_SRC);\n          }\n          // this.onMediaStream(session.call_id, stream, MEDIA_CALLBACK_TYPE.WEBRTC_VIDEO_SRC);\n        } else {\n          _log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error('call - 视频 - 本地视频流为空！~', call_id);\n        }\n        resolve(session);\n      }).catch(function (err) {\n        _log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error('call - 视频 - 本地视频流获取失败！~', call_id, err);\n        //把错误码记下来，即使呼叫发起成功也要把错误码返出去\n        if (err.result != undefined) {\n          session.error_code = err === null || err === void 0 ? void 0 : err.result;\n        }\n        /* 此处没有走reject流程，是为了保证本地视频流获取异常的情况下，依然可以发起呼叫 */\n        resolve(session);\n      });\n    });\n  }\n\n  /** 生成音频Offer */\n  _createAudioOffer(session, audioStreamedFunc) {\n    return new Promise((resolve, reject) => {\n      if (!session.mediaRTC.mediaOptions.audio) {\n        /* 屏蔽音频流 */\n        resolve(session);\n        return;\n      }\n      const call_id = session.call_id;\n\n      /* 初始化音频PeerConnection */\n      const pc = _protocol_webrtc__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getPeerConnection(function (e) {\n        if (e.candidate) {\n          session.mediaRTC.localCandidates1.push(e.candidate);\n        }\n      }, function (e) {\n        session.mediaRTC.remoteStream1 = e.streams[0];\n        _log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].info('call - 下呼 - 收到对方音频流！~', call_id);\n        if (typeof audioStreamedFunc === 'function') {\n          audioStreamedFunc(session, _public_constant__WEBPACK_IMPORTED_MODULE_4__.MEDIA_CALLBACK_TYPE.WEBRTC_AUDIO_DST);\n        }\n      }, function () {\n        _log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].info('call - 下呼 - audio候选者信息收集完毕！~', call_id, JSON.stringify(session.mediaRTC.localCandidates1));\n        resolve(session);\n      });\n      session.mediaRTC.peerConnection1 = pc;\n      if (session.mediaRTC.localStream1) {\n        _protocol_webrtc__WEBPACK_IMPORTED_MODULE_1__[\"default\"].addTracks(session.mediaRTC.peerConnection1, session.mediaRTC.localStream1);\n      }\n      // TODO 转发流程后续统一梳理\n      else if (session.mediaRTC.transferAudioStream) {\n        _log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].info('sdk-call-createAudioOffer  —> 音频转发，方向设为单向发送', session.call_id);\n        pc.addTransceiver('audio', {\n          direction: 'sendonly'\n        });\n        /* 转发媒体流 */\n        _protocol_webrtc__WEBPACK_IMPORTED_MODULE_1__[\"default\"].addTracks(session.mediaRTC.peerConnection1, session.mediaRTC.transferAudioStream);\n      }\n      // TODO 三方视频回放流程后续统一梳理\n      // else if (session?.attribute.call_type === CALL_TYPE.ThirdPlatformVideoPlayback) {\n      //     /* 视频上拉或三方视频回放，仅接收视频，解决103版本以上浏览器的单向视频Bug */\n      //     log.info('sdk-call-createAudioOffer  —> 三方视频回放，方向设为单向接收', session.call_id);\n      //     pc.addTransceiver('audio', {direction: 'recvonly'})\n      // }\n      else {\n        //TODO 确认环境侦视单向还是双向\n        //表示我要接收音频\n        pc.addTransceiver('audio');\n      }\n      _protocol_webrtc__WEBPACK_IMPORTED_MODULE_1__[\"default\"].createOffer(session.mediaRTC.peerConnection1).then(desc => {\n        _log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].info('call - 下呼 - 创建AudioOfferSDP成功！~', call_id, JSON.stringify(desc));\n        session.mediaRTC.localSdp1 = desc;\n      }).catch(err => {\n        _log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error('call - 下呼 - 创建AudioOfferSDP失败！~', call_id, err);\n        reject({\n          data: {\n            result: _public_constant__WEBPACK_IMPORTED_MODULE_4__.ERROR_CODE.AUDIO_SDP_FAILED\n          }\n        });\n      });\n    });\n  }\n\n  /** 生成视频Offer */\n  _createVideoOffer(session, videoStreamedFunc) {\n    return new Promise((resolve, reject) => {\n      var _session$attribute2, _session$attribute3;\n      if (!session.mediaRTC.mediaOptions.video) {\n        /* 屏蔽视频流 */\n        resolve(session);\n        return;\n      }\n      const call_id = session.call_id;\n\n      // 初始化PeerConnection\n      const pc = _protocol_webrtc__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getPeerConnection(function (e) {\n        if (e.candidate) {\n          session.mediaRTC.localCandidates2.push(e.candidate);\n        }\n      }, function (e) {\n        session.mediaRTC.remoteStream2 = e.streams[0];\n        _log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].info('call - 下呼 - 收到对端视频流！~', call_id);\n        if (typeof videoStreamedFunc === 'function') {\n          /* 收到对端视频流后，设置播放模式为motion，保证流畅优先 */\n          session.mediaRTC.remoteStream2.getVideoTracks().forEach(videoTrack => {\n            videoTrack.contentHint = 'motion';\n          });\n          videoStreamedFunc(session, _public_constant__WEBPACK_IMPORTED_MODULE_4__.MEDIA_CALLBACK_TYPE.WEBRTC_VIDEO_DST);\n        }\n      }, function () {\n        _log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].info('call - 下呼 - video候选者信息收集完毕！~', call_id, JSON.stringify(session.mediaRTC.localCandidates2));\n        resolve(session);\n      });\n      session.mediaRTC.peerConnection2 = pc;\n      if (session.mediaRTC.localStream2) {\n        _protocol_webrtc__WEBPACK_IMPORTED_MODULE_1__[\"default\"].addTracks(session.mediaRTC.peerConnection2, session.mediaRTC.localStream2);\n      } else if (session.mediaRTC.transferVideoStream) {\n        session.mediaRTC.transferVideoStream.getVideoTracks().forEach(transVideoTrack => {\n          transVideoTrack.contentHint = 'motion';\n        });\n        _log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].info('sdk-call-createVideoOffer  —> 视频转发，方向设为单向发送', session.call_id);\n        pc.addTransceiver('video', {\n          direction: 'sendonly'\n        });\n        /* 转发媒体流 */\n        _protocol_webrtc__WEBPACK_IMPORTED_MODULE_1__[\"default\"].addTracks(session.mediaRTC.peerConnection2, session.mediaRTC.transferVideoStream);\n      } else if ((session === null || session === void 0 ? void 0 : (_session$attribute2 = session.attribute) === null || _session$attribute2 === void 0 ? void 0 : _session$attribute2.call_type) === _public_constant__WEBPACK_IMPORTED_MODULE_4__.CALL_TYPE.PULL_VIDEO_CALL || (session === null || session === void 0 ? void 0 : (_session$attribute3 = session.attribute) === null || _session$attribute3 === void 0 ? void 0 : _session$attribute3.call_type) === _public_constant__WEBPACK_IMPORTED_MODULE_4__.CALL_TYPE.THIRD_PLATFORM_VIDEO_PLAYBACK) {\n        /* 视频上拉或三方视频回放，仅接收视频，解决103版本以上浏览器的单向视频Bug */\n        _log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].info('call - 下呼 - 视频上拉或三方视频回放，方向为单向接收', session.call_id);\n        pc.addTransceiver('video', {\n          direction: 'recvonly'\n        });\n      } else {\n        pc.addTransceiver('video');\n      }\n      _protocol_webrtc__WEBPACK_IMPORTED_MODULE_1__[\"default\"].createOffer(session.mediaRTC.peerConnection2).then(desc => {\n        _log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].info('call - 下呼 - 创建VideoOfferSDP成功', call_id, JSON.stringify(desc));\n        session.mediaRTC.localSdp2 = desc;\n      }).catch(err => {\n        _log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error('call - 下呼 - 创建VideoOfferSDP失败', call_id, err);\n        reject({\n          data: {\n            result: _public_constant__WEBPACK_IMPORTED_MODULE_4__.ERROR_CODE.VIDEO_SDP_FAILED\n          }\n        });\n      });\n    });\n  }\n\n  /** 生成音频Answer */\n  _createAudioAnswer(session, audioStreamedFunc) {\n    return new Promise((resolve, reject) => {\n      if (!session.mediaRTC.mediaOptions.audio) {\n        /* 屏蔽音频流 */\n        resolve(session);\n        return;\n      }\n      const call_id = session.call_id;\n\n      /* 初始化音频PeerConnection */\n      const pc = _protocol_webrtc__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getPeerConnection(function (e) {\n        if (e.candidate) {\n          session.mediaRTC.localCandidates1.push(e.candidate);\n        }\n      }, function (e) {\n        session.mediaRTC.remoteStream1 = e.streams[0];\n        _log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].info('call - 上呼 - 收到对方音频流！~', call_id);\n        if (typeof audioStreamedFunc === 'function') {\n          audioStreamedFunc(session, _public_constant__WEBPACK_IMPORTED_MODULE_4__.MEDIA_CALLBACK_TYPE.WEBRTC_AUDIO_DST);\n        }\n      }, function () {\n        _log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].info('call - 上呼 - audio候选者信息收集完毕！~', call_id, JSON.stringify(session.mediaRTC.localCandidates1));\n        resolve(session);\n      });\n      session.mediaRTC.peerConnection1 = pc;\n      if (session.mediaRTC.localStream1) {\n        // 禁麦\n        //TODO 禁麦逻辑需要梳理，缺少promis调用链\n        // webrtc.muteAudio(\n        //     session.mediaRTC.localstream1,\n        //     session.mediaRTC.mediaoptions.micmute)\n        _protocol_webrtc__WEBPACK_IMPORTED_MODULE_1__[\"default\"].addTracks(session.mediaRTC.peerConnection1, session.mediaRTC.localStream1);\n      }\n      _protocol_webrtc__WEBPACK_IMPORTED_MODULE_1__[\"default\"].createAnswer(session.mediaRTC.peerConnection1, session.mediaRTC.remoteSdp1).then(function (desc) {\n        _log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].info('call - 上呼 - 创建AudioAnswerSDP成功！~', call_id, JSON.stringify(desc));\n        session.mediaRTC.localSdp1 = desc;\n        for (const candidate of session.mediaRTC.remoteCandidates1) {\n          _protocol_webrtc__WEBPACK_IMPORTED_MODULE_1__[\"default\"].addIceCandidate(session.mediaRTC.peerConnection1, candidate).catch(err => {\n            _log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error('call - 上呼 - peerConnection中添加远端audio candidate报错', call_id, err);\n            this.receiveDisconnect({\n              call_id: call_id,\n              disconnect_reason: _public_constant__WEBPACK_IMPORTED_MODULE_4__.ERROR_CODE.ADD_AUDIO_CANDIDATE_FAILED\n            });\n          });\n        }\n      }).catch(err => {\n        _log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error('call - 上呼 - 创建AudioAnswerSDP失败', call_id, err);\n        reject({\n          data: {\n            result: _public_constant__WEBPACK_IMPORTED_MODULE_4__.ERROR_CODE.AUDIO_SDP_FAILED\n          }\n        });\n      });\n    });\n  }\n\n  /** 生成视频Answer */\n  _createVideoAnswer(session, videoStreamedFunc) {\n    return new Promise((resolve, reject) => {\n      if (!session.mediaRTC.mediaOptions.video) {\n        /* 屏蔽视频流 */\n        resolve(session);\n        return;\n      }\n      const call_id = session.call_id;\n\n      /* 初始化PeerConnection */\n      const pc = _protocol_webrtc__WEBPACK_IMPORTED_MODULE_1__[\"default\"].getPeerConnection(function (e) {\n        // 接收candidate\n        if (e.candidate) {\n          session.mediaRTC.localCandidates2.push(e.candidate);\n        }\n      }, function (e) {\n        session.mediaRTC.remoteStream2 = e.streams[0];\n        _log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].info('call - 上呼 - 收到对端视频流！~', call_id);\n        if (typeof videoStreamedFunc === 'function') {\n          /* 收到对端视频流后，设置播放模式为motion，保证流畅优先 */\n          session.mediaRTC.remoteStream2.getVideoTracks().forEach(videoTrack => {\n            videoTrack.contentHint = 'motion';\n          });\n          videoStreamedFunc(session, _public_constant__WEBPACK_IMPORTED_MODULE_4__.MEDIA_CALLBACK_TYPE.WEBRTC_VIDEO_DST);\n        }\n      }, function () {\n        _log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].info('call - 上呼 - video候选者信息收集完毕！~', call_id, JSON.stringify(session.mediaRTC.localCandidates2));\n        resolve(session);\n      });\n      session.mediaRTC.peerConnection2 = pc;\n      if (session.mediaRTC.localStream2) {\n        _protocol_webrtc__WEBPACK_IMPORTED_MODULE_1__[\"default\"].addTracks(session.mediaRTC.peerConnection2, session.mediaRTC.localStream2);\n      }\n      _protocol_webrtc__WEBPACK_IMPORTED_MODULE_1__[\"default\"].createAnswer(session.mediaRTC.peerConnection2, session.mediaRTC.remoteSdp2).then(function (desc) {\n        _log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].info('call - 上呼 - 创建VideoAnswerSDP成功', call_id, JSON.stringify(desc));\n        session.mediaRTC.localSdp2 = desc;\n        for (const candidate of session.mediaRTC.remoteCandidates2) {\n          _protocol_webrtc__WEBPACK_IMPORTED_MODULE_1__[\"default\"].addIceCandidate(session.mediaRTC.peerConnection2, candidate).catch(err => {\n            _log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error('call - 上呼 - peerConnection中添加远端video candidate报错', call_id, err);\n            this.receiveDisconnect({\n              call_id: call_id,\n              disconnect_reason: _public_constant__WEBPACK_IMPORTED_MODULE_4__.ERROR_CODE.ADD_VIDEO_CANDIDATE_FAILED\n            });\n          });\n        }\n      }).catch(err => {\n        _log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error('call - 上呼 - 创建VideoAnswerSDP失败', call_id, err);\n        reject({\n          data: {\n            result: _public_constant__WEBPACK_IMPORTED_MODULE_4__.ERROR_CODE.VIDEO_SDP_FAILED\n          }\n        });\n      });\n    });\n  }\n\n  /** 创建全新会话session */\n  build(session, onStream) {\n    return new Promise((resolve, reject) => {\n      this._setMediaOption(session).then(session => {\n        return this._setSessionStatus(session);\n      }).then(session => {\n        return this._setAudioStream(session);\n      }).then(session => {\n        return this._createAudioOffer(session, onStream);\n      }).then(session => {\n        return this._setVideoStream(session, onStream);\n      }).then(session => {\n        return this._createVideoOffer(session, onStream);\n      }).then(session => {\n        resolve(session);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  /** 根据上呼接听信息封装会话session */\n  connectBuild(session, onStream) {\n    return new Promise((resolve, reject) => {\n      this._initConnect(session).then(session => {\n        return this._createAudioAnswer(session, onStream);\n      }).then(session => {\n        return this._createVideoAnswer(session, onStream);\n      }).then(session => {\n        resolve(session);\n      }).catch(error => reject(error));\n    });\n  }\n\n  /** 设置WebRTC相关“音频媒体参数” */\n  _setAudioWebRTCParams(session, connectInfo) {\n    if (!session.mediaRTC) session.mediaRTC = {};\n    if (!connectInfo.media.audio) {\n      /* 屏蔽音频相关信息 */\n      return;\n    }\n    if (!connectInfo.media.audio.web_audio_candidate) {\n      _log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].warn('call - 下呼 - 接收到的远端音频候选者信息为空', connectInfo.call_id);\n      session.mediaRTC.remoteCandidates1 = null;\n      session.mediaRTC.remoteSdp1 = {\n        type: 'answer',\n        sdp: null\n      };\n      return;\n    }\n    _log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].info('call - 下呼 - 远端音频candidate:', connectInfo.call_id, connectInfo.media.audio.web_audio_candidate);\n    session.mediaRTC.remoteCandidates1 = JSON.parse(connectInfo.media.audio.web_audio_candidate);\n    _log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].info('call - 下呼 - 远端音频sdp：', connectInfo.call_id, '\\n', connectInfo.media.audio.web_audio_sdp);\n    const remoteSdp1 = {};\n    remoteSdp1.type = 'answer';\n    remoteSdp1.sdp = connectInfo.media.audio.web_audio_sdp;\n    session.mediaRTC.remoteSdp1 = remoteSdp1;\n  }\n\n  /** 设置WebRTC相关“视频媒体参数” */\n  _setVideoWebRTCParams(session, connectInfo) {\n    if (!connectInfo.media.video) {\n      /* 屏蔽视频相关信息 */\n      return;\n    }\n    if (!connectInfo.media.video.web_video_candidate) {\n      _log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].info('call - 下呼 - 接收到的远端视频候选者信息为空:', connectInfo.call_id);\n      session.mediaRTC.remoteCandidates2 = null;\n      session.mediaRTC.remoteSdp2 = {\n        type: 'answer',\n        sdp: null\n      };\n      return;\n    }\n    _log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].info('call - 下呼 - 远端视频candidate:', connectInfo.call_id, connectInfo.media.video.web_video_candidate);\n    session.mediaRTC.remoteCandidates2 = JSON.parse(connectInfo.media.video.web_video_candidate);\n    _log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].info('call - 下呼 - 远端视频sdp:', connectInfo.call_id, connectInfo.media.video.web_video_sdp);\n    const remoteSdp2 = {};\n    remoteSdp2.type = 'answer';\n    remoteSdp2.sdp = connectInfo.media.video.web_video_sdp;\n    session.mediaRTC.remoteSdp2 = remoteSdp2;\n  }\n\n  /** 收到 connect 呼叫建立后，设置WebRTC相关“媒体参数” */\n  setWebRTCConnectedParams(session, connectInfo) {\n    this._setAudioWebRTCParams(session, connectInfo);\n    this._setVideoWebRTCParams(session, connectInfo);\n  }\n}\n\n//# sourceURL=webpack://lemon/./lemon/common/sessionFactory.js?"
          );

          /***/
        },

      /***/ "./lemon/common/unifiedErrorHand.js":
        /*!******************************************!*\
  !*** ./lemon/common/unifiedErrorHand.js ***!
  \******************************************/
        /***/ (
          __unused_webpack_module,
          __webpack_exports__,
          __webpack_require__
        ) => {
          "use strict";
          eval(
            '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _callback__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./callback */ "./lemon/common/callback.js");\n/* harmony import */ var _public_constant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../public/constant */ "./lemon/public/constant.js");\n\n\n\n/**\n * 统一错误处理\n */\nclass ErrorHandle {\n  constructor() {\n    this.cmd_name_custom_error = \'sdk_error_handle\';\n  }\n\n  // 普通的信令处理\n  formatConversion(response, source) {\n    const _response = JSON.parse(JSON.stringify(response));\n    if (_response && _response.result && _response.result !== 0) {\n      if (_response && _response.cmd_name) {\n        _response.original_cmd_name = _response.cmd_name;\n      }\n      _response.cmd_name = this.cmd_name_custom_error;\n      _response.original_source_sdk = source;\n      _response.original_reason_sdk = \'\';\n      _callback__WEBPACK_IMPORTED_MODULE_0__["default"].onEvent(_response);\n    }\n  }\n\n  // 错误的信令处理\n  errorConversion(err, source) {\n    let response = {};\n    response.original_cmd_name = \'\';\n    response.cmd_name = this.cmd_name_custom_error;\n    response.result = \'200000\'; //未知错误\n    response.original_source_sdk = source;\n    response.original_reason_sdk = err;\n    _callback__WEBPACK_IMPORTED_MODULE_0__["default"].onEvent(response);\n  }\n\n  /** 根据入参，Web内部组装错误码 */\n  getBaseRes(result, msg, cmd_name) {\n    return {\n      cmd_name: cmd_name === undefined ? _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CMD.ERROR : cmd_name,\n      result: result,\n      message: msg\n    };\n  }\n}\nconst errInstance = new ErrorHandle();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (errInstance);\n\n//# sourceURL=webpack://lemon/./lemon/common/unifiedErrorHand.js?'
          );

          /***/
        },

      /***/ "./lemon/common/utils.js":
        /*!*******************************!*\
  !*** ./lemon/common/utils.js ***!
  \*******************************/
        /***/ (
          __unused_webpack_module,
          __webpack_exports__,
          __webpack_require__
        ) => {
          "use strict";
          eval(
            "__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _decryptByDES: () => (/* binding */ _decryptByDES),\n/* harmony export */   _encryptByDES: () => (/* binding */ _encryptByDES),\n/* harmony export */   genLocalGuid: () => (/* binding */ genLocalGuid),\n/* harmony export */   getNumberFromBasedata: () => (/* binding */ getNumberFromBasedata),\n/* harmony export */   getNumberTypeFromBasedata: () => (/* binding */ getNumberTypeFromBasedata),\n/* harmony export */   getPucIdFromBasedata: () => (/* binding */ getPucIdFromBasedata),\n/* harmony export */   getRealmFromBasedata: () => (/* binding */ getRealmFromBasedata),\n/* harmony export */   getSystemIdFromBasedata: () => (/* binding */ getSystemIdFromBasedata),\n/* harmony export */   getTimeSlotFromBasedata: () => (/* binding */ getTimeSlotFromBasedata),\n/* harmony export */   guid: () => (/* binding */ guid),\n/* harmony export */   isEqual: () => (/* binding */ isEqual),\n/* harmony export */   isNotEmpty: () => (/* binding */ isNotEmpty),\n/* harmony export */   unPackGuid: () => (/* binding */ unPackGuid)\n/* harmony export */ });\n/* harmony import */ var crypto_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto-js */ \"./node_modules/crypto-js/index.js\");\n/* harmony import */ var crypto_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _public_baseRequest__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../public/baseRequest */ \"./lemon/public/baseRequest.js\");\n/* harmony import */ var _public_constant__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../public/constant */ \"./lemon/public/constant.js\");\n/* harmony import */ var _log__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./log */ \"./lemon/common/log.js\");\n\n\n\n\n/**\n * 解包本地guid后的对象类型\n * @typedef {object} Pack\n * @property  {string} puc_id\n * @property  {string} system_id\n * @property  {string} what_id 如果是设备就是device_id，如果是组就是group_id，以此类推\n * @property  {NUMBER_TYPE} number_type 号码类型\n * @property  {number} [time_slot]\n * @property  {string} [realm]\n */\n\n/**\n * 本地打包对象组件新的guid后可分割出来的数组长度，\n * @const\n * @type {number}\n */\nconst PACK_LENGTH = 6;\n\n/**\n   * 生成新的guid，本地使用，与服务器上存的不一致，主要考虑到各种字段提供出去，外部未必能理解各字段\n   * @param {object} what 任何对象，设备、组、群组等..\n   * @param {string} id_name 能取得该对象的id的字段名，如设备是device_id,组是group_id\n   * @param {boolean} [keep_sys_id=false] 是否保留原始的system_id,有些系统调度员是网关同步过来的，会携带原系统的id，但是这个id有时候需要，有时候不需要（使用000）,默认false，转成000\n   */\nfunction genLocalGuid(what, id_name, keep_sys_id = false) {\n  if (what) {\n    // 调度员没有系统归属，默认给000\n    if ((what.number_type === _public_constant__WEBPACK_IMPORTED_MODULE_2__.NUMBER_TYPE.CROSS_PATCH || what.number_type === _public_constant__WEBPACK_IMPORTED_MODULE_2__.NUMBER_TYPE.DISPATCHER || what.number_type === _public_constant__WEBPACK_IMPORTED_MODULE_2__.NUMBER_TYPE.DC || what.number_type === _public_constant__WEBPACK_IMPORTED_MODULE_2__.NUMBER_TYPE.CONFERENCE) && !keep_sys_id) {\n      what.system_id = _public_constant__WEBPACK_IMPORTED_MODULE_2__.DEFAULT_SYS_ID;\n    }\n    const id = `${what.puc_id || ''}-${what.system_id || ''}-${what[id_name] || ''}-${what.number_type === undefined ? '' : what.number_type}-${what.time_slot === undefined ? '' : what.time_slot}-${what.realm || _public_baseRequest__WEBPACK_IMPORTED_MODULE_1__[\"default\"].user.realm}`;\n    const result = _encryptByDES(id);\n    return result;\n  }\n}\n/**\n * 从本地guid中解析出puc_id，与 {@link genLocalGuid} 相对应\n * @param {string} guid\n */\nfunction getPucIdFromBasedata(guid) {\n  if (guid) {\n    var _unPackGuid;\n    return (_unPackGuid = unPackGuid(guid)) === null || _unPackGuid === void 0 ? void 0 : _unPackGuid.puc_id;\n  }\n}\n/**\n * 从本地guid中解析出system_id，与 {@link genLocalGuid}相对应\n * @param {String} guid\n */\nfunction getSystemIdFromBasedata(guid) {\n  if (guid) {\n    var _unPackGuid2;\n    return (_unPackGuid2 = unPackGuid(guid)) === null || _unPackGuid2 === void 0 ? void 0 : _unPackGuid2.system_id;\n  }\n}\n/**\n * 从本地guid中解析出number_type，与 {@link genLocalGuid}相对应\n * @param {String} guid\n * @return {number} \n */\nfunction getNumberTypeFromBasedata(guid) {\n  if (guid) {\n    var _unPackGuid3;\n    return (_unPackGuid3 = unPackGuid(guid)) === null || _unPackGuid3 === void 0 ? void 0 : _unPackGuid3.number_type;\n  }\n}\n\n/**\n * 从本地guid中解析出number，与 {@link genLocalGuid} 相对应\n * @param {string} guid\n */\nfunction getNumberFromBasedata(guid) {\n  if (guid) {\n    var _unPackGuid4;\n    return (_unPackGuid4 = unPackGuid(guid)) === null || _unPackGuid4 === void 0 ? void 0 : _unPackGuid4.what_id;\n  }\n}\n/**\n * 从本地guid中解析出time_slot，与 {@link genLocalGuid} 相对应\n * @param {string} guid\n */\nfunction getTimeSlotFromBasedata(guid) {\n  if (guid) {\n    var _unPackGuid5;\n    return ((_unPackGuid5 = unPackGuid(guid)) === null || _unPackGuid5 === void 0 ? void 0 : _unPackGuid5.time_slot) || \"\";\n  }\n}\n/**\n * 与 {@link genLocalGuid}相对应,返回对象\n * @param {string} guid\n * @param {boolean} [encryption] 是否是密文，默认是\n\n * @return {Pack=}\n */\nfunction unPackGuid(guid, encryption = true) {\n  /**\n   * @type {Pack}\n   */\n  let result;\n  let type = typeof guid;\n  if (type !== \"string\") {\n    _log__WEBPACK_IMPORTED_MODULE_3__[\"default\"].error('type error,string required,found ', type);\n    return result;\n  }\n  if (guid) {\n    var _de_guid;\n    let de_guid;\n    if (encryption) {\n      de_guid = _decryptByDES(guid);\n    } else {\n      de_guid = guid;\n    }\n    const array = (_de_guid = de_guid) === null || _de_guid === void 0 ? void 0 : _de_guid.split('-');\n    const length = array === null || array === void 0 ? void 0 : array.length;\n    // const type = array[3] ? Number(array[3]) : undefined\n\n    if (length >= PACK_LENGTH) {\n      result = {\n        puc_id: array[0],\n        system_id: array[1],\n        what_id: array[2],\n        number_type: array[3] ? Number(array[3]) : undefined,\n        time_slot: array[4] ? Number(array[4]) : undefined,\n        realm: array[5] ? array[5] : undefined\n      };\n    }\n  }\n  return result;\n}\n/**\n * 判断两个值是否一样，主要是为了处理同字段，有的赋值undefined，有的赋值空字符串，\n * 我们认为undefined和空字符串以及NaN是一样的\n * @param {*} a \n * @param {*} b \n * @returns \n */\nfunction isEqual(a, b) {\n  return a === b || !a && !b;\n}\n\n/**\n * 获取域名\n * @param guid\n * @returns {*}\n */\nfunction getRealmFromBasedata(guid) {\n  if (guid) {\n    var _unPackGuid6;\n    (_unPackGuid6 = unPackGuid(guid)) === null || _unPackGuid6 === void 0 ? void 0 : _unPackGuid6.realm;\n  }\n}\n\n/** 生成guid */\nfunction guid() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = Math.random() * 16 | 0;\n    const v = c === 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\n\n// number 不为空\nfunction isNotEmpty(value) {\n  return value !== undefined && value !== '' && value !== null;\n}\n//DES加密\nfunction _encryptByDES(message, key = 'bddes') {\n  var keyHex = crypto_js__WEBPACK_IMPORTED_MODULE_0___default().enc.Utf8.parse(key);\n  var ivHex = crypto_js__WEBPACK_IMPORTED_MODULE_0___default().enc.Utf8.parse(key);\n  var encrypted = crypto_js__WEBPACK_IMPORTED_MODULE_0___default().DES.encrypt(message, keyHex, {\n    iv: ivHex,\n    mode: (crypto_js__WEBPACK_IMPORTED_MODULE_0___default().mode).CBC,\n    padding: (crypto_js__WEBPACK_IMPORTED_MODULE_0___default().pad).Pkcs7\n  });\n  const result = encrypted.ciphertext.toString();\n  return result;\n}\n//DES解密\nfunction _decryptByDES(ciphertext, key = 'bddes') {\n  var keyHex = crypto_js__WEBPACK_IMPORTED_MODULE_0___default().enc.Utf8.parse(key);\n  var ivHex = crypto_js__WEBPACK_IMPORTED_MODULE_0___default().enc.Utf8.parse(key);\n  var decrypted = crypto_js__WEBPACK_IMPORTED_MODULE_0___default().DES.decrypt({\n    ciphertext: crypto_js__WEBPACK_IMPORTED_MODULE_0___default().enc.Hex.parse(ciphertext)\n  }, keyHex, {\n    iv: ivHex,\n    mode: (crypto_js__WEBPACK_IMPORTED_MODULE_0___default().mode).CBC,\n    padding: (crypto_js__WEBPACK_IMPORTED_MODULE_0___default().pad).Pkcs7\n  });\n  var result_value = decrypted.toString((crypto_js__WEBPACK_IMPORTED_MODULE_0___default().enc).Utf8);\n  return result_value;\n}\n\n//# sourceURL=webpack://lemon/./lemon/common/utils.js?"
          );

          /***/
        },

      /***/ "./lemon/littleLemon.js":
        /*!******************************!*\
  !*** ./lemon/littleLemon.js ***!
  \******************************/
        /***/ (
          __unused_webpack_module,
          __webpack_exports__,
          __webpack_require__
        ) => {
          "use strict";
          eval(
            '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _public_constant__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./public/constant */ "./lemon/public/constant.js");\n/* harmony import */ var _common_log__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./common/log */ "./lemon/common/log.js");\n/* harmony import */ var _modules_gis__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modules/gis */ "./lemon/modules/gis.js");\n/* harmony import */ var _modules_call__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modules/call */ "./lemon/modules/call.js");\n/* harmony import */ var _protocol_http__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./protocol/http */ "./lemon/protocol/http.js");\n/* harmony import */ var _modules_alarm__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./modules/alarm */ "./lemon/modules/alarm.js");\n/* harmony import */ var _modules_floor__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./modules/floor */ "./lemon/modules/floor.js");\n/* harmony import */ var _modules_signin__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./modules/signin */ "./lemon/modules/signin.js");\n/* harmony import */ var _modules_common__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./modules/common */ "./lemon/modules/common.js");\n/* harmony import */ var _protocol_webrtc__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./protocol/webrtc */ "./lemon/protocol/webrtc.js");\n/* harmony import */ var _common_version__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./common/version */ "./lemon/common/version.json");\n/* harmony import */ var _modules_monitor__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./modules/monitor */ "./lemon/modules/monitor.js");\n/* harmony import */ var _modules_channel__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./modules/channel */ "./lemon/modules/channel.js");\n/* harmony import */ var _modules_message__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./modules/message */ "./lemon/modules/message.js");\n/* harmony import */ var _modules_baseData__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./modules/baseData */ "./lemon/modules/baseData.js");\n/* harmony import */ var _modules_reportForm__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./modules/reportForm */ "./lemon/modules/reportForm.js");\n/* harmony import */ var _protocol_websocket__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./protocol/websocket */ "./lemon/protocol/websocket.js");\n/* harmony import */ var _common_privateUtil__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./common/privateUtil */ "./lemon/common/privateUtil.js");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst lemon = {\n  log: _common_log__WEBPACK_IMPORTED_MODULE_1__["default"],\n  gis: _modules_gis__WEBPACK_IMPORTED_MODULE_2__["default"],\n  http: _protocol_http__WEBPACK_IMPORTED_MODULE_4__["default"],\n  call: _modules_call__WEBPACK_IMPORTED_MODULE_3__["default"],\n  floor: _modules_floor__WEBPACK_IMPORTED_MODULE_6__["default"],\n  alarm: _modules_alarm__WEBPACK_IMPORTED_MODULE_5__["default"],\n  login: _modules_signin__WEBPACK_IMPORTED_MODULE_7__["default"],\n  common: _modules_common__WEBPACK_IMPORTED_MODULE_8__["default"],\n  webrtc: _protocol_webrtc__WEBPACK_IMPORTED_MODULE_9__["default"],\n  monitor: _modules_monitor__WEBPACK_IMPORTED_MODULE_11__["default"],\n  channel: _modules_channel__WEBPACK_IMPORTED_MODULE_12__["default"],\n  message: _modules_message__WEBPACK_IMPORTED_MODULE_13__["default"],\n  basedata: _modules_baseData__WEBPACK_IMPORTED_MODULE_14__["default"],\n  reportForm: _modules_reportForm__WEBPACK_IMPORTED_MODULE_15__["default"],\n  privateUtil: _common_privateUtil__WEBPACK_IMPORTED_MODULE_17__["default"],\n  DATA_ACTION: _public_constant__WEBPACK_IMPORTED_MODULE_0__.DATA_ACTION,\n  NUMBER_TYPE: _public_constant__WEBPACK_IMPORTED_MODULE_0__.NUMBER_TYPE,\n  ONLINE_STATE: _public_constant__WEBPACK_IMPORTED_MODULE_0__.ONLINE_STATE,\n  SDK_VERSION: \'V4.1.02.8\',\n  // 用于识别是什么时候的版本。 每次对外给出来都要修改版本，并记录。\n\n  /** 便于 vue 全局引用 Lemon */\n  install(Vue) {\n    Vue.prototype.Lemon = lemon;\n  },\n  /** 登录成功的后的初始化事件 */\n  initEvents() {\n    _protocol_websocket__WEBPACK_IMPORTED_MODULE_16__["default"].addCallback(jsonData => {\n      lemon.log.debug("web端websocket收到异步数据:\\n " + JSON.stringify(jsonData));\n      if (!jsonData || !jsonData.cmd_name) {\n        lemon.log.warn("cmd_name缺失, 无效呼叫信令！");\n        return;\n      }\n      switch (jsonData.cmd_name) {\n        case "cc_setup_call":\n          // 来电事件\n          lemon.call.sendAlerting(jsonData);\n          lemon.call.receiveSetupCall(jsonData);\n          break;\n        case "cc_alerting_evt":\n          lemon.call.onCallProcessChangeEvt({\n            call_process: \'alerting_evt\',\n            call_id: jsonData.call_id\n          });\n          break;\n        case "cc_connected_evt":\n          // 对端接听事件,即呼叫连接事件\n          lemon.call.sendConnectAck(jsonData);\n          lemon.call.receiveConnect(jsonData);\n          break;\n        case "cc_connected":\n          // 呼叫连接事件确认\n          lemon.call.receiveConnectAck(jsonData);\n          break;\n        case "cc_disconnected":\n          // 自己挂断  挂断确认信令\n          lemon.call.receiveDisconnectAck(jsonData);\n          break;\n        case "cc_disconnected_evt":\n          // TODO 此处顺序有待确认和调整  对端挂断\n          lemon.call.sendDisconnectAck(jsonData);\n          lemon.call.receiveDisconnect(jsonData);\n          break;\n        case "cc_video_forward_ack":\n          lemon.call.receiveForwardAck(jsonData);\n          break;\n        case "cc_tx_granted_evt":\n          lemon.floor.receiveGranted(jsonData);\n          break;\n        case "cc_tx_deny":\n          lemon.floor.receiveTxDeny(jsonData);\n          // 错误码，放到回调里面通知出去\n          // lemon.common.onErrorCodeNotify({\n          //   errorCode: jsonData.RejectCause.CauseEnum,\n          // });\n          break;\n        case "cc_force_disconnect_notify":\n          lemon.call.receiveForceHangupEvt(jsonData);\n          // lemon.common.onErrorCodeNotify({\n          //   errorCode: jsonData.fd_failed_reason,\n          // });\n          break;\n        // case "cc_member_speak_set_ack":\n        //   lemon.call.conferenceMemberSpeakSetAck(jsonData);\n        //   break;\n        case "mon_text_receive_evt":\n        case "sds_text_receive_evt":\n        case "sds_status_receive_evt":\n          lemon.message.onMessageReportEvt(jsonData);\n          break;\n        case "mon_monitor_evt":\n          lemon.monitor.onChangeEvent(jsonData);\n          break;\n        case "cc_member_connect_evt":\n          lemon.monitor.onChangeGroupMemberEvent(_public_constant__WEBPACK_IMPORTED_MODULE_0__.MONITOR_GROUP_MEMBER_TYPE.BRIGHT, jsonData);\n          break;\n        case "cc_member_disconnect_evt":\n          lemon.monitor.onChangeGroupMemberEvent(_public_constant__WEBPACK_IMPORTED_MODULE_0__.MONITOR_GROUP_MEMBER_TYPE.DARK, jsonData);\n          break;\n        case "cm_refresh_channel_info":\n          lemon.channel.onRefreshChannelEvent(jsonData);\n          break;\n        case "cm_update_channel_info":\n          _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].debug("*** cm_update_channel_info ", jsonData);\n          lemon.channel.onUpdateChannelEvent(jsonData);\n          break;\n        case "cm_refresh_tscinfo":\n          _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].debug("*** cm_refresh_tscinfo ", jsonData);\n          lemon.channel.onRefreshStationEvent(jsonData);\n          break;\n        case "cm_update_tscinfo":\n          _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].debug("*** cm_update_tscinfo ", jsonData);\n          lemon.channel.onUpdateStationEvent(jsonData);\n          break;\n        case "cm_pttinfo_list_report":\n          _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].debug("*** cm_pttinfo_list_report ", jsonData);\n          lemon.channel.onUpdateChannelSpeakerEvent(jsonData);\n          break;\n      }\n    });\n  },\n  /**\n   * 上下级切换\n   * @param {string} id \n   */\n  selectDomain(id) {\n    //todo\n  }\n};\nlemon.initEvents();\n\n/**\n * 通过版本号可能本地检出相对应的代码\n */\nconsole.log("%clemon%c" + (_common_version__WEBPACK_IMPORTED_MODULE_10__ === null || _common_version__WEBPACK_IMPORTED_MODULE_10__ === void 0 ? void 0 : _common_version__WEBPACK_IMPORTED_MODULE_10__.version) + "%c" + (_common_version__WEBPACK_IMPORTED_MODULE_10__ === null || _common_version__WEBPACK_IMPORTED_MODULE_10__ === void 0 ? void 0 : _common_version__WEBPACK_IMPORTED_MODULE_10__.buildTime), "color:white;background:#606060;padding:5px 12px;border-radius:3px 0px 0px 3px", "background:lightGreen;padding:5px 12px;", "color:white;background:#0074af;padding:5px 12px;border-radius:0px 3px 3px 0px");\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (lemon);\n\n//# sourceURL=webpack://lemon/./lemon/littleLemon.js?'
          );

          /***/
        },

      /***/ "./lemon/modules/alarm.js":
        /*!********************************!*\
  !*** ./lemon/modules/alarm.js ***!
  \********************************/
        /***/ (
          __unused_webpack_module,
          __webpack_exports__,
          __webpack_require__
        ) => {
          "use strict";
          eval(
            '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _common_log__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/log */ "./lemon/common/log.js");\n/* harmony import */ var _common_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/utils */ "./lemon/common/utils.js");\n/* harmony import */ var _littleLemon__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../littleLemon */ "./lemon/littleLemon.js");\n/* harmony import */ var _protocol_http__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../protocol/http */ "./lemon/protocol/http.js");\n/* harmony import */ var _protocol_websocket__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocol/websocket */ "./lemon/protocol/websocket.js");\n/* harmony import */ var _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../public/baseRequest */ "./lemon/public/baseRequest.js");\n/* harmony import */ var _public_constant__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./../public/constant */ "./lemon/public/constant.js");\n/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./common */ "./lemon/modules/common.js");\n\n\n\n\n\n\n\n\n\n/**\n * deviceId结构\n * @typedef  {object} DeviceId 分页对象\n * @property  {number} puc_id \n * @property  {string} system_id 告警设备归属系统\n * @property  {string} realm 告警设备归属域\n * @property  {number} version 版本（我也不知道是什么）todo\n * @property  {number} user_id 告警设备的用户id？todo\n */\n/**\n * 分页结构\n * @typedef  {object} AlarmRequest 分页对象\n * @property  {number} page_index 页码\n * @property  {string} start_time 搜索时间段的开始时间\n * @property  {string} end_time 搜索时间段的结束时间\n * @property  {number} page_index 页码\n * @property  {number} page_size 单页容量\n * @property  {ALARM_STATUS} status 告警状态\n */\n\n/**\n * 告警统一结构，现服务端有返回多种告警结构，需要统一\n * @inner\n * @typedef  {object} AlarmInner \n * @property  {string} guid 唯一标识\n * @property  {string} puc_id \n * @property  {string} system_id \n * @property  {string} user_id \n * @property  {string} realm \n * @property  {string} version \n * @property  {string} time 告警时间 utc时间\n * @property  {string} device_alias 告警的设备别名\n * @property  {string} device_id 告警的设备id\n * @property  {string} status 告警的状态 \n * @property  {object} rule 规则，如果是告警类型是越区告警或超速告警会有这个字段\n * @property  {string} rule.rule_guid 规则id\n * @property  {string} rule.rule_name 规则名\n * @property  {object} region 区域，只有越区告警才有这个字段\n * @property  {object} region.region_guid 区域id\n * @property  {object} region.region_name 区域名称\n * \n * \n */\n\n/**\n * @typedef  {object} AlarmResp\n * @property  {number} result 响应结果\n * @property  {Array.<AlarmInner>} alarm_list 响应结果\n */\n/**\n * {@link Alarm} 裁剪字段后再提供给外部使用\n * @typedef  {object} FormarttedAlarm \n * @property  {string} guid 告警唯一标识\n * @property  {number} category 告警大类\n * @property  {number} alarm_type 告警大类下的细分类型,紧急告警（具体值参考）；越区告警：1-进入时告警，0-离开时告警；超速告警0-超过速度时告警，1-低于速度时告警\n * @property  {object} target 报警的设备对象\n * @property  {string} target.alias 告警的设备别名\n * @property  {string} target.guid 告警的设备全局唯一标识\n * @property  {string} target.number 告警的设备号码，即原始数据的device_id,改名方便理解\n * @property  {string} target.basedata_id web自己的生成的id，由{@link AlarmInner}中的puc_id、system_id、user_id、realm、version生成\n * @property  {string} status 告警的状态 \n * @property  {string} [speed] 当前速度，超速告警才有意义\n * @property  {string} alarm_time 告警触发时间，utc时间 \n * @property  {string} [unalarm_time] 告警取消时间，utc时间，激活状态下，这个时间没有意义\n * @property  {object} [rule] 规则，如果是告警类型是越区告警或超速告警会有这个字段\n * @property  {string} rule.rule_guid 规则id\n * @property  {string} rule.rule_name 规则名\n * @property  {object} [region] 区域，只有越区告警才有这个字段\n * @property  {string} region.region_guid 区域id\n * @property  {string} region.region_name 区域名称\n * @property  {object} receiver 接警相关信息\n * @property  {string} receiver.user_id 接警人员\n * @property  {string} receiver.time 接警时间\n * @property  {object} hanlder 处警相关信息\n * @property  {string} hanlder.user_id 处警人员\n * @property  {string} hanlder.time 处理时间\n */\n\n/**\n * 服务端返回的超速告警的结构 \n * @typedef {object} SpeedAlarm\n * @property {number} active\n * @property {string} alarm_datetime\n * @property {string} alarm_description\n * @property {string} alarm_guid\n * @property {number} alarm_type\n * @property {number} current_speed\n * @property {string} device_alias\n * @property {string} device_guid\n * @property {string} device_number\n * @property {number} device_numbertype\n * @property {string} puc_id\n * @property {string} rule_guid\n * @property {string} rule_name\n * @property {string} system_id\n * @property {string} unalarm_datetime\n * @property {string} unalarm_description\n * @property {string} user_id\n */\n/**\n * 服务端返回的紧急告警的结构 \n * @typedef {object} EmergencyAlarm\n * @property {string} guid \n * @property {number} alarm_handle_type\n * @property {string} alarm_handler\n * @property {string} alarm_receiver\n * @property {string} alarm_remark\n * @property {number} alarm_status\n * @property {string} alarm_time\n * @property {number} alarm_type\n * @property {string} device_alias\n * @property {string} device_guid\n * @property {string} device_ssi\n * @property {string} handle_alarm_time\n * @property {string} handle_remark\n * @property {string} puc_id\n * @property {string} receiver_remark\n * @property {string} receive_alarm_time\n * @property {string} sap_guid\n * @property {number} sap_type\n * @property {string} system_id\n */\n\n/**\n * 设备变更事件类型\n * @typedef {object} Event\n * @property  {ALARM_ACTION} action \n * @property  {Alarm} data\n */\n\n/**\n * 设备变更回调函数类型\n * @typedef {function(Event)} Callback\n */\n/**\n * 拉取大部分告警记录信令\n */\nconst CMD_FETCH_EMERGENCY = \'emergency_alarm_list_request\';\n/**\n * 拉取超速告警记录信令\n */\nconst CMD_FETCH_SPEED = \'speed_alarm_query\';\n/**\n* 拉取越区告警记录信令\n*/\nconst CMD_FETCH_GEOFENCING = \'geofencing_alarm_query\';\n/**\n* 服务端推送---紧急告警上报\n*/\nconst CMD_REPORT_EMERGENCY = \'emergency_alarm_report_evt\';\n/**\n* 服务端推送---越区告警上报\n*/\nconst CMD_REPORT_GEOFENCING = \'geofencing_alarm_report_evt\';\n/**\n* 服务端推送---超速告警上报\n*/\nconst CMD_REPORT_SPEED = \'speed_alarm_report_evt\';\n/**\n* 服务端推送---紧急告警更新\n*/\nconst CMD_UPDATE_EMERGENCY = \'emergency_alarm_update\';\n\n/**\n * 接警\n */\nconst ALARM_ACTION_RECEIVE = 1;\n// 处警\nconst ALARM_ACTION_HANDLER = 2;\n// 处理者类型:0无类型，1调度员，2设备，3服务器,使用1\nconst ALARM_HANDLE_NONE = 0;\nconst ALARM_HANDLE_DISPATCHER = 1;\nconst ALARM_HANDLE_DEVICE = 2;\nconst ALARM_HANDLE_SERVER = 3;\n/**\n * 告警包含三大类：紧急告警、越区告警、超速告警\n * 其中紧急告警细分诸小类{@link ALARM_TYPYE}\n *     越区告警细分进入区域告警、离开区域告警\n *     超速告警细分速度大于设定值告警\n * \n */\n\n/** \n * 接处警参数\n * @typedef {object} HandleRequest\n * @property {string} data.guid 告警的guid\n * @property {string} data.alarm_time 告警时间\n * @property {string} data.desp 备注消息\n * @property {string} data.basedata_id 告警设备的basedata_id\n */\nclass Alarm {\n  #AlarmData = new Array();\n  /**\n   * @type {Map<string,Callback>}\n   */\n  #callbackMap = new Map();\n  constructor() {\n    //设备相关\n    _protocol_websocket__WEBPACK_IMPORTED_MODULE_4__["default"].registerMessageHandler(CMD_REPORT_EMERGENCY, this);\n    _protocol_websocket__WEBPACK_IMPORTED_MODULE_4__["default"].registerMessageHandler(CMD_REPORT_GEOFENCING, this);\n    _protocol_websocket__WEBPACK_IMPORTED_MODULE_4__["default"].registerMessageHandler(CMD_REPORT_SPEED, this);\n    _protocol_websocket__WEBPACK_IMPORTED_MODULE_4__["default"].registerMessageHandler(CMD_UPDATE_EMERGENCY, this);\n  }\n  /**\n   * 告警状态\n   * 告警触发为ACTIVE_DEFAULT，puc接警后标识收到了告警进入ACTIVE_ACK状态，但是没有处理\n   * 处理后才变更为INACTIVE，表示改告警已经处理掉了或者用户取消了\n   */\n  ALARM_STATUS = {\n    ACTIVE_DEFAULT: 1,\n    ACTIVE_ACK: 2,\n    INACTIVE: 0\n  };\n\n  /**\n  * 告警类型\n  * @enum {number}\n  */\n  ALARM_TYPYE = {\n    ALARM_DEFAULT: 0,\n    // 无类型\n    ALARM_NORMAL: 1,\n    // 普通告警(无呼叫，无gps)\n    ALARM_CALL: 2,\n    // 告警带呼叫(无gps)\n    ALARM_GPS: 3,\n    // 告警带gps(无呼叫)\n    ALARM_GPS_CALL: 4,\n    // 告警带gps带呼叫\n    ALARM_EMERGENCY_CALL: 5,\n    // 紧急呼叫\n    ALARM_EXPLICIT: 6,\n    // 显式告警\n    ALARM_IMPLICIT: 7,\n    // 隐式告警\n    ALARM_MAN_DOWN: 8,\n    // 倒放告警\n    ALARM_OVERTEMPPERRATURE: 9,\n    // 高温告警\n    ALARM_CAMERA_BLOCKED: 10,\n    // 遮挡告警\n    ALARM_NO_MOVEMENT: 11,\n    // 静止告警\n    ALARM_BATTERY_REMOVAL: 12 // 拆电告警\n  };\n  /**\n  * 告警大类\n  * @enum {number}\n  */\n  ALARM_CATEGORY = {\n    GEOFANCING: 2,\n    // 越区告警\n    SPEED: 1,\n    // 超速告警\n    EMERGENCY: 0 // 紧急告警\n  };\n\n  /**\n   * 从服务器拉取历史告警记\n   * @param {AlarmRequest} request\n   */\n  fetchAlarmList(request) {\n    return new Promise((resolve, reject) => {\n      Promise.all([this.#fetchEmergencyAlarmList(request), this.#fetchGeofencingAlarmList(request), this.#fetchSpeedAlarmList(request)]).then(resps => {\n        var _newResp$list;\n        _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug(\'sdk alarm fetchAlarmList succ\', JSON.stringify(resps));\n        /**\n         * @type {import("./baseData").ListAck}\n         */\n        const newResp = {\n          result: 0,\n          list: []\n        };\n        resps.forEach(itemRes => {\n          var _itemRes$alarm_list;\n          if (itemRes.result === 0 && ((_itemRes$alarm_list = itemRes.alarm_list) === null || _itemRes$alarm_list === void 0 ? void 0 : _itemRes$alarm_list.length) > 0) {\n            newResp.list = newResp.list.concat(itemRes.alarm_list);\n          } else if (newResp.result !== 0) {\n            //异常情况\n            newResp.result = res.result;\n          }\n        });\n        newResp.list = (_newResp$list = newResp.list) === null || _newResp$list === void 0 ? void 0 : _newResp$list.sort((a, b) => {\n          return new Date(b.alarm_time).getTime() - new Date(a.alarm_time).getTime();\n        });\n        resolve(newResp);\n      }).catch(err => {\n        _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].warn(\'sdk alarm fetchAlarmList fail\', JSON.stringify(err));\n        reject(err);\n      });\n    });\n  }\n  // @return {Promise.<{result:number,alarm_list:Array.<FormarttedAlarm>}>}\n  /**\n   * 查询紧急告警\n   * \n   */\n  #fetchEmergencyAlarmList() {\n    // 查询紧急告警未处理\n    const queryAlarmParam = {\n      product_name: _public_constant__WEBPACK_IMPORTED_MODULE_6__.api_constant.PRODUCT_NAME,\n      version: _public_constant__WEBPACK_IMPORTED_MODULE_6__.api_constant.VERSION,\n      cmd_name: CMD_FETCH_EMERGENCY,\n      cmd_guid: _common__WEBPACK_IMPORTED_MODULE_7__["default"].guid(),\n      puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].user.puc_id,\n      user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].user.user_id,\n      realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].user.realm\n    };\n    return new Promise((resolve, reject) => {\n      _protocol_http__WEBPACK_IMPORTED_MODULE_3__["default"].postSync(queryAlarmParam).then(resp => {\n        var _resp$alarm_list;\n        _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug(\'sdk alarm fetchEmergencyAlarmList origi\', JSON.stringify(resp));\n        if (resp.result === _public_constant__WEBPACK_IMPORTED_MODULE_6__.ERROR_CODE.SUCCESS && ((_resp$alarm_list = resp.alarm_list) === null || _resp$alarm_list === void 0 ? void 0 : _resp$alarm_list.length) > 0) {\n          resp.alarm_list = resp.alarm_list.map(item => {\n            return this.#convertEmergencyRecord(item);\n          });\n        }\n        resolve({\n          result: resp.result,\n          alarm_list: resp.alarm_list\n        });\n      }).catch(err => {\n        _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].error(\'sdk alarm fetchEmergencyAlarmList fail\', err);\n        reject(err);\n      });\n    });\n  }\n\n  /**\n   * 查询越区告警\n   * @param {AlarmRequest} request\n   */\n  #fetchGeofencingAlarmList(request) {\n    const queryGeofencingParam = {\n      product_name: _public_constant__WEBPACK_IMPORTED_MODULE_6__.api_constant.PRODUCT_NAME,\n      version: _public_constant__WEBPACK_IMPORTED_MODULE_6__.api_constant.VERSION,\n      cmd_name: CMD_FETCH_GEOFENCING,\n      puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].user.puc_id,\n      realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].user.realm,\n      user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].user.user_id,\n      count_of_page: request.page_size,\n      page_index: request.page_index,\n      batch: 0,\n      pageStatus: true,\n      cmd_guid: _common__WEBPACK_IMPORTED_MODULE_7__["default"].guid(),\n      active: this.ALARM_STATUS.ACTIVE_DEFAULT,\n      // 1产生告警\n      start_time: request.start_time,\n      end_time: request.end_time\n    };\n    return new Promise((resolve, reject) => {\n      _protocol_http__WEBPACK_IMPORTED_MODULE_3__["default"].postSync(queryGeofencingParam).then(resp => {\n        if ((resp === null || resp === void 0 ? void 0 : resp.result) === _public_constant__WEBPACK_IMPORTED_MODULE_6__.ERROR_CODE.SUCCESS) {\n          resp.alarm_list = resp.alarm_list.map(item => {\n            return this.#convertGeoFancingRecord(item);\n          });\n        }\n        resolve({\n          result: resp.result,\n          alarm_list: resp.alarm_list\n        });\n      }).catch(err => {\n        _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].error(\'fetchGeofencingAlarmList fail\', err);\n      });\n    });\n  }\n  /**\n   * 查询超速告警\n   * @param {AlarmRequest} request\n   * @returns {Promise.<{result:number,alarm_list:Array.<SpeedAlarm>}>}\n   */\n  #fetchSpeedAlarmList(request) {\n    const querySpeedParam = {\n      product_name: _public_constant__WEBPACK_IMPORTED_MODULE_6__.api_constant.PRODUCT_NAME,\n      version: _public_constant__WEBPACK_IMPORTED_MODULE_6__.api_constant.VERSION,\n      cmd_name: CMD_FETCH_SPEED,\n      puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].user.puc_id,\n      realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].user.realm,\n      user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].user.user_id,\n      device_number: \'\',\n      alarm_type: 0,\n      // 告警类型本期接口文档提示写死为0\n      start_time: request.start_time,\n      end_time: request.end_time,\n      count_of_page: request.page_size,\n      page_index: request.page_index,\n      batch: 0,\n      pageStatus: true,\n      cmd_guid: _common__WEBPACK_IMPORTED_MODULE_7__["default"].guid(),\n      active: 1 // 1产生告警\n    };\n\n    return new Promise((resolve, reject) => {\n      _protocol_http__WEBPACK_IMPORTED_MODULE_3__["default"].postSync(querySpeedParam).then(resp => {\n        if ((resp === null || resp === void 0 ? void 0 : resp.result) === _public_constant__WEBPACK_IMPORTED_MODULE_6__.ERROR_CODE.SUCCESS) {\n          resp.alarm_list = resp.alarm_list.map(item => this.#convertSpeedAlarm(item));\n        }\n        resolve({\n          result: resp.result,\n          alarm_list: resp.alarm_list\n        });\n      }).catch(err => {\n        _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].error(\'fetchSpeedAlarmList fail\', err);\n      });\n    });\n    return _protocol_http__WEBPACK_IMPORTED_MODULE_3__["default"].postSync(querySpeedParam);\n  }\n  /**\n   * 把紧急告警记录转换成对外提供的统一的结构\n   * @param {EmergencyAlarm} data \n   * @return {FormarttedAlarm}  \n   */\n  #convertEmergencyRecord(data) {\n    if (data) {\n      if (new Date(data.handle_alarm_time).getTime() === 0) {\n        data.handle_alarm_time = undefined;\n      }\n      /**\n       * @type {FormarttedAlarm}\n       */\n      const alarm = {\n        guid: data.guid ? data.guid : data.alarm_guid,\n        category: this.ALARM_CATEGORY.EMERGENCY,\n        alarm_type: data.alarm_type,\n        target: {\n          guid: data.device_guid,\n          number: data.device_ssi,\n          basedata_id: (0,_common_utils__WEBPACK_IMPORTED_MODULE_1__.genLocalGuid)(data, \'device_ssi\'),\n          alias: data.device_alias\n        },\n        status: data.alarm_status,\n        alarm_time: data.alarm_time\n      };\n      //接警状态，需要录入接警人员的信息\n      if (data.alarm_status === this.ALARM_STATUS.ACTIVE_ACK) {\n        alarm.receiver = {\n          user_id: data.alarm_receiver,\n          time: data.receive_alarm_time\n        };\n      }\n      //处理掉了，需要录入接警和处警人员的信息\n      if (data.alarm_status === this.ALARM_STATUS.INACTIVE) {\n        alarm.receiver = {\n          user_id: data.alarm_receiver,\n          time: data.receive_alarm_time\n        };\n        alarm.hanlder = {\n          user_id: data.alarm_handle,\n          time: data.handle_alarm_time\n        };\n        alarm.unalarm_time = data.handle_alarm_time;\n      }\n      return alarm;\n    }\n  }\n  /**\n   * 转换越区告警\n   * @param {object} data \n   * @param {number} data.active : 1\n   * @param {string} data.alarm_datetime : "2023-07-12T02:20:19Z"\n   * @param {string} data.alarm_description : ""\n   * @param {object} data.alarm_type : 1\n   * @param {string} data.device_alias : ""\n   * @param {string} data.device_guid : "Device:00001:890:888001@mcs.com"\n   * @param {number} data.device_numbertype : 0\n   * @param {string} data.device_ssi : "888001"\n   * @param {string} data.guid : "f9851282-e85c-4c46-a629-64381b9ac534"\n   * @param {string} data.puc_id : "00001"\n   * @param {string} data.region_guid : "5B28E3Db-6Edb-0B2A-b51B-d4Cd4bBBACA2"\n   * @param {string} data.region_name : "region_name"\n   * @param {string} data.rule_guid : "F9C4FB64-2bcE-383E-fd21-EAffc7E23cef"\n   * @param {string} data.rule_name : "rule_name"\n   * @param {string} data.system_id : "890"\n   * @param {string} data.unalarm_datetime : "1970-01-01T00:00:00Z"\n   * @param {string} data.unalarm_description : ""\n   * @returns {FormarttedAlarm=}\n   */\n  #convertGeoFancingRecord(data) {\n    if (data) {\n      data.number_type = data.device_numbertype;\n      if (new Date(data.unalarm_datetime).getTime() === 0) {\n        data.unalarm_datetime = undefined;\n      }\n      return {\n        guid: data.guid,\n        category: this.ALARM_CATEGORY.GEOFANCING,\n        alarm_type: data.alarm_type ? data.alarm_type : data.active,\n        target: {\n          guid: data.device_guid,\n          number: data.device_ssi,\n          basedata_id: (0,_common_utils__WEBPACK_IMPORTED_MODULE_1__.genLocalGuid)(data, \'device_ssi\'),\n          alias: data.device_alias\n        },\n        status: data.active,\n        alarm_time: data.alarm_datetime,\n        unalarm_time: data.unalarm_datetime,\n        rule: {\n          rule_guid: data.rule_guid,\n          rule_name: data.rule_name\n        },\n        region: {\n          region_guid: data.region_guid,\n          region_name: data.region_name\n        }\n      };\n    }\n  }\n  /**\n   * 转换超速告警,居然没有guid,emm..\n   * @param {object} data \n   * @param {number} data.active: 1 告警状态，参考{@link ALARM_STATUS}\n   * @param {string} data.alarm_datetime: "2023-07-07T01:06:44Z" 告警上报时间\n   * @param {string} data.alarm_description: ""\n   * @param {string} data.alarm_guid: "af2efd2c-b052-4c58-9107-f4ccc17d1093"\n   * @param {object} data.alarm_type: 0\n   * @param {object} data.current_speed: 58.31533477321814\n   * @param {string} data.device_alias: ""\n   * @param {string} data.device_guid: "Device:00001:890:33333334@mcs.com"\n   * @param {string} data.device_number: "33333334"\n   * @param {object} data.device_numbertype: 0\n   * @param {string} data.puc_id: "00001"\n   * @param {string} data.rule_guid: "DF9bEdCC-1EDd-491e-1321-b50b3ED57e7A"\n   * @param {string} data.rule_name: "test"\n   * @param {string} data.system_id: "890"\n   * @param {string} data.unalarm_datetime: "1970-01-01T00:00:00Z"\n   * @param {string} data.unalarm_description: ""\n   * @param {string} data.user_id: "9999998"\n   * @returns {FormarttedAlarm=}\n   */\n  #convertSpeedAlarm(data) {\n    if (data) {\n      data.number_type = data.device_numbertype;\n      if (new Date(data.unalarm_datetime) === 0) {\n        data.unalarm_datetime = undefined;\n      }\n      return {\n        guid: _common__WEBPACK_IMPORTED_MODULE_7__["default"].guid(),\n        category: this.ALARM_CATEGORY.SPEED,\n        alarm_type: data.alarm_type,\n        target: {\n          guid: data.device_guid,\n          number: data.device_number,\n          basedata_id: (0,_common_utils__WEBPACK_IMPORTED_MODULE_1__.genLocalGuid)(data, \'device_number\'),\n          alias: data.device_alias\n        },\n        status: data.active,\n        alarm_time: data.alarm_datetime,\n        unalarm_time: data.unalarm_datetime,\n        speed: data.current_speed,\n        rule: {\n          rule_guid: data.rule_guid,\n          rule_name: data.rule_name\n        }\n      };\n    }\n  }\n\n  /**\n   * 一键处理紧急告警\n   * 处理告警，分为两步，先接警{@link #ackAlarm}，后处警{@link #processAlarm}\n   * @param {HandleRequest} data\n   */\n  handleAlarm(data) {\n    if (!this.#checkParam(data)) {\n      return Promise.resolve(_public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].getBaseResp(_public_constant__WEBPACK_IMPORTED_MODULE_6__.ERROR_CODE.PARAM_INVALID));\n    }\n    //已经处理过了\n    if (data.status === this.ALARM_STATUS.INACTIVE) {\n      _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug(\'sdk alarm handleAlarm,alreay proceed\');\n      Promise.resolve(_public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].getBaseResp(_public_constant__WEBPACK_IMPORTED_MODULE_6__.ERROR_CODE.ALARM_PROCEED));\n      return;\n    }\n    // 已经接警了\n    if (data.status === this.ALARM_STATUS.ACTIVE_ACK) {\n      _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug(\'sdk alarm handleAlarm,alreay acked,straight process\');\n      return this.processAlarm(data);\n    }\n    return new Promise((resolve, reject) => {\n      this.ackAlarm(data).then(resp => {\n        _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug(\'sdk alarm handleAlarm step11 resp : \', resp);\n        if (resp.result === _public_constant__WEBPACK_IMPORTED_MODULE_6__.ERROR_CODE.SUCCESS) {\n          return this.processAlarm(data);\n        } else {\n          resolve(resp);\n        }\n      }).then(resp => {\n        resolve(resp);\n      }).catch(err => {\n        reject(_public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].getBaseResp(resp.result));\n      });\n    });\n  }\n  /**\n  * 接警\n  * @param {HandleRequest} data\n  */\n  ackAlarm(data) {\n    if (!this.#checkParam(data)) {\n      return;\n    }\n    // 紧急告警增加先接警流程\n    return new Promise((resolve, reject) => {\n      if (data.category != 0) {\n        //非紧急告警不可调用此接口\n        resolve(_public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].getBaseResp(_public_constant__WEBPACK_IMPORTED_MODULE_6__.ERROR_CODE.PARAM_INVALID));\n        return;\n      }\n      _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug(\'sdk alarm handleAlarm step1 start : \', data);\n      const dateNow = new Date().toJSON().split(\'.\')[0];\n      const ids = (0,_common_utils__WEBPACK_IMPORTED_MODULE_1__.unPackGuid)(data.basedata_id);\n      const alarmHandleParam = {\n        cmd_name: \'emergency_alarm_handle\',\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].user.realm,\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].user.puc_id,\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_6__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_6__.api_constant.VERSION,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_7__["default"].guid(),\n        time_stamp: data.alarm_time,\n        system_id: ids === null || ids === void 0 ? void 0 : ids.system_id,\n        system_type: 0,\n        alarm_guid: data.guid,\n        alarm_receiver: _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].user.user_id,\n        // 客户端触发为客户端用户名\n        alarm_handle_type: ALARM_HANDLE_DISPATCHER,\n        receive_alarm_time: `${dateNow}Z`,\n        handle_alarm_desp: data.desp,\n        // 处理描述\n        alarm_action_flag: ALARM_ACTION_RECEIVE\n      };\n      window.lemon.http.postSync(alarmHandleParam).then(resp => {\n        _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug(\'sdk alarm handleAlarm step1 resp : \', resp);\n        resolve({\n          result: resp.result,\n          alarm_guid: resp.alarm_guid\n        });\n      }, err => {\n        _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].error(\'sdk alarm handleAlarm step1 error: \', err);\n        reject(err);\n      });\n    });\n  }\n  /**\n  * 处警\n  * @param {HandleRequest} data\n  */\n  processAlarm(data) {\n    if (!this.#checkParam(data)) {\n      return;\n    }\n    return new Promise((resolve, reject) => {\n      if (data.category != 0) {\n        //非紧急告警不可调用此接口\n        resolve(_public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].getBaseResp(_public_constant__WEBPACK_IMPORTED_MODULE_6__.ERROR_CODE.PARAM_INVALID));\n        return;\n      }\n      _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug(\'sdk alarm handleAlarm step2 start : \', data);\n      _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug(\'sdk alarm handleAlarm step2 baseRequest : \', _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"]);\n      // 紧急告警增加处警流程\n      const dateNow = new Date().toJSON().split(\'.\')[0];\n      const ids = (0,_common_utils__WEBPACK_IMPORTED_MODULE_1__.unPackGuid)(data.basedata_id);\n      const dealAlarmParam = {\n        cmd_name: \'emergency_alarm_handle\',\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].user.realm,\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].user.puc_id,\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_6__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_6__.api_constant.VERSION,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_7__["default"].guid(),\n        time_stamp: data.alarm_time,\n        system_id: ids === null || ids === void 0 ? void 0 : ids.system_id,\n        system_type: 0,\n        alarm_guid: data.guid,\n        alarm_handler: _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].user.user_id,\n        // 客户端触发为客户端用户名\n        alarm_handle_type: ALARM_HANDLE_DISPATCHER,\n        handle_alarm_time: `${dateNow}Z`,\n        handle_alarm_desp: data.desp,\n        // 处理描述\n        alarm_action_flag: ALARM_ACTION_HANDLER\n      };\n      window.lemon.http.postSync(dealAlarmParam).then(resp => {\n        _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug(\'sdk alarm handleAlarm step2 resp : \', resp);\n        resolve({\n          result: resp.result,\n          alarm_guid: resp.alarm_guid\n        });\n      }, err => {\n        reject(err);\n        _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug(\'sdk alarm handleAlarm step2 err : \', err);\n      });\n    });\n  }\n  /**\n   * 检查处理告警时传入的参数\n   * @param {HandleRequest} data\n   * @return {boolean} 参数是否合法，合法true,不合法false\n   */\n  #checkParam(data) {\n    if (!data || !data.guid || !data.alarm_time || !data.basedata_id) {\n      _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug(\'sdk alarm checkParam\', JSON.stringify(data));\n      return false;\n    }\n    return true;\n  }\n  /**\n   * 添加告警事件监听\n   * @param {Callback} callback \n   * @return {string} callbackId {@link removeAlarmListener } 需要根据这个id找到对应的回调函数\n   */\n  addAlarmListener(callback) {\n    let guid;\n    if (callback) {\n      guid = _common__WEBPACK_IMPORTED_MODULE_7__["default"].guid();\n      this.#callbackMap.set(guid, callback);\n    }\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug(\'sdk alarm addAlarmListener: \', guid);\n    return guid;\n  }\n  /**\n   * 添加告警事件监听\n   * @param {string} callbackId 添加监听{@link addAlarmListener }时返回的id\n   */\n  removeAlarmListener(callback_id) {\n    let result;\n    if (callback_id) {\n      result = this.#callbackMap.delete(callback_id);\n    }\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug(\'sdk alarm removeAlarmListener,result =  \', result);\n    return result;\n  }\n  /**\n   * \n   * @param {object} jsonData\n   * @param {string} jsonData.cmd_name \n   */\n  onEvent(jsonData) {\n    var _jsonData$rule_list, _jsonData$rule_list2, _jsonData$region, _jsonData$region2, _jsonData$rule_list3, _jsonData$rule_list4, _jsonData$rule_list5, _event$data, _event$data2;\n    if (!jsonData || !jsonData.cmd_name) {\n      _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].warn(\'sdk alarm onEvent interupt\', jsonData);\n      return;\n    }\n    /**\n     * @type {{action:number,data:{}}}\n     */\n    const event = {};\n    switch (jsonData.cmd_name) {\n      case CMD_REPORT_EMERGENCY:\n        event.data = this.#convertEmergencyRecord(jsonData);\n        break;\n      case CMD_REPORT_GEOFENCING:\n        //推送的越区告警没有guid字段，主动拉取的数据有，如果是取消告警，要结合告警用户和触发的规则判断取消的是哪个告警\n        jsonData.rule_guid = (jsonData === null || jsonData === void 0 ? void 0 : (_jsonData$rule_list = jsonData.rule_list) === null || _jsonData$rule_list === void 0 ? void 0 : _jsonData$rule_list.length) > 0 ? jsonData.rule_list[0].rule_guid : undefined;\n        jsonData.rule_name = (jsonData === null || jsonData === void 0 ? void 0 : (_jsonData$rule_list2 = jsonData.rule_list) === null || _jsonData$rule_list2 === void 0 ? void 0 : _jsonData$rule_list2.length) > 0 ? jsonData.rule_list[0].rule_name : undefined;\n        jsonData.region_guid = jsonData === null || jsonData === void 0 ? void 0 : (_jsonData$region = jsonData.region) === null || _jsonData$region === void 0 ? void 0 : _jsonData$region.region_guid;\n        jsonData.region_name = jsonData === null || jsonData === void 0 ? void 0 : (_jsonData$region2 = jsonData.region) === null || _jsonData$region2 === void 0 ? void 0 : _jsonData$region2.region_name;\n        event.data = this.#convertGeoFancingRecord(jsonData);\n        break;\n      case CMD_REPORT_SPEED:\n        jsonData.rule_guid = (jsonData === null || jsonData === void 0 ? void 0 : (_jsonData$rule_list3 = jsonData.rule_list) === null || _jsonData$rule_list3 === void 0 ? void 0 : _jsonData$rule_list3.length) > 0 ? jsonData.rule_list[0].rule_guid : undefined;\n        jsonData.rule_name = (jsonData === null || jsonData === void 0 ? void 0 : (_jsonData$rule_list4 = jsonData.rule_list) === null || _jsonData$rule_list4 === void 0 ? void 0 : _jsonData$rule_list4.length) > 0 ? jsonData.rule_list[0].rule_name : undefined;\n        jsonData.alarm_type = (jsonData === null || jsonData === void 0 ? void 0 : (_jsonData$rule_list5 = jsonData.rule_list) === null || _jsonData$rule_list5 === void 0 ? void 0 : _jsonData$rule_list5.length) > 0 ? jsonData.rule_list[0].alarm_type : undefined;\n        event.data = this.#convertSpeedAlarm(jsonData);\n        break;\n      case CMD_UPDATE_EMERGENCY:\n        event.action = _public_constant__WEBPACK_IMPORTED_MODULE_6__.DATA_ACTION.UPDATE;\n        event.data = this.#convertEmergencyRecord(jsonData);\n        break;\n    }\n    if (((_event$data = event.data) === null || _event$data === void 0 ? void 0 : _event$data.status) === this.ALARM_STATUS.INACTIVE) {\n      //取消告警\n      event.action = _public_constant__WEBPACK_IMPORTED_MODULE_6__.DATA_ACTION.DELETE;\n    } else if (((_event$data2 = event.data) === null || _event$data2 === void 0 ? void 0 : _event$data2.status) === this.ALARM_STATUS.ACTIVE_DEFAULT) {\n      //产生告警\n      event.action = _public_constant__WEBPACK_IMPORTED_MODULE_6__.DATA_ACTION.ADD;\n    }\n    this.#callbackMap.forEach(cb => {\n      try {\n        cb(event);\n      } catch (error) {\n        _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].error(\'sdk alarm onEvent error\', error);\n      }\n    });\n  }\n  /**\n   * 生成对外的device_id\n   * @param {AlarmInner} alarm \n   */\n  #genDeviceId(alarm) {\n    if (alarm) {\n      return `${alarm.puc_id}@${alarm.system_id}@${alarm.user_id}@${alarm.realm}@${alarm.version}`;\n    }\n  }\n  /**\n   * 解包由{@link #genDeviceId}生成的deviceId\n   * @param {string} device_id \n   * @return {DeviceId|undefined} \n   */\n  #unpackDeviceId(device_id) {\n    if (device_id) {\n      const data = device_id.split(\'@\');\n      if (data.length >= 5) {\n        return {\n          puc_id: data[0],\n          system_id: data[1],\n          user_id: data[2],\n          realm: data[3],\n          version: data[4]\n        };\n      }\n    }\n  }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new Alarm());\n\n//# sourceURL=webpack://lemon/./lemon/modules/alarm.js?'
          );

          /***/
        },

      /***/ "./lemon/modules/baseData.js":
        /*!***********************************!*\
  !*** ./lemon/modules/baseData.js ***!
  \***********************************/
        /***/ (
          __unused_webpack_module,
          __webpack_exports__,
          __webpack_require__
        ) => {
          "use strict";
          eval(
            '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _protocol_http__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../protocol/http */ "./lemon/protocol/http.js");\n/* harmony import */ var _public_constant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../public/constant */ "./lemon/public/constant.js");\n/* harmony import */ var _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../public/baseRequest */ "./lemon/public/baseRequest.js");\n/* harmony import */ var _common_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/utils */ "./lemon/common/utils.js");\n/* harmony import */ var _common_log__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../common/log */ "./lemon/common/log.js");\n/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./common */ "./lemon/modules/common.js");\n/* harmony import */ var _protocol_websocket__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../protocol/websocket */ "./lemon/protocol/websocket.js");\n/* harmony import */ var _littleLemon__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../littleLemon */ "./lemon/littleLemon.js");\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * 获取组织架构命令\n * @const\n * @type {string}\n */\nconst CMD_FETCH_FRAMEWORK = \'get_shortorglist_info_req\';\n/**\n * 获取调度员cmd\n * @const\n * @type {string}\n */\nconst CMD_FETCH_DISPATCHER = \'account_list_request\';\n/**\n * 获取分页设备列表cmd\n * @const\n * @type {string}\n */\nconst CMD_FETCH_DEVICE = \'indict_org_devicelist_req_evt\';\n\n/**\n * 获取节点下设备的总数和当前在线数\n */\nconst CMD_DEVICE_ONLINE_CNT = \'get_dev_online_cnt\';\n/**\n * 获取节点下设备的总数和当前在线数\n */\nconst CMD_DEVICE_ONLINE_CNT_SELF = \'DemGetDeviceOnlineCntReq\';\n/**\n * 获取分页组列表cmd\n *  @const\n *  @type {string}\n */\nconst CMD_FETCH_GROUP = \'indict_org_grouplist_req_evt\';\n/**\n * 获取组成员列表命令 其它系统使用这个\n *  @const\n *  @type {string}\n */\nconst CMD_FETCH_GROUP_MEMBER = \'get_group_members\';\n/**\n * 获取组成员列表命令 mcs系统使用这个\n *  @const\n *  @type {string}\n */\nconst CMD_FETCH_GROUP_MEMBER_2 = \'group_mem_list_request\';\n\n/**\n * 获取会议列表信令\n *  @const\n *  @type {string}\n */\nconst CMD_FETCH_CONFERENCE = \'conference_request\';\n/**\n * 获取会议成员\n *  @const\n *  @type {string}\n */\nconst CMD_FETCH_CONFERENCE_MEMBER = \'conference_mem_request\';\n\n/**\n * 新建会议\n *  @const\n *  @type {string}\n */\nconst CMD_NEW_CONFERENCE = \'add_conference\';\n/**\n * 删除会议\n *  @const\n *  @type {string}\n */\nconst CMD_DELETE_CONFERENCE = \'delete_conference\';\n/**\n * 更新会议\n *  @const\n *  @type {string}\n */\nconst CMD_UPDATE_CONFERENCE = \'update_conference\';\n/**\n * 新增会议成员\n *  @const\n *  @type {string}\n */\nconst CMD_ADD_CONFERENCE_MEM = \'add_conference_member\';\n\n/**\n * 移除会议成员\n *  @const\n *  @type {string}\n */\nconst CMD_REMOVE_CONFERENCE_MEM = \'delete_conference_member\';\n\n/**\n * 组织架构的根节点标识\n * @const \n * @type {string}\n */\nconst NODE_ROOT_KEY = \'00\';\n\n/**\n * 服务端新增了设备推送下来的信令\n * @const\n * @type {string}\n */\nconst CMD_ADD_DEVICE = \'add_device\';\n/**\n * 服务端更新设备推送下来的信令\n * @const\n * @type {string}\n */\nconst CMD_UPDATE_DEVICE = \'update_device\';\n/**\n* 服务端删除设备推送下来的信令\n* @const\n* @type {string}\n*/\nconst CMD_DELETE_DEVICE = \'delete_device\';\n/**\n * 设备锁定状态变更（遥晕遥毙）\n * @const\n */\nconst CMD_DEVICE_LOCK_STATE = \'update_device_lock_status_evt\';\n/**\n * 客户端查询设备信息\n * @const\n */\nconst CMD_QUERY_DEVICE_INFO = \'indict_device_user_req_evt\';\n/**\n *拉取群组列表\n * @const\n */\nconst CMD_FETCH_CROSS_PATCH = \'crosspatch_request\';\n/**\n *创建群组()\n * @const\n */\nconst CMD_NEW_CROSS_PATCH = \'add_crosspatch\';\n/**\n * 客户端更新群组,服务端推送都是这个命令\n * @const\n */\nconst CMD_UPDATE_CROSS_PATCH = \'update_crosspatch\';\n\n/**\n * 删除群组\n * @const\n */\nconst CMD_DELETE_CROSS_PATCH = \'delete_crosspatch\';\n/**\n * 群组添加成员\n * @const\n */\nconst CMD_ADD_CROSS_PATCH_MEMBER = \'add_crosspatch_member\';\n/**\n * 群组移除成员\n * @const\n */\nconst CMD_REMOVE_CROSS_PATCH_MEMBER = \'delete_crosspatch_member\';\n\n/**\n * 激活群组成员(组)\n * @const\n */\nconst CMD_ACTIVE_CROSS_PATCH_MEMBER = \'current_group_change\';\n/**\n * 设置群组可用状态\n * @const\n */\nconst CMD_ACTIVE_CROSS_PATCH = \'set_crosspatch_active\';\n\n/**\n *拉取动态组列表\n * @const\n */\nconst CMD_FETCH_DYNAMICGROUP = \'dgna_request\';\n/**\n *拉取动态组成员\n * @const\n */\nconst CMD_FETCH_DYNAMICGROUP_MEMBER = \'dgna_mem_request\';\n/**\n * 新增动态组,客户端->服务端，服务端->创建者\n * @const\n */\nconst CMD_ADD_DYNAMICGROUP = \'add_dgna\';\n/**\n * 新增动态组成员\n * @const\n */\nconst CMD_ADD_DYNAMICGROUP_MEMBER = \'add_dgna_member\';\n/**\n * 删除动态组成员\n * @const\n */\nconst CMD_REMOVE_DYNAMICGROUP_MEMBER = \'delete_dgna_member\';\n/**\n * 修改动态组,客户端->服务端，服务端->修改者，其实也是创建者，因为创建者才有权限修改\n * @const\n */\nconst CMD_UPDATE_DYNAMICGROUP = \'update_dgna\';\n/**\n * 删除动态组\n * @const\n */\nconst CMD_DELETE_DYNAMICGROUP = \'delete_dgna\';\n/**\n * 拉取第三方会议\n * @const\n */\nconst CMD_FETCH_THIRD_CONFERENCE = \'get_3rd_conf_list_request\';\n/**\n * 创建第三方会议\n * @const\n */\nconst CMD_ADD_THIRD_CONFERENCE = \'add_3rd_conf_info\';\n/**\n * 更新第三方会议信息\n * @const\n */\nconst CMD_UPDATE_THIRD_CONFERENCE = \'update_3rd_conf_info\';\n/**\n * 删除第三方会议信息\n * @const\n */\nconst CMD_DELETE_THIRD_CONFERENCE = \'delete_3rd_conf_info\';\n/**\n* 服务端新增了组推送下来的信令\n* @const\n* @type {string}\n*/\nconst CMD_ADD_GROUP = \'add_group_info\';\n/**\n* 服务端组信息被更新了推送下来的信令\n* @const\n* @type {string}\n*/\nconst CMD_UPDATE_GROUP = \'update_group_info\';\n/**\n* 服务端组被删除了推送下来的信令\n* @const\n* @type {string}\n*/\nconst CMD_DELETE_GROUP = \'delete_group_info\';\n\n/**\n* 服务端推送下来的信令-组织构架新增了节点\n* @const\n* @type {string}\n*/\nconst CMD_ADD_ORG = \'add_organization_info\';\n/**\n* 服务端推送下来的信令-组织构架节点变动\n* @const\n* @type {string}\n*/\nconst CMD_UPDATE_ORG = \'update_organization_info\';\n/**\n* 服务端推送下来的信令-组织构架节点被删除\n* @const\n* @type {string}\n*/\nconst CMD_DELETE_ORG = \'delete_organization_info\';\n/**\n * 服务端推送下来的信令-设备状态变更了，指上下线的状态\n * @const\n * @type {string}\n */\nconst CMD_DEVICE_STATE = \'device_list_status_check_evt\';\n/**\n * 服务端数据同步，要更新大量数据，会有data_type字段表明是是需要更新那些类型的数据，device、group、organization\n * @const\n * @type {string}\n */\nconst CMD_DATA_SYNC = \'sync_base_data_notify\';\n/**\n * 客户端请求-系统列表\n * @const\n * @type {string}\n */\nconst CMD_SYSTEM_LIST = \'system_list_request\';\n\n/**\n * 服务端推送-新增了其他调度员账号，适用于调度员列表\n */\nconst CMD_DISPATCHER_ADD = \'add_account\';\n/**\n * 服务端推送-当前或者其他账号变更（如：授权的组织架构节点变化）\n */\nconst CMD_DISPATCHER_UPDATE = \'update_account\';\n/**\n * 服务端推送-删除了其他调度员账号，非当前账号\n */\nconst CMD_DISPATCHER_DELETE = \'delete_account\';\n/**\n *  服务端推送-调度员在线状态变更\n */\nconst CMD_DISPATCHER_STATE = \'dispatcher_status_check_evt\';\n/**\n *  服务端推送-新增网关系统\n */\nconst CMD_ADD_SYSTEM = \'add_system\';\n/**\n*  服务端推送-更新网关系统\n*/\nconst CMD_UPDATE_SYSTEM = \'update_system\';\n/**\n*  服务端推送-删除网关系统\n*/\nconst CMD_DELETE_SYSTEM = \'delete_system\';\n//发送延迟的时间,会议和群组有这个，默认8，单位不知道是什么，猜测可能是ms\nconst default_vox_delay = 8;\n\n/**\n * 客户端请求-系统派接列表\n * @const\n * @type {string}\n */\nconst CMD_FETCH_SYSTEM_PATCH_LIST = \'syspatch_info_request\';\n/**\n *拉取系统派接组成员\n * @const\n */\nconst CMD_FETCH_SYSTEM_PATCH_MEMBER = \'syspatch_mem_info_request\';\n\n/**\n * 删除派接组\n * @const\n */\nconst CMD_DELETE_SYSTEM_PATCH = \'delete_syspatch\';\n/**\n * 添加派接组\n * @const\n */\nconst CMD_ADD_SYSTEM_PATCH = \'add_syspatch\';\n/**\n * 添加派接组成员\n * @const\n */\nconst CMD_ADD_SYSTEM_PATCH_MEMBER = \'add_syspatch_member\';\n/**\n * 删除派接组成员\n * @const\n */\nconst CMD_DELETE_SYSTEM_PATCH_MEMBER = \'delete_syspatch_member\';\n/**\n * 更新派接组\n * @const\n */\nconst CMD_UPDATE_SYSTEM_PATCH = \'update_syspatch\';\n/**\n * 获取调度车台\n * @const\n */\nconst CMD_GET_SAPBASE_LIST = \'get_sapbaseconf_list_req\';\n/**\n * 设备遥晕\n * @const\n */\nconst CMD_DEVICE_STUN = \'device_stun_request\';\n/**\n * 设备遥醒\n * @const\n */\nconst CMD_DEVICE_REVIVE = \'device_revive_request\';\n/**\n * 设备遥毙\n * @const\n */\nconst CMD_DEVICE_KILL = \'device_kill_request\';\n\n/**\n * 设备类型\n * @typedef {object} Device\n * @property  {string} guid 唯一标识\n * @property  {string} basedata_id 基础数据对象的统一对外标识信息,能根据这个信息定位到设备\n * @property  {string} number 设备号码，对应服务端的device_id,单系统唯一，多系统不唯一,外部可能需要直接取用（如号码显示）\n * @property  {string} alias 设备别名\n * @property  {number} device_type 设备类型\n * @property  {string} longitude 设备坐标经度（一般是摄像头，位置固定）\n * @property  {string} latitude 设备坐标纬度（一般是摄像头，位置固定）\n * @property  {string} [certified_name] 实名制的名称，这个字段未必有\n * @property  {object} [status]\n * @property  {number} [status.lock_state] 锁定状态\n * @property  {number} status.narrowband 窄带在线状态\n * @property  {number} status.broadband 宽带在线状态\n * @property  {number} [status.subscribe] 是否有订阅该设备\n * @property  {object} [subscribe] 订阅设备gps的相关信息，有订阅才会有这个字段\n * @property  {object} [subscribe.interval] 订阅这个设备的周期（即设备gps上报周期）\n */\n\n/**\n * 组类型\n * @typedef {object} Group\n * @property  {string} guid 唯一标识\n * @property  {string} basedata_id 基础数据对象的统一对外标识信息,能根据这个信息定位到组\n * @property  {string} number 组号码，对应服务端的group_id,单系统唯一，多系统不唯一,外部可能需要直接取用（如号码显示）\n * @property  {string} alias 组别名multi_talker\n * @property  {string} multi_talker 是否的多话权 0否，其它是\n */\n\n/**\n * 组织架构节点\n * @typedef {object} OrgNode\n * @property  {string} guid\n * @property  {string} org_alias\n * @property  {string} org_identifier\n * @property  {Array.<OrgNode>} children\n */\n\n/**\n * 设备列表请求响应结构\n * @typedef {object} DeviceListResp\n * @property  {number} result 响应码，0成功，其他失败\n * @property  {number} device_cnt 节点下的设备总数\n * @property  {number} page_cnt 按传入的参数计算总共有多少页\n * @property  {Array.<Device>} device_list 设备数组\n */\n\n/**\n * 组列表请求响应结构\n * @typedef {object} GroupListResp\n * @property  {number} result 响应码，0成功，其他失败\n * @property  {number} group_cnt 组总数（单一节点下）\n * @property  {number} page_cnt 分页的总页码(与请求时传入的单页容量有关)\n * @property  {Array.<Group>} group_list\n */\n\n/**\n * 设备变更事件类型\n * @typedef {object} DeviceEvent\n * @property  {DATA_ACTION} action \n * @property  {Device |Array.<Device>} data\n */\n\n/**\n * 设备变更回调函数类型\n * @typedef {function(DeviceEvent)} DeviceCallback\n */\n/**\n * 组变更事件类型\n * @typedef {object} GroupEvent\n * @property  {DATA_ACTION} action \n * @property  {Group} data\n */\n\n/**\n * 组变更回调函数类型\n * @typedef {function(GroupEvent)} GroupCallback\n */\n/**\n * 组织架构变更事件类型\n * @typedef {object} OrgEvent\n * @property  {DATA_ACTION} action\n * @property  {OrgNode} data\n */\n\n/**\n * 组织架构变更回调函数类型\n * @typedef {function(OrgEvent)} OrgCallback\n */\n\n/**\n * 服务端推送结构--设备上下线\n * @typedef {object} DeviceStateEvent\n * @property  {string} cmd_guid\n * @property  {string} cmd_name\n * @property  {string} puc_id\n * @property  {Array.<ChangeStateDevice>} device_list \n */\n\n/**\n * 服务端推送结构--设备上下线中的设备\n * @typedef {object} ChangeStateDevice\n * @property  {string} device_guid\n * @property  {string} system_id\n * @property  {string} device_id\n * @property  {number} number_type \n * @property  {object} status \n * @property  {number} status.online  窄带在线状态\n * @property  {number} status.poc_online 宽带在线状态\n * \n */\n\n/** \n * 系统对象结构\n * @typedef {object} System\n * @property  {string} guid \n * @property  {string} puc_id\n * @property  {string} system_id\n * @property  {string} system_alias\n * @property  {string} system_type\n * @property  {number} version_seq\n */\n\n/**\n * 调度员结构\n * @typedef {object} DispatcherBean\n * @property  {string} guid 唯一标识\n * @property  {string} number 账号，其实是id，即登录时用的账号，对应字段dispatcher_account\n * @property  {string} alias 别名\n * @property  {string} basedata_id 混合信息\n * @property  {ONLINE_STATE} [online] 是否在线\n * @property  {number} [self] 是否是自己，0否，1是\n */\n/**\n * 调度员在线状态变更结构\n * @typedef {object} DispatcherEvent\n * @property  {DATA_ACTION} action \n * @property  {DispatcherBean} data \n */\n\n/**\n * 设备在线数响应结构\n * @typedef {object} DeviceOnlineCntResp\n * @property  {number} result \n * @property  {number} online_cnt 在线数\n * @property  {number} total_cnt 节点设备总数\n */\n\n/**\n * 设备详细信息响应结构(sdk内部使用,只取用了一部分，需要再加)\n * @typedef {object} DeviceDetailInfoAck\n * @property  {number} result \n * @property  {object} device_info \n * @property  {string} device_info.guid \n * @property  {string} device_info.puc_id \n * @property  {string} device_info.system_id 系统id\n * @property  {string} device_info.device_id 设备id\n * @property  {string} device_info.device_alias 别名\n * @property  {NUMBER_TYPE} device_info.number_type \n * @property  {object} status 设备状态\n * @property  {number} status.online 在线状态\n * @property  {number} status.lock_state 锁定状态 遥晕遥毙之类的\n * @property  {object} staff_info 实名制信息\n * @property  {string} staff_info.staff_name \n */\n\n/**\n * 节点下在线数和总数请求响应结构{@link CMD_DDEVICE_ONLINE_CNT}\n * @typedef {object} DeviceDetailInfoAck\n * @property  {number} result 请求响应\n * @property  {number} online 在线数\n * @property  {number} total 总数\n */\n\n/**\n * 分页获取数据的页码对象\n * @typedef {object} Pagination\n * @property  {number} page_index 当前页码\n * @property  {number} page_size 单页容量\n * \n */\n/**\n * 分页获取设备数据参数结构\n * @typedef {object} DeviceRequest\n * @property  {number} page_index 当前页码\n * @property  {number} page_size 单页容量\n * @property  {string} org_id 请求的节点\n * @property  {string} [key_word] 搜索关键字\n * @property {boolean} [need_gps] 是否需要gps信息，默认false\n * \n */\n/**\n * 新建会议请求参数结构\n * @typedef {object} NewConferenceRequest\n * @property  {string} conference_number 会议号码\n * @property  {string} conference_alias 会议名称\n * @property  {Array.<Device|DispatcherBean>} member_list 成员\n */\n\n/**\n * 动态组结构-给外部使用\n * @typedef {object} DynamicGroup\n * @property  {string} guid 全局唯一标识\n * @property  {string} basedata_id 基础数据对象的统一对外标识信息，能定位到相应的动态组\n * @property  {string} alias 别名\n * @property  {string} number 动态组号码\n * @property  {number} owner 创建者是否是当前调度员 1是0否\n * @property  {number} member_count 成员数量\n * @property  {number} create_time 创建时间\n * @property  {Array.<Device>} [member_list] 成员\n */\n/**\n * 系统派接组结构-给外部使用\n * @typedef {object} SystemPatchGroup\n * @property  {string} guid 全局唯一标识\n * @property  {string} basedata_id 基础数据对象的统一对外标识信息，能定位到相应的动态组\n * @property  {string} alias 别名\n * @property  {string} number 派接组号码\n * @property  {number} owner 创建者是否是当前调度员 1是0否\n * @property  {number} member_count 成员数量\n * @property  {number} create_time 创建时间\n * @property  {Array.<Device>} [member_list] 成员\n */\n\n/**\n * 群组结构-给外部使用\n * @typedef {object} Crosspatch\n * @property  {string} guid 全局唯一标识\n * @property  {string} basedata_id 基础数据对象的统一对外标识信息，能定位到相应的动态组\n * @property  {string} alias 别名\n * @property  {string} number 群组号码\n * @property  {number} owner 群组创建者是否是自己，0否，1是\n * @property  {number} active 是否可用 0不可用 1可用\n * @property  {number} priority 优先级\n * @property  {number} purpose  0：用于呼叫 1：用于短信群聊 2：即能呼叫又能发短信，默认2\n * @property  {number} [speak_timeout] 话权占有超时,每个成员单次占有话权最长时间，默认0，由系统决定，>0由这个值决定\n * @property  {number} [idle_timeout] 空闲超时。群组建立通话后，如果没有任何成员占有话权超过该时间，系统关闭通话\n * @property  {Array.<CrosspatchMember>} member_list 成员\n */\n/**\n * 群组成员（可能是设备、组）结构-给外部使用\n * @typedef {object} CrosspatchMember\n * @property  {string} guid 成员在群组内的id，\n * @property  {string} basedata_id 基础数据对象的统一对外标识信息，能定位到相应的成员\n * @property  {string} target 成员对象的guid，如设备的的guid\n * @property  {string} alias 别名\n * @property  {string} number 成员号码\n * @property  {number} active 是否在前群组激活，即这个成员（组才有）绑定的群组是否是当前群组,一个组同时只能在一个群组内激活\n * @property  {number} priority 优先级（在群组内）\n * @property  {number} grant_mode 话权模式，默认0（ppt话权）其实有四种，默认ppt话权（大部分都是这个），其他的一般用不上，用上再说\n * @property  {number} vox_delay 延迟发送，默认8\n */\n\n/**\n * 会议成员（可能是设备、组、调度员）结构-给外部使用\n * @typedef {object} ConferenceMember\n * @property  {string} guid 成员在会议的标识\n * @property  {string} basedata_id 基础数据对象的统一对外标识信息，能定位到相应的成员\n * @property  {string} alias 别名\n * @property  {string} number 成员号码\n * @property  {string} target 成员全局标识\n * @property  {number} time_slot 车载台或者中转台下组的时隙，预留，暂时不用\n * @property  {number} role 1主持人、0参会人(一期可不用)\n */\n\n/**\n * 会议结构-给外部使用\n * @typedef {object} Conference\n * @property  {string} guid 全局唯一标识\n * @property  {string} basedata_id 基础数据对象的统一对外标识信息，能定位到相应的成员\n * @property  {string} alias 别名\n * @property  {string} number 会议号码\n * @property  {number} owner 会议创建者\n * @property  {Array.<ConferenceMember>} member_list \n */\n/**\n * 列表响应结构-给外部使用\n * @typedef {object} ListAck\n * @property  {string} result 请求结果 0成功其它失败，根据值去确定失败原因\n * @property  {Array} list 请求成功的数据，失败为undefined\n */\n/**\n * 第三方会议结构-给外部使用\n * @typedef {object} ThirdConference\n * @property  {string} guid 全局唯一标识\n * @property  {string} basedata_id 基础数据对象的统一对外标识信息，能定位到相应的成员\n * @property  {string} alias 别名\n * @property  {string} number 会议号码\n * @property  {number} encryption 是否加密 0不加密，1加密，默认0\n * @property  {number} enable 是否可用 0不可用，1可用 默认1\n */\n\n//基础数据相关\nclass BaseData {\n  /**\n    * 存的设备变更回调\n    * @type {Map<string,Function>}\n    */\n  #deviceCBMap = new Map();\n\n  /**\n    * 组变更回调\n    * @type {Map<string,Function>}\n    */\n  #groupCBMap = new Map();\n\n  /**\n    * 存组织架构变更回调\n    * @type {Map<string,Function>}\n    */\n  #orgCBMap = new Map();\n\n  /**\n   * 存系统类别,key是系统id\n   * @type {Map<string,System>}\n   */\n  systemMap = new Map();\n  /**\n    * 存调度员变更回调\n    * @type {Map<string,Function>}\n    */\n  #dispatcherCBMap = new Map();\n\n  /**\n     * 查询节点下在线设备的定时器，\n     */\n  #nodeOnlineCntTimer = undefined;\n  /**\n   * @type {Map<string,Function>}\n   */\n  #userChangeCBMap = new Map();\n\n  /**\n   * 群组变化监听\n   * @type {Map<string,Function>}\n   */\n  #crosspatchChangeCBMap = new Map();\n  /**\n   * 群组成员变化监听\n   * @type {Map<string,Function>}\n   */\n  #crosspatchMemberChangeCBMap = new Map();\n  /**\n   * 存的是群组，key群组guid，value不存任何值，因为，新增群组，服务端也是推的更新群组信令，本地需要暂存一份用来区分新增还是更新的\n   * 考虑到不知群组数量会有多少，用map检索快一点\n   * @type {Map<string,any>}\n   */\n  #crosspatchGuidMap = new Map();\n\n  /**\n   * 动态组变化监听\n   * @type {Map<string,Function>}\n   */\n  #dynamicGroupChangeCBMap = new Map();\n  /**\n   * 动态组成员变化监听\n   * @type {Map<string,Function>}\n   */\n  #dynamicGroupMemberChangeCBMap = new Map();\n  /**\n   * 存的是动态组，key群组guid，value不存任何值，因为，新增群组，服务端也是推的更新群组信令，本地需要暂存一份用来区分新增还是更新的\n   * 考虑到不知群组数量会有多少，用map检索快一点\n   * @type {Map<string,any>}\n   */\n  #dynamicGroupGuidMap = new Map();\n\n  /**\n   * 第三方会议变化监听\n   * @type {Map<string,Function>}\n   */\n  #thirdConferenceChangeCBMap = new Map();\n  /**\n   * 系统派接变化监听\n   * @type {Map<string,Function>}\n   */\n  #SystemPatchChangeCBMap = new Map();\n  pucList = null;\n  basedataPucId = null;\n  constructor() {\n    /**\n    * 存的设备变更回调\n    * @type {Map<string,Function>}\n    */\n    this._deviceCBMap = new Map();\n    this.#install();\n  }\n  /**\n   * 是否已经加载过系统列表\n   */\n  #loadedSystem = false;\n  /**\n   * 初始化，向websocket注册基础数据的信令处理\n   */\n  #install() {\n    //设备相关\n    _protocol_websocket__WEBPACK_IMPORTED_MODULE_6__["default"].registerMessageHandler(CMD_ADD_DEVICE, this);\n    _protocol_websocket__WEBPACK_IMPORTED_MODULE_6__["default"].registerMessageHandler(CMD_UPDATE_DEVICE, this);\n    _protocol_websocket__WEBPACK_IMPORTED_MODULE_6__["default"].registerMessageHandler(CMD_DELETE_DEVICE, this);\n    _protocol_websocket__WEBPACK_IMPORTED_MODULE_6__["default"].registerMessageHandler(CMD_DEVICE_LOCK_STATE, this);\n    _protocol_websocket__WEBPACK_IMPORTED_MODULE_6__["default"].registerMessageHandler(CMD_DEVICE_STATE, this);\n    //组相关\n    _protocol_websocket__WEBPACK_IMPORTED_MODULE_6__["default"].registerMessageHandler(CMD_ADD_GROUP, this);\n    _protocol_websocket__WEBPACK_IMPORTED_MODULE_6__["default"].registerMessageHandler(CMD_UPDATE_GROUP, this);\n    _protocol_websocket__WEBPACK_IMPORTED_MODULE_6__["default"].registerMessageHandler(CMD_DELETE_GROUP, this);\n    //组织架构相关\n    _protocol_websocket__WEBPACK_IMPORTED_MODULE_6__["default"].registerMessageHandler(CMD_ADD_ORG, this);\n    _protocol_websocket__WEBPACK_IMPORTED_MODULE_6__["default"].registerMessageHandler(CMD_UPDATE_ORG, this);\n    _protocol_websocket__WEBPACK_IMPORTED_MODULE_6__["default"].registerMessageHandler(CMD_DELETE_ORG, this);\n    _protocol_websocket__WEBPACK_IMPORTED_MODULE_6__["default"].registerMessageHandler(CMD_DATA_SYNC, this);\n    //调度员相关\n    _protocol_websocket__WEBPACK_IMPORTED_MODULE_6__["default"].registerMessageHandler(CMD_DISPATCHER_ADD, this);\n    _protocol_websocket__WEBPACK_IMPORTED_MODULE_6__["default"].registerMessageHandler(CMD_DISPATCHER_UPDATE, this);\n    _protocol_websocket__WEBPACK_IMPORTED_MODULE_6__["default"].registerMessageHandler(CMD_DISPATCHER_DELETE, this);\n    _protocol_websocket__WEBPACK_IMPORTED_MODULE_6__["default"].registerMessageHandler(CMD_DISPATCHER_STATE, this);\n    // 群组相关\n    _protocol_websocket__WEBPACK_IMPORTED_MODULE_6__["default"].registerMessageHandler(CMD_UPDATE_CROSS_PATCH, this);\n    _protocol_websocket__WEBPACK_IMPORTED_MODULE_6__["default"].registerMessageHandler(CMD_DELETE_CROSS_PATCH, this);\n    _protocol_websocket__WEBPACK_IMPORTED_MODULE_6__["default"].registerMessageHandler(CMD_ADD_CROSS_PATCH_MEMBER, this);\n    _protocol_websocket__WEBPACK_IMPORTED_MODULE_6__["default"].registerMessageHandler(CMD_REMOVE_CROSS_PATCH_MEMBER, this);\n    // 动态组相关\n    _protocol_websocket__WEBPACK_IMPORTED_MODULE_6__["default"].registerMessageHandler(CMD_ADD_DYNAMICGROUP, this);\n    _protocol_websocket__WEBPACK_IMPORTED_MODULE_6__["default"].registerMessageHandler(CMD_ADD_DYNAMICGROUP_MEMBER, this);\n    _protocol_websocket__WEBPACK_IMPORTED_MODULE_6__["default"].registerMessageHandler(CMD_UPDATE_DYNAMICGROUP, this);\n    _protocol_websocket__WEBPACK_IMPORTED_MODULE_6__["default"].registerMessageHandler(CMD_DELETE_DYNAMICGROUP, this);\n    _protocol_websocket__WEBPACK_IMPORTED_MODULE_6__["default"].registerMessageHandler(CMD_REMOVE_DYNAMICGROUP_MEMBER, this);\n    // 系统相关\n    _protocol_websocket__WEBPACK_IMPORTED_MODULE_6__["default"].registerMessageHandler(CMD_ADD_SYSTEM, this);\n    _protocol_websocket__WEBPACK_IMPORTED_MODULE_6__["default"].registerMessageHandler(CMD_UPDATE_SYSTEM, this);\n    _protocol_websocket__WEBPACK_IMPORTED_MODULE_6__["default"].registerMessageHandler(CMD_DELETE_SYSTEM, this);\n    // 第三方会议相关\n    _protocol_websocket__WEBPACK_IMPORTED_MODULE_6__["default"].registerMessageHandler(CMD_ADD_THIRD_CONFERENCE, this);\n    _protocol_websocket__WEBPACK_IMPORTED_MODULE_6__["default"].registerMessageHandler(CMD_UPDATE_THIRD_CONFERENCE, this);\n    _protocol_websocket__WEBPACK_IMPORTED_MODULE_6__["default"].registerMessageHandler(CMD_DELETE_THIRD_CONFERENCE, this);\n    // 派接组相关\n    _protocol_websocket__WEBPACK_IMPORTED_MODULE_6__["default"].registerMessageHandler(CMD_ADD_SYSTEM_PATCH, this);\n    _protocol_websocket__WEBPACK_IMPORTED_MODULE_6__["default"].registerMessageHandler(CMD_UPDATE_SYSTEM_PATCH, this);\n    _protocol_websocket__WEBPACK_IMPORTED_MODULE_6__["default"].registerMessageHandler(CMD_DELETE_SYSTEM_PATCH_MEMBER, this);\n    _protocol_websocket__WEBPACK_IMPORTED_MODULE_6__["default"].registerMessageHandler(CMD_DELETE_SYSTEM_PATCH, this);\n  }\n\n  /**\n   * 请求系统列表\n   */\n  async fetchSystemList() {\n    return new Promise((resolve, reject) => {\n      const param = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.WEB_PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION,\n        cmd_name: CMD_SYSTEM_LIST,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm,\n        // puc_id: dataBase.user.puc_id,\n        puc_id: this.getRequestPucId(),\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id\n      };\n      _protocol_http__WEBPACK_IMPORTED_MODULE_0__["default"].postSync(param).then(resp => {\n        if (resp.result === _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.SUCCESS) {\n          this.#loadedSystem = true;\n          this.systemMap.clear();\n          /**\n           * @type {Array.<System>}\n           */\n          const system_list = resp.system_list;\n          system_list === null || system_list === void 0 ? void 0 : system_list.forEach(item => {\n            this.systemMap.set(`${item.puc_id}@${item.system_id}`, item);\n          });\n          _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'fetchSystemList cached map\', this.systemMap);\n        }\n        resolve();\n      }).catch(err => {\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].error(\'fetchSystemList error\', err);\n        reject();\n      });\n    });\n  }\n  /**\n   * 根据系统id(本地)查询该系统的其他信息\n   * @param {string} system_id \n   * @return {System=}\n   * \n   */\n  querySystemById(puc_id, system_id) {\n    if (!this.#loadedSystem) {\n      return _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.SYSTEM_NOT_FOUND;\n    }\n    return this.systemMap.get(`${puc_id}@${system_id}`);\n  }\n\n  /**\n   * 获取调度员列表\n   * @param {boolean=} [filterSelf] 是否过滤掉自己，默认true\n  \n   */\n  fetchDispatcherList(filterSelf = true) {\n    return new Promise((resolve, reject) => {\n      try {\n        const param = {\n          product_name: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.WEB_PRODUCT_NAME,\n          version: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION,\n          cmd_name: CMD_FETCH_DISPATCHER,\n          cmd_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n          realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm,\n          // puc_id: dataBase.user.puc_id,\n          puc_id: this.getRequestPucId(),\n          user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id\n        };\n        _protocol_http__WEBPACK_IMPORTED_MODULE_0__["default"].postSync(param).then(resp => {\n          var _resp$account_list;\n          //数据处理后再返给外层\n          /**\n           * @type {ListAck}\n           */\n          const newResp = {\n            result: resp.result,\n            list: []\n          };\n          if ((resp === null || resp === void 0 ? void 0 : resp.result) === 0 && ((_resp$account_list = resp.account_list) === null || _resp$account_list === void 0 ? void 0 : _resp$account_list.length) > 0) {\n            var _resp$account_list2;\n            (_resp$account_list2 = resp.account_list) === null || _resp$account_list2 === void 0 ? void 0 : _resp$account_list2.forEach(acc => {\n              //过滤自己\n              const isSelf = acc.dispatcher_account === _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id && acc.puc_id === _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id;\n              //不是自己 或者不过滤自己\n              if (!isSelf || !filterSelf) {\n                var _acc$status;\n                /**\n                * @type {DispatcherBean}\n                */\n                const dispatcher = {};\n                dispatcher.guid = acc.guid;\n                dispatcher.number = acc.dispatcher_account;\n                // dispatcher.realm = acc.realm\n                dispatcher.alias = acc.dispatcher_name;\n                dispatcher.basedata_id = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.genLocalGuid)(acc, _public_constant__WEBPACK_IMPORTED_MODULE_1__.id_key_name.dispatcher);\n                dispatcher.online = (_acc$status = acc.status) === null || _acc$status === void 0 ? void 0 : _acc$status.online;\n                dispatcher.self = isSelf ? 1 : 0;\n                newResp.list.push(dispatcher);\n              }\n            });\n          }\n          resolve(newResp);\n        }).catch(err => {\n          reject(err);\n        });\n      } catch (error) {\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].error(\'fetchDispatcherList catched error\', error);\n        reject(error);\n      }\n    });\n  }\n  /**\n   * 获取动态组列表\n   */\n  fetchDynamicGroupList() {\n    return new Promise((resolve, reject) => {\n      const param = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION,\n        cmd_name: CMD_FETCH_DYNAMICGROUP,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm,\n        // puc_id: dataBase.user.puc_id,\n        puc_id: this.getRequestPucId(),\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n        version_seq: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION_SEQ\n      };\n      _protocol_http__WEBPACK_IMPORTED_MODULE_0__["default"].postSync(param).then(resp => {\n        var _resp$dgna_list;\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'fetchDynamicGroupList succ\', JSON.stringify(resp));\n        /**\n         * @type {ListAck}\n         */\n        const newResp = {\n          result: resp.result,\n          list: []\n        };\n        if (newResp.result === _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.SUCCESS && ((_resp$dgna_list = resp.dgna_list) === null || _resp$dgna_list === void 0 ? void 0 : _resp$dgna_list.length) > 0) {\n          var _resp$dgna_list2;\n          (_resp$dgna_list2 = resp.dgna_list) === null || _resp$dgna_list2 === void 0 ? void 0 : _resp$dgna_list2.forEach(item => {\n            /**\n             * @type {DynamicGroup}\n             */\n            let data = this.#convertDynamicGroup(item);\n            //这里其实是有组成员的，但是成员信息不全，比如没有别名，这里就不返回了，需要的话，单独请求\n            newResp.list.push(data);\n          });\n        }\n        resolve(newResp);\n      }).catch(err => {\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].error(\'fetchDynamicGroupList catched error\', err);\n        reject(err);\n      });\n    });\n  }\n  /**\n   * 获取列表返回的 member_list是个数组，推送过来的的 member_list是个对象\n   * @param {object} data \n   * @returns {DynamicGroup}\n   */\n  #convertDynamicGroup(data) {\n    if (data) {\n      let memberList = data.member_list;\n      _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug("convertDynamicGroup", JSON.stringify(memberList));\n      if (memberList) {\n        if (typeof memberList === \'object\') {\n          _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug("memberList is array");\n        } else if (typeof memberList === \'string\') {\n          _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug("memberList is string");\n          //去掉最后一个 ； 号\n          memberList = memberList.substring(0, memberList.length - 1);\n          memberList = memberList.split(\';\');\n          _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug("convertDynamicGroup", JSON.stringify(memberList));\n        }\n      }\n      return {\n        guid: data.dgna_guid,\n        alias: data.dgna_name || data.dgna_alias,\n        number: data.number,\n        basedata_id: (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.genLocalGuid)(data, \'number\'),\n        owner: data.createpuc_id === _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id && data.dispatcher_account === _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id ? 1 : 0,\n        create_time: data.create_datetime,\n        member_count: memberList ? memberList.length : 0\n      };\n    }\n  }\n\n  /**\n   * 获取动态组成员\n   * @param {object} dynamicGroup \n   * @param {string} dynamicGroup.guid 动态组guid，唯一标识\n   * @param {string} dynamicGroup.number 动态组号码\n   * @param {string} dynamicGroup.basedata_id 动态组基础数据id\n   * @param {string} dynamicGroup.alias 动态组别名\n   */\n  fetchDynamicGroupMember(dynamicGroup) {\n    _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'fetchDynamicGroupMember param\', JSON.stringify(dynamicGroup));\n    if (!dynamicGroup || !dynamicGroup.guid || !dynamicGroup.basedata_id || !dynamicGroup.number) {\n      _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].warn(\'basedata fetchDynamicGroupMember interupt,data\', JSON.stringify(dynamicGroup));\n      return Promise.resolve({\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n      });\n    }\n    return new Promise((resolve, reject) => {\n      const ids = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(dynamicGroup.basedata_id);\n      const param = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION,\n        cmd_name: CMD_FETCH_DYNAMICGROUP_MEMBER,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm,\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id,\n        // puc_id: this.getRequestPucId(),\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n        version_seq: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION_SEQ,\n        dgna_info: {\n          dgna_guid: dynamicGroup.guid,\n          number: dynamicGroup.number,\n          puc_id: ids === null || ids === void 0 ? void 0 : ids.puc_id,\n          dgna_alias: dynamicGroup.alias\n        }\n      };\n      _protocol_http__WEBPACK_IMPORTED_MODULE_0__["default"].postSync(param).then(resp => {\n        var _resp$member_list;\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'fetchDynamicGroupMember succ\', JSON.stringify(resp));\n        /**\n         * @type {ListAck}\n         */\n        const newResp = {\n          result: resp.result,\n          list: []\n        };\n        if (newResp.result === _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.SUCCESS && ((_resp$member_list = resp.member_list) === null || _resp$member_list === void 0 ? void 0 : _resp$member_list.length) > 0) {\n          var _resp$member_list2;\n          (_resp$member_list2 = resp.member_list) === null || _resp$member_list2 === void 0 ? void 0 : _resp$member_list2.forEach(item => {\n            newResp.list.push(this.#convertDynamicGroupMember(item, ids.puc_id, ids.system_id));\n          });\n        }\n        resolve(newResp);\n      }).catch(err => {\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].error(\'fetchDynamicGroupList catched error\', err);\n        reject(err);\n      });\n    });\n  }\n  /**\n   * 将原生动态组的成员转换成通用的设备结构\n   * @param {object} mem 动态组的成员，类型是设备\n   * @param {string} mem.device_guid 设备guid\n   * @param {string} mem.number 设备号码\n   * @param {string} mem.number_type 设备号码类型\n   * @param {string} mem.realm \n   * @param {string} mem.puc_id \n   */\n  #convertDynamicGroupMember(mem, puc_id, system_id) {\n    if (mem) {\n      if (!mem.puc_id) {\n        mem.puc_id = puc_id;\n      }\n      if (!mem.system_id) {\n        mem.system_id = system_id;\n      }\n      return {\n        guid: mem.member_guid,\n        target: mem.device_guid,\n        basedata_id: (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.genLocalGuid)(mem, \'number\'),\n        number: mem.number,\n        alias: mem.alias\n      };\n    }\n  }\n\n  /**\n   * 创建动态组，，其中包含创建动态组和添加成员两个步骤，如果添加成员失败，把添加失败的成员列表返回去\n   * 动态组成员不能跨系统，所有成员以及动态组都属于同一个系统  动态组只能添加本级\n   * @param {object} data \n   * @param {string} data.alias 动态组的别名\n   * @param {string} [data.encryption] 组内通信是否加密 0否 1是 默认1\n   * @param {Array.<Device>} data.member_list 动态组的成员\n   */\n  createDynamicGroup(data) {\n    var _data$member_list;\n    // 必须要有成员才好确定归属的系统，因为system_id这个字段没暴露出去\n    if (!data || !data.alias || !(((_data$member_list = data.member_list) === null || _data$member_list === void 0 ? void 0 : _data$member_list.length) > 0)) {\n      _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].warn(\'basedata createDynamicGroup interupt,data\', JSON.stringify(data));\n      return Promise.resolve({\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n      });\n    }\n    //只允许添加本级终端\n\n    //是否是同一个系统校验\n    let system_id;\n    let puc_id = _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id;\n    for (let member of data.member_list) {\n      var _unPackGuid, _unPackGuid2;\n      const member_systemt_id = (_unPackGuid = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(member.basedata_id)) === null || _unPackGuid === void 0 ? void 0 : _unPackGuid.system_id;\n      const member_puc_id = (_unPackGuid2 = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(member.basedata_id)) === null || _unPackGuid2 === void 0 ? void 0 : _unPackGuid2.puc_id;\n      if (puc_id !== member_puc_id) {\n        // 什么鬼，不能跨级别的\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].warn(\'basedata createDynamicGroup interupt,diff level,found $s and $s\', puc_id, member_puc_id);\n        return Promise.resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.LEVEL_CROSS_ERROR\n        });\n      }\n      if (!system_id) {\n        system_id = member_systemt_id;\n      } else if (system_id !== member_systemt_id) {\n        // 什么鬼，不能跨系统的\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].warn(\'basedata createDynamicGroup interupt,diff system,found $s and $s\', system_id, member_systemt_id);\n        return Promise.resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.SYSTEM_CROSS_ERROR\n        });\n      }\n    }\n    if (data.encryption === undefined) {\n      data.encryption = 1;\n    }\n    //加密参数过滤\n    if (data.encryption < 0) {\n      data.encryption = 0;\n    }\n    if (data.encryption > 1) {\n      data.encryption = 1;\n    }\n    return new Promise((resolve, reject) => {\n      const guid = _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid();\n      const param = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION,\n        cmd_name: CMD_ADD_DYNAMICGROUP,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id,\n        system_id: system_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n        dgna_guid: guid,\n        dgna_alias: data.alias,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm,\n        dispatcher_account: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n        end2endencryption: data.encryption,\n        createpuc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id\n      };\n      const ret = {\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.SUCCESS\n      };\n      _protocol_http__WEBPACK_IMPORTED_MODULE_0__["default"].postSync(param).then(res => {\n        ret.result = res.result;\n        if (res.result === _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.SUCCESS) {\n          var _data$member_list2;\n          ret.guid = guid;\n          // todo 组装成员\n          const promiseArr = [];\n          if (((_data$member_list2 = data.member_list) === null || _data$member_list2 === void 0 ? void 0 : _data$member_list2.length) > 0) {\n            data.member_list.forEach(member => {\n              promiseArr.push(this.addDynamicGroupMember({\n                dgna_guid: guid,\n                target_guid: member.guid,\n                target_basedata_id: member.basedata_id,\n                target_number: member.number\n              }));\n            });\n          }\n          // 有成员，添加成员\n          if (promiseArr.length > 0) {\n            Promise.all([promiseArr]);\n          } else {\n            //没有成员，直接返回结果\n            resolve(ret);\n          }\n        } else {\n          // 创建动态组失败\n          resolve(ret);\n        }\n      }).then(res => {\n        // 添加成员结果,只要有一个失败就认为是失败\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].warn(\'basedata createDynamicGroup addmember all finished,resp\', res);\n        res === null || res === void 0 ? void 0 : res.forEach(resp => {\n          if (resp.result != _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.SUCCESS) {\n            ret.result = resp.result;\n          }\n        });\n        resolve(ret);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n  /**\n   * 动态组添加成员\n   * @param {object} data \n   * @param {string} data.dgna_guid 动态组guid\n   * @param {string} [data.dgna_basedata_id] 动态组的basedata_id\n   * @param {string} data.target_guid 要添加的成员的guid\n   * @param {string} data.target_basedata_id 要添加的成员的基础数据id\n   * @param {string} data.target_number 要添加的成员的号码\n   */\n  addDynamicGroupMember(data) {\n    if (!data || !data.dgna_guid || !data.target_guid || !data.target_basedata_id || !data.target_number) {\n      _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].warn(\'basedata addDynamicGroupMember interupt,data\', JSON.stringify(data));\n      return Promise.resolve({\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n      });\n    }\n    const member_ids = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(data.target_basedata_id);\n    // 检测是否跨系统，因为sdk开始没有这个参数\n    if (data.dgna_basedata_id) {\n      const group_ids = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(data.dgna_basedata_id);\n      if (group_ids.system_id !== member_ids.system_id) {\n        return Promise.resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.SYSTEM_CROSS_ERROR\n        });\n      }\n    }\n    if (_public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id !== member_ids.puc_id) {\n      // 什么鬼，不能跨级别的，只能添加本级的。\n      _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].warn(\'basedata createSystemPatch interupt,diff level,found $s and $s\', puc_id, member_ids.puc_id);\n      return Promise.resolve({\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.LEVEL_CROSS_ERROR\n      });\n    }\n    return new Promise((resolve, reject) => {\n      const guid = _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid();\n      const param = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION,\n        cmd_name: CMD_ADD_DYNAMICGROUP_MEMBER,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm,\n        dgna_guid: data.dgna_guid,\n        device_guid: data.target_guid,\n        member_guid: guid,\n        number: data.target_number,\n        number_type: member_ids === null || member_ids === void 0 ? void 0 : member_ids.number_type,\n        system_id: member_ids === null || member_ids === void 0 ? void 0 : member_ids.system_id\n      };\n      _protocol_http__WEBPACK_IMPORTED_MODULE_0__["default"].postSync(param).then(resp => {\n        const simpleResp = {};\n        simpleResp.result = resp.result;\n        if (simpleResp.result === _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.SUCCESS) {\n          simpleResp.member_guid = guid;\n        }\n        resolve(simpleResp);\n      }).catch(err => {\n        // reject(err)\n        // 这里不抛reject 返回添加成员失败的错误，避免 无法区分是 创建动态组的reject 还是 添加成员的 reject\n        resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.MEMBER_ADD_ERROE\n        });\n      });\n    });\n  }\n  /**\n   * 更新动态组,只能修改动态组的信息，不能修改成员相关信息\n   * @param {object} data\n   * @param {string} data.guid 动态组的guid，不可更改\n   * @param {string} data.number 动态组的号码，不可更改\n   * @param {string} data.basedata_id 动态组的基础数据id，不可更改\n   * @param {string} data.alias 动态组的别名，可以更改\n   * @param {string} data.encryption 动态组是否加密 可以更改\n   *  \n   */\n  updateDynamicGroup(data) {\n    if (!data || !data.guid || !data.number || !data.basedata_id) {\n      _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].warn(\'basedata updateDynamicGroup interupt,param\', JSON.stringify(data));\n      return Promise.resolve({\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n      });\n    }\n    if (data.encryption === undefined) {\n      data.encryption = 1;\n    }\n    //加密参数过滤\n    if (data.encryption < 0) {\n      data.encryption = 0;\n    }\n    if (data.encryption > 1) {\n      data.encryption = 1;\n    }\n    return new Promise((resolve, reject) => {\n      const ids = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(data.basedata_id);\n      const param = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION,\n        cmd_name: CMD_UPDATE_DYNAMICGROUP,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id,\n        system_id: ids.system_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm,\n        dgna_guid: data.guid,\n        number: data.number,\n        dgna_alias: data.alias,\n        dispatcher_account: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n        end2endencryption: data.encryption\n      };\n      _protocol_http__WEBPACK_IMPORTED_MODULE_0__["default"].postSync(param).then(resp => {\n        resolve({\n          result: resp.result\n        });\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  }\n  /**\n     * 删除动态组\n     * @param {object} data\n     * @param {string} data.guid 动态组的guid，不可更改\n     * @param {string} data.basedata_id 动态组的基础数据id，不可更改\n     *  \n     */\n  deleteDynamicGroup(data) {\n    if (!data || !data.guid || !data.basedata_id) {\n      _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].warn(\'basedata deleteDynamicGroup interupt,param\', JSON.stringify(data));\n      return Promise.resolve({\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n      });\n    }\n    return new Promise((resolve, reject) => {\n      const ids = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(data.basedata_id);\n      const param = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION,\n        cmd_name: CMD_DELETE_DYNAMICGROUP,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id,\n        system_id: ids.system_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm,\n        dgna_guid: data.guid,\n        number_type: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.number_type\n        // dgna_alias: data.alias,\n        // dispatcher_account: dataBase.user.user_id,\n        // end2endencryption: data.encryption\n      };\n\n      _protocol_http__WEBPACK_IMPORTED_MODULE_0__["default"].postSync(param).then(resp => {\n        resolve({\n          result: resp.result\n        });\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  }\n  /**\n    * 移除动态组成员\n    * @param {object} data\n    * @param {string} data.guid 动态组的guid\n    * @param {string} data.member_guid 动态组成员在组内的guid\n    * @param {string} data.basedata_id 动态组成员的基础数据id\n    *  \n    */\n  removeDynamicGroupMember(data) {\n    if (!data || !data.guid || !data.member_guid || !data.basedata_id) {\n      _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].warn(\'basedata deleteDynamicGroupMember interupt,param\', JSON.stringify(data));\n      return Promise.resolve({\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n      });\n    }\n    return new Promise((resolve, reject) => {\n      const ids = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(data.basedata_id);\n      const param = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION,\n        cmd_name: CMD_REMOVE_DYNAMICGROUP_MEMBER,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id,\n        system_id: ids.system_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm,\n        dgna_guid: data.guid,\n        member_guid: data.member_guid\n        // dgna_alias: data.alias,\n        // dispatcher_account: dataBase.user.user_id,\n        // end2endencryption: data.encryption\n      };\n\n      _protocol_http__WEBPACK_IMPORTED_MODULE_0__["default"].postSync(param).then(resp => {\n        resolve({\n          result: resp.result\n        });\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  }\n  /**\n   * \n   * @param {Array.<OrgNode>} array \n   * @param {OrgNode} rootObj \n   * @returns \n   */\n  orderOrg(array, rootObj) {\n    var _rootObj$children;\n    if ((array === null || array === void 0 ? void 0 : array.length) === 0) {\n      return;\n    }\n    const currentNodeId = rootObj.org_identifier;\n    const orderCount = currentNodeId.split(\'-\').length;\n    //原数组处理掉的的元素index\n    let handledArray = [];\n    array.forEach((element, index) => {\n      var _element$org_identifi, _element$org_identifi2, _element$org_identifi3;\n      // 为当前下一级\n      if (element !== null && element !== void 0 && (_element$org_identifi = element.org_identifier) !== null && _element$org_identifi !== void 0 && _element$org_identifi.startsWith(currentNodeId) && (element === null || element === void 0 ? void 0 : (_element$org_identifi2 = element.org_identifier) === null || _element$org_identifi2 === void 0 ? void 0 : (_element$org_identifi3 = _element$org_identifi2.split(\'-\')) === null || _element$org_identifi3 === void 0 ? void 0 : _element$org_identifi3.length) === orderCount + 1) {\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'find child: %s of %s\', element === null || element === void 0 ? void 0 : element.org_identifier, currentNodeId);\n        if (rootObj.children === undefined || rootObj.children === null) {\n          rootObj.children = [];\n        }\n        rootObj.children.push(element);\n        handledArray.push(index);\n      }\n    });\n    //这里删除已经进入节点的元素，减少循环的次数\n    // logInstance.debug("orderOrg", JSON.stringify(array));\n    handledArray.forEach((item, index) => {\n      _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug("orderOrg item", item);\n      _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug("orderOrg index", index);\n      // 删除第 item - index ，这个已经添加为子节点了。 \n      array.splice(item - index, 1);\n    });\n    (_rootObj$children = rootObj.children) === null || _rootObj$children === void 0 ? void 0 : _rootObj$children.forEach(element => {\n      this.orderOrg(array, element);\n    });\n  }\n\n  /**\n   * 获取组织架构列表\n   * @param {object} data\n   * @param {boolean=} [data.flat] 默认true，false返回的是树状结构，org是根节点，true返回的org是节点数组\n   * @param {string=} [data.key_word] 关键字，有就搜索，没有就全量返回\n   * @returns \n   */\n  fetchSystemOrg(data) {\n    _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'basedata fetchSystemOrg param = \', data);\n    if (!data) {\n      data = {\n        flat: true\n      };\n    }\n    //默认值\n    if (data.flat === undefined) {\n      data.flat = true;\n    }\n    return new Promise((resolve, reject) => {\n      try {\n        const param = {\n          product_name: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.WEB_PRODUCT_NAME,\n          version: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION,\n          version_seq: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION_SEQ,\n          cmd_name: CMD_FETCH_FRAMEWORK,\n          cmd_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n          realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm,\n          // puc_id: dataBase.user.puc_id,\n          puc_id: this.getRequestPucId(),\n          user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n          is_user_auth_org: 1\n        };\n        _protocol_http__WEBPACK_IMPORTED_MODULE_0__["default"].postSync(param).then(resp => {\n          //数据处理后再返给外层\n          _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'basedata fetchSystemOrg,resp\', JSON.stringify(resp));\n          const newResp = {\n            result: resp.result\n          };\n          if ((resp === null || resp === void 0 ? void 0 : resp.result) === 0) {\n            var _resp$org_short_info, _data2, _data3;\n            if (data.key_word && (resp === null || resp === void 0 ? void 0 : (_resp$org_short_info = resp.org_short_info) === null || _resp$org_short_info === void 0 ? void 0 : _resp$org_short_info.length) > 0) {\n              resp.org_short_info = resp === null || resp === void 0 ? void 0 : resp.org_short_info.filter(item => {\n                var _item$org_alias, _data;\n                return (_item$org_alias = item.org_alias) === null || _item$org_alias === void 0 ? void 0 : _item$org_alias.includes((_data = data) === null || _data === void 0 ? void 0 : _data.key_word);\n              });\n            }\n            if ((_data2 = data) !== null && _data2 !== void 0 && _data2.flat || (_data3 = data) !== null && _data3 !== void 0 && _data3.key_word) {\n              //有关键字只能返回平铺数组，因为过滤的时候不能保留关键字节点的父节点\n              newResp.org = resp === null || resp === void 0 ? void 0 : resp.org_short_info;\n            } else {\n              var _resp$org_short_info2;\n              let header = resp === null || resp === void 0 ? void 0 : (_resp$org_short_info2 = resp.org_short_info) === null || _resp$org_short_info2 === void 0 ? void 0 : _resp$org_short_info2.find(item => (item === null || item === void 0 ? void 0 : item.org_identifier) === NODE_ROOT_KEY);\n              this.orderOrg(resp === null || resp === void 0 ? void 0 : resp.org_short_info, header);\n              newResp.org = header;\n            }\n          }\n          resolve(newResp);\n        }).catch(err => {\n          reject(err);\n        });\n      } catch (error) {\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].error(\'fetchSystemOrg catched error\', error);\n        reject(err);\n      }\n    });\n  }\n  /**\n   * 分页获取设备列表,再查询订阅上报状态一并返回\n   * @param {DeviceRequest} request_param 分页配置 \n   * @return {Promise.<DeviceListResp>}\n   */\n  fetchDeviceList(request_param) {\n    if (!request_param || !request_param.page_index || !request_param.page_size) {\n      _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'sdk bd fetchDeviceList interupt\', JSON.stringify(request_param));\n      return Promise.resolve({\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n      });\n    }\n    // if (request_param.org_id === undefined) {\n    //   request_param.org_id = \'\'\n    // }\n\n    return new Promise((resolve, reject) => {\n      try {\n        /**\n        * 返给sdk外的响应\n        * @type {DeviceListResp}\n        */\n        const newResp = {};\n        const param = {\n          product_name: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.PRODUCT_NAME,\n          version: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION,\n          version_seq: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION_SEQ,\n          token: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.token,\n          cmd_name: CMD_FETCH_DEVICE,\n          cmd_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n          realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm,\n          // puc_id: dataBase.user.puc_id,\n          puc_id: this.getRequestPucId(),\n          user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n          per_page: request_param.page_size,\n          page_num: request_param.page_index,\n          current_org_id: request_param.org_id,\n          is_fuzzy_qry: request_param.key_word ? _public_constant__WEBPACK_IMPORTED_MODULE_1__.fuzzyQry.y : _public_constant__WEBPACK_IMPORTED_MODULE_1__.fuzzyQry.n,\n          querykey: request_param.key_word,\n          is_user_auth_org: 1\n        };\n        _protocol_http__WEBPACK_IMPORTED_MODULE_0__["default"].postSync(param).then(resp => {\n          var _resp$device_list;\n          //数据处理后再返给外层\n          newResp.result = resp === null || resp === void 0 ? void 0 : resp.result;\n          newResp.device_cnt = resp === null || resp === void 0 ? void 0 : resp.device_cnt;\n          newResp.device_list = [];\n          newResp.page_cnt = resp === null || resp === void 0 ? void 0 : resp.page_cnt;\n          resp === null || resp === void 0 ? void 0 : (_resp$device_list = resp.device_list) === null || _resp$device_list === void 0 ? void 0 : _resp$device_list.forEach(item => {\n            var _item$staff_short_inf, _item$status, _item$status2, _item$status3;\n            newResp.device_list.push({\n              guid: item.guid,\n              basedata_id: (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.genLocalGuid)(item, _public_constant__WEBPACK_IMPORTED_MODULE_1__.id_key_name.device),\n              number: item.device_id,\n              certified_name: (_item$staff_short_inf = item.staff_short_info) === null || _item$staff_short_inf === void 0 ? void 0 : _item$staff_short_inf.staff_name,\n              longitude: item.longitude,\n              latitude: item.latitude,\n              alias: item.device_alias,\n              device_type: item.device_type,\n              status: {\n                lock_state: (_item$status = item.status) === null || _item$status === void 0 ? void 0 : _item$status.lock_state,\n                narrowband: (_item$status2 = item.status) === null || _item$status2 === void 0 ? void 0 : _item$status2.online,\n                broadband: (_item$status3 = item.status) === null || _item$status3 === void 0 ? void 0 : _item$status3.poc_online\n              }\n            });\n          });\n          _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'sdk bd fetchDeviceList need gps?\', request_param === null || request_param === void 0 ? void 0 : request_param.need_gps);\n          // 需要gps就去拉\n          if (request_param !== null && request_param !== void 0 && request_param.need_gps) {\n            var _resp$device_list2;\n            // 查询gps信息\n            const devices = [];\n            resp === null || resp === void 0 ? void 0 : (_resp$device_list2 = resp.device_list) === null || _resp$device_list2 === void 0 ? void 0 : _resp$device_list2.forEach(item => {\n              devices.push({\n                puc_id: item.puc_id,\n                system_id: item.system_id,\n                device_id: item.device_id,\n                device_type: item.number_type\n              });\n            });\n            this.queryGpsInfo(devices).then(gpsResp => {\n              _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'basedata queryGpsInfo resp:\', JSON.stringify(gpsResp));\n              gpsResp === null || gpsResp === void 0 ? void 0 : gpsResp.list.forEach(gps => {\n                const target = newResp.device_list.find(device => {\n                  const ids = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(device.basedata_id);\n                  if (ids) {\n                    return gps.puc_id === ids.puc_id && gps.system_id === ids.system_id && gps.device_id === ids.what_id && gps.device_type === ids.number_type;\n                  }\n                  return false;\n                });\n                if (target) {\n                  target.status.subscribe = gps.is_sub;\n                  //有订阅才有订阅周期字段，暂不考虑有些设备不订阅也会上报gps的情况\n                  if (target.status.subscribe === 1) {\n                    target.subscribe = {\n                      interval: gps.interval_time\n                    };\n                  }\n                }\n              });\n              resolve(newResp);\n            }).catch(err => {\n              //gps请求出错了，照样返回数据，不要阻塞\n              _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'basedata queryGpsInfo err:\', err);\n              resolve(newResp);\n            });\n          } else {\n            resolve(newResp);\n          }\n          // this.startQueryOnlineCnt(request_param.org_id)\n        }).catch(err => {\n          reject(err);\n        });\n      } catch (error) {\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].error(\'fetchDeviceList catched error\', error);\n        reject(err);\n      }\n    });\n  }\n  /**\n   * 轮询这个节点的在线数/总数,这个功能暂时没想好怎么处理合适，先不启用，让外部自己查吧\n   * @param {string} [org_id] \n   */\n  startQueryOnlineCnt(org_id) {\n    if (!org_id) {\n      _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'basedata startQueryOnlineCnt return \');\n      return;\n    }\n    if (this.#nodeOnlineCntTimer) {\n      _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'basedata clear last timer\');\n      clearInterval(this.#nodeOnlineCntTimer);\n      this.#nodeOnlineCntTimer = undefined;\n    }\n    _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'basedata set new timer\');\n    this.#nodeOnlineCntTimer = setInterval(() => {\n      this.queryDeviceOnlineInfo(org_id);\n    }, _public_constant__WEBPACK_IMPORTED_MODULE_1__.ORG_ONLINE_CNT_INTERVAL);\n  }\n  /**-\n   * 查询设备信息\n   * @param {object} data\n   * @param {string} data.basedata_id 设备号码\n   * @property {boolean} [data.need_gps] 是否需要gps信息，默认false\n   */\n  queryDeviceInfo(data) {\n    _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'basedata queryDeviceInfo param\', JSON.stringify(data));\n    return new Promise((resolve, reject) => {\n      const ids = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(data.basedata_id);\n      if (!ids || !ids.puc_id || !ids.system_id || !ids.what_id) {\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].warn(\'queryDeviceInfo invalid param:\', JSON.stringify(ids));\n        resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n        });\n        return;\n      }\n      const param = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.WEB_PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION,\n        cmd_name: CMD_QUERY_DEVICE_INFO,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n        token: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.token,\n        puc_id: ids.puc_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm,\n        device_id: ids.what_id,\n        system_id: ids.system_id\n      };\n      _protocol_http__WEBPACK_IMPORTED_MODULE_0__["default"].postSync(param).then(( /**@type {DeviceDetailInfoAck}*/resp) => {\n        const deviceInfo = {\n          result: resp.result,\n          device: null\n        };\n        if (resp.result === _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.SUCCESS) {\n          var _resp$device_info$sta, _resp$device_info$sta2, _resp$device_info$sta3, _resp$device_info$sta4;\n          /**\n           * @type {Device}\n           */\n          const device_info = {\n            guid: resp.device_info.guid,\n            basedata_id: (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.genLocalGuid)(resp.device_info, _public_constant__WEBPACK_IMPORTED_MODULE_1__.id_key_name.device),\n            number: resp.device_info.device_id,\n            certified_name: (_resp$device_info$sta = resp.device_info.staff_short_info) === null || _resp$device_info$sta === void 0 ? void 0 : _resp$device_info$sta.staff_name,\n            longitude: resp.device_info.longitude,\n            latitude: resp.device_info.latitude,\n            alias: resp.device_info.device_alias,\n            device_type: resp.device_info.device_type,\n            status: {\n              lock_state: (_resp$device_info$sta2 = resp.device_info.status) === null || _resp$device_info$sta2 === void 0 ? void 0 : _resp$device_info$sta2.lock_state,\n              narrowband: (_resp$device_info$sta3 = resp.device_info.status) === null || _resp$device_info$sta3 === void 0 ? void 0 : _resp$device_info$sta3.online,\n              broadband: (_resp$device_info$sta4 = resp.device_info.status) === null || _resp$device_info$sta4 === void 0 ? void 0 : _resp$device_info$sta4.poc_online\n            }\n          };\n          deviceInfo.device = device_info;\n          if (data !== null && data !== void 0 && data.need_gps) {\n            // 查询gps信息\n            const devices = [];\n            devices.push({\n              puc_id: resp.device_info.puc_id,\n              system_id: resp.device_info.system_id,\n              device_id: resp.device_info.device_id,\n              device_type: resp.device_info.number_type\n            });\n            this.queryGpsInfo(devices).then(gpsResp => {\n              _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'basedata queryGpsInfo resp:\', JSON.stringify(gpsResp));\n              gpsResp === null || gpsResp === void 0 ? void 0 : gpsResp.list.forEach(gps => {\n                const target = devices.find(device => {\n                  return gps.puc_id === device.puc_id && gps.system_id === device.system_id && gps.device_id === device.device_id && gps.device_type === device.device_type;\n                });\n                if (target) {\n                  deviceInfo.device.status.subscribe = gps.is_sub;\n                  //有订阅才有订阅周期字段，暂不考虑有些设备不订阅也会上报gps的情况\n                  if (deviceInfo.device.status.subscribe === 1) {\n                    deviceInfo.device.subscribe = {\n                      interval: gps.interval_time\n                    };\n                  }\n                }\n              });\n              resolve(deviceInfo);\n            }).catch(err => {\n              //gps请求出错了，照样返回数据，不要阻塞\n              _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'basedata queryGpsInfo err:\', err);\n              resolve(deviceInfo);\n            });\n          } else {\n            // 不需要传 GPS\n            resolve(deviceInfo);\n          }\n          //todo\n        } else {\n          // result 不为 0\n          resolve(deviceInfo);\n        }\n      }).catch(err => {\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].error(\'queryDeviceInfo fail error:\', err);\n        reject(err);\n      });\n    });\n  }\n  /**\n   * 获取某一组织架构节点下的在线设备数\n   * @param {string} [org_id] \n   * @return {Promise.<DeviceOnlineCntResp>|undefined}\n   */\n  queryDeviceOnlineInfo(org_id) {\n    return new Promise((resolve, reject) => {\n      /**\n       * @type {DeviceOnlineCntResp}\n       */\n      const localResp = {};\n      let param;\n      // if (!self) {\n      param = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.WEB_PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION,\n        cmd_name: CMD_DEVICE_ONLINE_CNT,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n        // puc_id: dataBase.user.puc_id,\n        puc_id: this.getRequestPucId(),\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm,\n        org_id: org_id\n      };\n      // } else {\n      // param = {\n      //   product_name: api_constant.WEB_PRODUCT_NAME,\n      //   version: api_constant.VERSION,\n      //   cmd_name: CMD_DEVICE_ONLINE_CNT_SELF,\n      //   cmd_guid: common.guid(),\n      //   puc_id: dataBase.user.puc_id,\n      //   user_id: dataBase.user.user_id,\n      //   realm: dataBase.user.realm,\n      //   org_id: org_id,\n      //   qry_puc_id: dataBase.user.puc_id,//查询目标的，可能涉及多级\n      //   qry_realm: dataBase.user.realm,\n      // }\n      // }\n\n      _protocol_http__WEBPACK_IMPORTED_MODULE_0__["default"].postSync(param).then(resp => {\n        localResp.result = resp.result;\n        localResp.online_cnt = resp.online_cnt;\n        localResp.total_cnt = resp.total_cnt;\n        resolve(localResp);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n  /**\n   * 分页获取组列表\n   * @param {DeviceRequest} request_param 分页信息 \n   * @return {Promise.<GroupListResp>}\n   */\n  fetchGroupList(request_param) {\n    if (!request_param || !request_param.page_index || !request_param.page_size) {\n      _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].warn(\'basedata fetchGroupList interupt,param\', JSON.stringify(request_param));\n      return Promise.resolve({\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n      });\n    }\n    return new Promise((resolve, reject) => {\n      try {\n        /**\n        * @type {GroupListResp}\n        */\n        const newResp = {};\n        const param = {\n          product_name: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.PRODUCT_NAME,\n          version: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION,\n          version_seq: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION_SEQ,\n          cmd_name: CMD_FETCH_GROUP,\n          cmd_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n          realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm,\n          // puc_id: dataBase.user.puc_id,\n          puc_id: this.getRequestPucId(),\n          user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n          per_page: request_param.page_size,\n          page_num: request_param.page_index,\n          current_org_id: request_param.org_id,\n          is_fuzzy_qry: request_param.key_word ? _public_constant__WEBPACK_IMPORTED_MODULE_1__.fuzzyQry.y : _public_constant__WEBPACK_IMPORTED_MODULE_1__.fuzzyQry.n,\n          querykey: request_param.key_word,\n          is_user_auth_org: 1\n        };\n        _protocol_http__WEBPACK_IMPORTED_MODULE_0__["default"].postSync(param).then(resp => {\n          var _resp$group_info_list;\n          _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'basedata fetchGroupList resp:\', JSON.stringify(resp));\n          newResp.result = resp.result;\n          newResp.group_cnt = resp === null || resp === void 0 ? void 0 : resp.group_cnt;\n          newResp.page_cnt = resp === null || resp === void 0 ? void 0 : resp.page_cnt;\n          newResp.group_list = [];\n          resp === null || resp === void 0 ? void 0 : (_resp$group_info_list = resp.group_info_list) === null || _resp$group_info_list === void 0 ? void 0 : _resp$group_info_list.forEach(group => {\n            newResp.group_list.push({\n              guid: group.guid,\n              basedata_id: (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.genLocalGuid)(group, _public_constant__WEBPACK_IMPORTED_MODULE_1__.id_key_name.group),\n              number: group.group_id,\n              alias: group.group_alias,\n              multi_talker: group.multi_talker\n            });\n          });\n          resolve(newResp);\n        }).catch(err => {\n          reject(err);\n        });\n      } catch (error) {\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].error(\'fetchGroupList catched error\', error);\n        reject(err);\n      }\n    });\n  }\n  /**\n   * 获取组成员列表\n   * @param {object} data \n   * @param {string} data.basedata_id \n   */\n  async fetchGroupMember(data) {\n    var _ids;\n    //兼容老版本直接传basedata_id,而不是以对象传进来\n    var ids;\n    if (typeof data === \'string\') {\n      ids = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(data);\n    } else {\n      ids = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(data.basedata_id);\n    }\n    _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].info(\'fetchGroupMember unpack\', ids);\n    if (!ids) {\n      return Promise.resolve({\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n      });\n    }\n    let sys = await this.querySystemById(ids.puc_id, (_ids = ids) === null || _ids === void 0 ? void 0 : _ids.system_id);\n    if (sys === undefined) {\n      return Promise.resolve({\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.SYSTEM_NOT_FOUND\n      });\n    }\n    return new Promise((resolve, reject) => {\n      let param;\n      _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].info(\'fetchGroupMember  dataBase.user \', _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user);\n      //mcs系统类型信令不一样\n      if (sys.system_type === _public_constant__WEBPACK_IMPORTED_MODULE_1__.SYSTEM_TYPE.MCS) {\n        param = {\n          product_name: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.WEB_PRODUCT_NAME,\n          version: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION,\n          version_seq: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION_SEQ,\n          cmd_name: CMD_FETCH_GROUP_MEMBER_2,\n          cmd_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n          // puc_id: dataBase.user.puc_id,\n          puc_id: ids.puc_id,\n          user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n          realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm,\n          system_id: ids.system_id,\n          group_id: ids.what_id\n        };\n      } else {\n        param = {\n          product_name: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.WEB_PRODUCT_NAME,\n          version: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION,\n          cmd_name: CMD_FETCH_GROUP_MEMBER,\n          realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm,\n          cmd_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n          // puc_id: dataBase.user.puc_id,\n          puc_id: ids.puc_id,\n          user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n          version_seq: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION_SEQ,\n          system_id: ids.system_id,\n          // todo 这个存疑，应该是指群所属的system_id\n          group_id: ids.what_id,\n          target: {\n            number: ids.what_id,\n            number_type: ids.number_type\n          }\n        };\n      }\n      _protocol_http__WEBPACK_IMPORTED_MODULE_0__["default"].postSync(param).then(resp => {\n        var _memberList;\n        let memberList;\n        if ((resp === null || resp === void 0 ? void 0 : resp.cmd_name) === `${CMD_FETCH_GROUP_MEMBER}_ack`) {\n          memberList = resp === null || resp === void 0 ? void 0 : resp.member_list;\n        } else if ((resp === null || resp === void 0 ? void 0 : resp.cmd_name) === `${CMD_FETCH_GROUP_MEMBER_2}_ack`) {\n          var _resp$group_member;\n          memberList = resp === null || resp === void 0 ? void 0 : (_resp$group_member = resp.group_member) === null || _resp$group_member === void 0 ? void 0 : _resp$group_member.member;\n        }\n        memberList = (_memberList = memberList) === null || _memberList === void 0 ? void 0 : _memberList.map(item => {\n          const itemIds = {\n            ...ids\n          };\n          itemIds.what_id = item.number;\n          itemIds.number_type = item.number_type;\n          //一般的组，以防没有带下来\n          if (itemIds.number_type === undefined && ids.number_type === _public_constant__WEBPACK_IMPORTED_MODULE_1__.NUMBER_TYPE.GROUP) {\n            itemIds.number_type = _public_constant__WEBPACK_IMPORTED_MODULE_1__.NUMBER_TYPE.INDIVIDUAL;\n          }\n          // roip组，以防没有带下来\n          if (itemIds.number_type === undefined && ids.number_type === _public_constant__WEBPACK_IMPORTED_MODULE_1__.NUMBER_TYPE.ROIP_GROUP) {\n            itemIds.number_type = _public_constant__WEBPACK_IMPORTED_MODULE_1__.NUMBER_TYPE.ROIP_INDIVIDUAL;\n          }\n          return {\n            number: item.number,\n            alias: item.number_alias || item.alias,\n            //这个字段不一定有的\n            basedata_id: (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.genLocalGuid)(itemIds, \'what_id\')\n          };\n        });\n        resolve({\n          result: resp.result,\n          member_list: memberList\n        });\n      }).catch(err => {\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].error(\'sdk bd fetchGroupMember error\', err);\n        reject(err);\n      });\n    });\n  }\n  /**\n   * 跟据传入的设备数组查询gps数据\n   * @param {string[]} deviceList \n   * @returns {Promise}\n   */\n  queryGpsInfo(deviceList) {\n    const param = {\n      product_name: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.PRODUCT_NAME,\n      version: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION,\n      cmd_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n      cmd_name: \'gps_query_gps_is_subscribe\',\n      user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n      realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm,\n      devices: deviceList\n    };\n    return _protocol_http__WEBPACK_IMPORTED_MODULE_0__["default"].postSync(param);\n  }\n  /**\n   * 请求全部会议列表，只能获取到自己创建的   所以上级拉不到下级创建的会议\n   * @returns {Promise.<ListAck>}\n   */\n  fetchConference() {\n    return new Promise((resolve, reject) => {\n      const param = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION,\n        version_seq: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION_SEQ,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n        cmd_name: CMD_FETCH_CONFERENCE,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm,\n        // puc_id: dataBase.user.puc_id\n        puc_id: this.getRequestPucId()\n      };\n      _protocol_http__WEBPACK_IMPORTED_MODULE_0__["default"].postSync(param).then(resp => {\n        var _resp$conference_list;\n        /**\n         * @type {ListAck}\n         */\n        const newResp = {\n          result: resp.result,\n          list: []\n        };\n        if (newResp.result === _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.SUCCESS && ((_resp$conference_list = resp.conference_list) === null || _resp$conference_list === void 0 ? void 0 : _resp$conference_list.length) > 0) {\n          /**\n           * @type {Array.<Conference>}\n           */\n          resp.conference_list.forEach(item => {\n            //会议字段\n            newResp.list.push({\n              ...this.#convertConference(item),\n              dispatcher_account: item.dispatcher_account\n            });\n            // 成员字段\n            // if (item.memberList?.length > 0) {\n            //   newResp.list.member_list = []\n            //   item.memberList.forEach(mem => {\n            //     newResp.list.member_list.push(this.#convertConferenceMember(mem))\n            //   })\n            // }\n          });\n        }\n\n        resolve(newResp);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n  /**\n   * 把服务端返回的对象结构转换成本地对象结构---会议\n   * @param {object} data \n   * @param {string} data.conference_guid\n   * @param {string} data.conference_number\n   * @param {string} data.puc_id\n   * @param {string} data.conference_alias\n   * @param {string} data.dispatcher_account\n   * @param {string} data.status\n   * @param {string} data.realm\n   * @param {string} data.call_after_interval\n   * @param {string} data.video_mix_model\n   * @param {string} data.vox_delay\n   * \n   * @return {Conference|undefined}\n   */\n  #convertConference(data) {\n    if (data) {\n      if (data.number_type === undefined) {\n        data.number_type = _public_constant__WEBPACK_IMPORTED_MODULE_1__.NUMBER_TYPE.CONFERENCE;\n      }\n      _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'convertConference \', data);\n      return {\n        guid: data === null || data === void 0 ? void 0 : data.conference_guid,\n        basedata_id: (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.genLocalGuid)(data, \'conference_number\'),\n        number: data.conference_number,\n        alias: data.conference_alias,\n        owner: data.dispatcher_account === _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id && data.puc_id === _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id && data.realm === _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm ? 1 : 0\n      };\n    }\n  }\n  /**\n  * 把服务端返回的对象结构转换成本地对象结构---会议成员\n  * @param {object} data \n  * @param {string} data.puc_id\n  * @param {string} data.member_guid\n  * @param {string} data.device_guid\n  * @param {string} data.number\n  * @param {number} data.number_type\n  * @param {number} data.video_mix_model\n  * @param {string} data.call_dur 一期可不用\n  * @param {number} data.role\n  * @param {string} data.member_attr\n  * @param {number} data.status 0未接通，1已接通(一期可不用)\n  * @param {string} data.realm\n  * @param {string} data.time_slot\n  * @param {string} [data.alias]\n  * \n  * @return {ConferenceMember|undefined}\n  */\n  #convertConferenceMember(data) {\n    if (data) {\n      return {\n        guid: data === null || data === void 0 ? void 0 : data.member_guid,\n        basedata_id: (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.genLocalGuid)(data, \'number\'),\n        number: data.number,\n        alias: data.alias,\n        role: data.role,\n        time_slot: data.time_slot,\n        target: data.device_guid\n      };\n    }\n  }\n\n  /**\n   * 拉取会议成员\n   * @param {object} conference_info 会议\n   * @param {string} conference_info.guid 会议的id\n   * @return {Promise.<ListAck>}\n   */\n  fetchConferenceMember(conference_info) {\n    if (!conference_info || !conference_info.guid) {\n      _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].warn(\'basedata fetchConferenceMember interupt,param\', JSON.stringify(conference_info));\n      return Promise.resolve({\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n      });\n    }\n    return new Promise((resolve, reject) => {\n      const params = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION,\n        cmd_name: CMD_FETCH_CONFERENCE_MEMBER,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm,\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n        version_seq: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION_SEQ,\n        conference_info: {\n          conference_guid: conference_info.guid\n        }\n      };\n      _protocol_http__WEBPACK_IMPORTED_MODULE_0__["default"].postSync(params).then(resp => {\n        var _resp$member_list3;\n        let list;\n        if ((resp === null || resp === void 0 ? void 0 : resp.result) === 0 && (resp === null || resp === void 0 ? void 0 : (_resp$member_list3 = resp.member_list) === null || _resp$member_list3 === void 0 ? void 0 : _resp$member_list3.length) > 0) {\n          list = [];\n          resp === null || resp === void 0 ? void 0 : resp.member_list.forEach(member => {\n            list.push({\n              ...this.#convertConferenceMember(member),\n              status: member.status,\n              number_type: member.number_type,\n              number: member.number,\n              puc_id: member.puc_id\n            });\n          });\n        }\n        resolve({\n          result: resp === null || resp === void 0 ? void 0 : resp.result,\n          list: list\n        });\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n  /**\n   * 新建一个会议,服务端不会推送消息给其它调度员\n   * @param {object} data \n   * @param {string} data.number \n   * @param {string} data.alias \n   * @param {Array.<{basedata_id:string,guid:string}>} data.member_list \n   * @returns {Promise.<{result:number,conference_guid:string}>}\n   */\n  createConference(data) {\n    return new Promise((resolve, reject) => {\n      var _data$member_list3;\n      _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'basedata createConference param\', JSON.stringify(data));\n      const conference_guid = _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid();\n      const param = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION,\n        cmd_name: CMD_NEW_CONFERENCE,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm,\n        conference: {\n          conference_guid: conference_guid,\n          conference_number: data.number,\n          puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id,\n          // todo 多级问题\n          conference_alias: data.alias,\n          dispatcher_account: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n          status: 0,\n          realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm,\n          call_after_interval: 100,\n          //也不知道怎么来的，照抄之前的\n          video_mix_model: 2,\n          //隔屏模式，也不知道怎么来的，照抄之前的\n          vox_delay: 0 //发射时延，也不知道怎么来的，照抄之前的\n        }\n      };\n\n      let added_self = false;\n      // 添加成员\n      param.conference.member_list = (_data$member_list3 = data.member_list) === null || _data$member_list3 === void 0 ? void 0 : _data$member_list3.map(element => {\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'basedata createConference element\', JSON.stringify(element));\n        let ids = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(element.basedata_id);\n        //暂时单独处理登录者自己的账号，因为目前登录后没有提供一个相应的basedata_id出去\n        // 传进来的成员只允许有一个是undefined,就是自己，\n        if (added_self && ids === undefined) {\n          resolve({\n            result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n          });\n          return;\n        }\n        if (ids === undefined) {\n          ids = {\n            what_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n            number_type: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.number_type,\n            puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id,\n            realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm\n          };\n          added_self = true;\n        }\n        return {\n          member_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n          device_guid: element.guid,\n          number: ids.what_id,\n          number_type: ids.number_type,\n          puc_id: ids.puc_id,\n          system_id: ids.system_id ? ids.system_id : _public_constant__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_SYS_ID,\n          role: 1,\n          //也不知道怎么来的，照抄之前的\n          call_dur: 23,\n          //也不知道怎么来的，照抄之前的\n          member_attr: \'\',\n          //也不知道怎么来的，照抄之前的\n          realm: ids.realm,\n          video_mix_list: \'\',\n          video_mix_model: 0,\n          status: 0\n        };\n      });\n      //外部没有传自己进来,手动添加\n      if (!added_self) {\n        param.conference.member_list.push({\n          member_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n          device_guid: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.guid,\n          number: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n          number_type: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.number_type,\n          puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id,\n          system_id: _public_constant__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_SYS_ID,\n          role: 1,\n          //也不知道怎么来的，照抄之前的\n          call_dur: 23,\n          //也不知道怎么来的，照抄之前的\n          member_attr: \'\',\n          //也不知道怎么来的，照抄之前的\n          realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm,\n          video_mix_list: \'\',\n          video_mix_model: 0,\n          status: 0\n        });\n      }\n      _protocol_http__WEBPACK_IMPORTED_MODULE_0__["default"].postSync(param).then(resp => {\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'basedata createConference resp\', JSON.stringify(resp));\n        resolve({\n          result: resp.result,\n          conference_guid: conference_guid\n        });\n      }).catch(err => {\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].warn(\'basedata createConference fail\', err);\n        reject(err);\n      });\n    });\n  }\n  /**\n   * 删除会议\n   * @param {string} conference_guid 会议id\n   * @returns \n   */\n  deleteConference(conference_guid) {\n    return new Promise((resolve, reject) => {\n      if (!conference_guid) {\n        resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n        });\n        return;\n      }\n      const param = {\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n        cmd_name: CMD_DELETE_CONFERENCE,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION,\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.PRODUCT_NAME,\n        conference_guid: conference_guid,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm,\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id\n      };\n      _protocol_http__WEBPACK_IMPORTED_MODULE_0__["default"].postSync(param).then(resp => {\n        resolve({\n          result: resp === null || resp === void 0 ? void 0 : resp.result\n        });\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n  /**\n   * {@link updateConference}用的，其中参数中的的成员类型\n   * @typedef member\n   * @property {string} basedata_id 成员对象的basedata_id\n   * @property {string} member_guid 成员在会议中的guid，新成员没有则不传\n   * @property {string} target 成员对象的guid\n   * @property {string} number 成员对象的号码\n   * \n   */\n  /**\n   * 更新会议\n   * @param {object} data 参数对象\n   * @param {string} data.guid 会议id\n   * @param {string} data.basedata_id 会议的basedata_id\n   * @param {string} data.number 会议的号码\n   * @param {string} data.alias 会议别名\n   * @param {Array.<member>} data.member_list 成员数组\n   */\n  updateConference(data) {\n    return new Promise((resolve, reject) => {\n      if (!data) {\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].warn(\'basedata updateConference interupt,data\', data);\n        resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n        });\n        return;\n      }\n      const ids = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(data === null || data === void 0 ? void 0 : data.basedata_id);\n      if (!ids) {\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].warn(\'basedata updateConference interupt,basedata_id\', data.basedata_id);\n        resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n        });\n        return;\n      }\n      const param = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION,\n        cmd_name: CMD_UPDATE_CONFERENCE,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm,\n        conference: {\n          conference_guid: data.guid,\n          conference_number: data.number,\n          puc_id: ids.puc_id ? ids.puc_id : _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id,\n          // todo 多级问题\n          conference_alias: data.alias,\n          dispatcher_account: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n          status: 0,\n          realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm,\n          call_after_interval: 100,\n          //也不知道怎么来的，照抄之前的\n          video_mix_model: 2,\n          //隔屏模式，也不知道怎么来的，照抄之前的\n          vox_delay: 0 //发射时延，也不知道怎么来的，照抄之前的\n        }\n      };\n\n      param.conference.member_list = data.member_list.map(element => {\n        const ids = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(element.basedata_id);\n        return {\n          member_guid: element.guid ? element.guid : _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n          device_guid: element.target,\n          number: ids.what_id,\n          number_type: ids.number_type,\n          puc_id: ids.puc_id,\n          system_id: ids.system_id ? ids.system_id : _public_constant__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_SYS_ID,\n          role: 1,\n          //也不知道怎么来的，照抄之前的\n          call_dur: 23,\n          //也不知道怎么来的，照抄之前的\n          member_attr: \'\',\n          //也不知道怎么来的，照抄之前的\n          realm: ids.realm ? ids.realm : _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm,\n          video_mix_list: \'\',\n          video_mix_model: 0,\n          status: 0\n        };\n      });\n      _protocol_http__WEBPACK_IMPORTED_MODULE_0__["default"].postSync(param).then(resp => {\n        resolve({\n          result: resp.result\n        });\n      }).catch(err => {\n        resolve(err);\n      });\n    });\n  }\n  /**\n   * 为会议增加成员\n   * @param {object} data \n   * @param {string} data.conference_guid 会议id \n   * @param {string} data.basedata_id 要添加的对象的basedata_id \n   * @param {string} data.guid 要添加的对象的guid \n   * @param {string} data.number 要添加的对象的号码 \n   * @return {Promise.<{result:number,member_guid:string}>}\n   */\n  addConferenceMember(data) {\n    return new Promise((resolve, reject) => {\n      if (!data || !data.basedata_id || !data.guid) {\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].warn(\'basedata updateConference interupt,data\', JSON.stringify(data));\n        resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n        });\n        return;\n      }\n      const ids = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(data.basedata_id);\n      const member_guid = _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid();\n      const param = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION,\n        cmd_name: CMD_ADD_CONFERENCE_MEM,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n        conference_guid: data.conference_guid,\n        member: {\n          puc_id: ids.puc_id,\n          member_guid: member_guid,\n          device_guid: data.guid,\n          number: data.number,\n          number_type: ids.number_type,\n          video_mix_model: 2,\n          call_dur: 23,\n          role: 1,\n          member_attr: "",\n          status: 0,\n          realm: ids.realm ? ids.realm : _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm\n          // time_slot: ""      //车载台或者中转台下组的时隙，预留，暂时不用\n        }\n      };\n\n      _protocol_http__WEBPACK_IMPORTED_MODULE_0__["default"].postSync(param).then(resp => {\n        resolve({\n          result: resp.result,\n          member_guid: member_guid\n        });\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n  /**\n   * 移除会议成员\n   * @param {object} data \n   * @param {string} data.conference_guid 会议id \n   * @param {string} data.member_guid 要删除的成员在会议中的guid\n   */\n  removeConferenceMember(data) {\n    return new Promise((resolve, reject) => {\n      if (!data || !data.conference_guid || !data.member_guid) {\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].warn(\'basedata removeConferenceMember interupt,data\', JSON.stringify(data));\n        resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n        });\n        return;\n      }\n      const param = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION,\n        cmd_name: CMD_REMOVE_CONFERENCE_MEM,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n        conference_guid: data.conference_guid,\n        member_guid: data.member_guid,\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm\n      };\n      _protocol_http__WEBPACK_IMPORTED_MODULE_0__["default"].postSync(param).then(resp => {\n        resolve({\n          result: resp.result\n        });\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  /**\n   * 拉取群组列表\n   */\n  fetchCrosspatch() {\n    return new Promise((resolve, reject) => {\n      const param = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION,\n        cmd_name: CMD_FETCH_CROSS_PATCH,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm,\n        // puc_id: dataBase.user.puc_id,\n        puc_id: this.getRequestPucId(),\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n        version_seq: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION_SEQ\n      };\n      _protocol_http__WEBPACK_IMPORTED_MODULE_0__["default"].postSync(param).then(resp => {\n        var _resp$crosspatch_list;\n        /**\n         * @type {ListAck}\n         */\n        const newResp = {\n          result: resp.result,\n          list: []\n        };\n        if (resp.result === _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.SUCCESS && ((_resp$crosspatch_list = resp.crosspatch_list) === null || _resp$crosspatch_list === void 0 ? void 0 : _resp$crosspatch_list.length) > 0) {\n          this.#crosspatchGuidMap.clear();\n          resp.crosspatch_list.forEach(item => {\n            var _item$member_list;\n            // //服务端返回的数据没有number_type\n            // item.number_type = NUMBER_TYPE.CROSS_PATCH\n            /**\n             * 组信息\n            * @type {Crosspatch}\n            */\n            const data = this.#convertCrosspatch(item);\n            this.#crosspatchGuidMap.set(data.guid, undefined);\n            //组成员\n            if (((_item$member_list = item.member_list) === null || _item$member_list === void 0 ? void 0 : _item$member_list.length) > 0) {\n              data.member_list = [];\n              item.member_list.forEach(mem => {\n                data.member_list.push(this.#convertCrosspatchMember(mem));\n              });\n            }\n            newResp.list.push(data);\n          });\n        }\n        resolve(newResp);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n  /**\n   * 把服务端返回的群组数据过滤、组装后给外部使用,如果是推送的数据，成员的device_guid字段是空字符串\n   * @param {object} data\n   * @param {number} data.active_flag 群组是否启用了\n   * @param {string} data.call_after_interval\n   * @param {string} data.crosspatch_alias 群组别名\n   * @param {string} data.crosspatch_guid 群组guid 全局标识\n   * @param {string} data.crosspatch_no 群组号码\n   * @param {string} data.crosspatch_number 群组号码，好像跟crosspatch_no重复了，\n   * @param {string} data.crosspatch_purpose 群组创建的目的\n   * @param {string} data.dispatcher_account 创建群组的调度员账号\n   * @param {number} data.priority 群组的通话优先级\n   * @param {number} data.idle_timeout 空闲超时\n   * @param {number} data.ptt_timeout 成员单次占有话权超时时间\n   * @param {string} data.puc_id\n   * @param {string} data.realm\n   * @param {string} data.remark\n   * @param {number} data.version_seq\n   * @param {number} data.vox_delay 发送延迟\n   * @return {Crosspatch=}\n   */\n  #convertCrosspatch(data) {\n    if (!data) {\n      _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'basedata convertCrosspatch interrupt,data\', JSON.stringify(data));\n      return undefined;\n    }\n    if (data.number_type === undefined) {\n      data.number_type = _public_constant__WEBPACK_IMPORTED_MODULE_1__.NUMBER_TYPE.CROSS_PATCH;\n    }\n\n    /**\n     * @type {Crosspatch}\n     */\n    const crosspatch = {\n      guid: data.crosspatch_guid,\n      basedata_id: (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.genLocalGuid)(data, \'crosspatch_no\'),\n      number: data.crosspatch_no,\n      alias: data.crosspatch_alias,\n      active: data.active_flag,\n      priority: data.priority,\n      member_list: undefined,\n      speak_timeout: data.ptt_timeout,\n      idle_timeout: data.idle_timeout,\n      purpose: data.crosspatch_purpose,\n      owner: data.puc_id === _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id && data.realm === _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm && data.dispatcher_account === _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id ? 1 : 0\n    };\n    return crosspatch;\n  }\n  /**\n   * 将服务端返回的群组的成员过滤组装\n   * @param {object} member\n   * @param {string} [member.alias] 成员别名,有时候没有这个字段的\n   * @param {number} member.call_priority 成员在群组内的优先级\n   * @param {string} member.crosspatch_guid 成员所在群组的guid\n   * @param {number} member.currentgrp 是否绑定的是当前组，同一时间只能绑定一个群组，成员是组才有意义\n   * @param {string} member.device_guid 设备guid，或者组的guid\n   * @param {number} member.grant_mode 话权模式 默认0（ptt话权）\n   * @param {string} member.member_guid 成员在群组内的guid\n   * @param {string} member.number 成员号码\n   * @param {number} member.number_type 成员号码类型\n   * @param {string} member.puc_id\n   * @param {string} member.realm\n   * @param {string} member.sap_guid\n   * @param {string} member.system_id\n   * @param {string} member.time_slot\n   * @param {number} member.version_seq\n   * @param {number} member.vox_delay 成员发送延迟，应该是通话时候的内容发送延迟时间\n   * @return {CrosspatchMember=} \n   */\n  #convertCrosspatchMember(member) {\n    if (member) {\n      return {\n        guid: member.member_guid,\n        target: member.device_guid,\n        basedata_id: (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.genLocalGuid)(member, \'number\'),\n        number: member.number,\n        alias: member.alias,\n        active: member.currentgrp,\n        priority: member.call_priority,\n        grant_mode: member.grant_mode,\n        vox_delay: member.vox_delay\n      };\n    }\n  }\n\n  /**\n   * 创建群组,目前群组成员支持的number_type包括（puc上代码是这样写的） 0 、 1 、3 、22 、23 、24\n   * 多话权组不允许加入到群组\n   * \n   * @param {object} data\n   * @param {string} data.number 群组号码\n   * @param {string} data.alias 群组别名\n   * @param {number} [data.active] 是否激活，0不激活，1激活，不传则默认激活\n   * @param {number} [data.purpose] 用途，0：用于呼叫 1：用于短信群聊 2：即能呼叫又能发短信，不传则默认2\n   * @param {Array.<CrosspatchMember>} [data.member_list] 成员数组\n   * @param {string} [puc_id] 用于多级，可创建下级的群组。   没有传以getRequestPucId为准，  如果是下级的，不能添加上级的用户。\n   * \n   */\n  createCrosspatch(data) {\n    return new Promise((resolve, reject) => {\n      _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'basedata createCrossPatch in,data\', JSON.stringify(data));\n      //参数判空\n      if (!data || !data.number || !data.alias) {\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].warn(\'basedata createCrossPatch interupt,data\', JSON.stringify(data));\n        resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n        });\n        return;\n      }\n      if (typeof data.number !== \'string\') {\n        resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n        });\n        return;\n      }\n      if (!data.active) {\n        data.active = 1;\n      }\n      if (!data.purpose) {\n        data.purpose = 2;\n      }\n      if (data.puc_id) {\n        if (data.puc_id !== _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id) {\n          // 创建的是下级群组。 不能添加本级设备\n          for (let element of data.member_list) {\n            const memberids = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(element.basedata_id);\n\n            //创建的群组是下级群组。 和当前比较,不是当前的就是下级的。 那么就不能添加本级\n            if (memberids.puc_id === _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id) {\n              // 添加的是本地\n              return resolve({\n                result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.LEVEL_CROSS_ERROR\n              });\n            }\n          }\n        }\n      }\n      const param = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION,\n        cmd_name: CMD_NEW_CROSS_PATCH,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm,\n        crosspatch: {\n          crosspatch_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n          crosspatch_no: data.number,\n          puc_id: data.puc_id ? data.puc_id : _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id,\n          crosspatch_alias: data.alias,\n          dispatcher_account: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n          active_flag: data.active,\n          vox_delay: default_vox_delay,\n          crosspatch_purpose: data.purpose,\n          ptt_timeout: 0,\n          //不知道值怎么来的，照抄puc的\n          idle_timeout: 0,\n          //不知道值怎么来的，照抄puc的\n          realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm,\n          priority: 1\n        }\n      };\n      const ret = {\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.SUCCESS\n      };\n      _protocol_http__WEBPACK_IMPORTED_MODULE_0__["default"].postSync(param).then(resp => {\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'basedata createCrossPatch succ,resp\', JSON.stringify(resp));\n        ret.result = resp.result;\n        if (resp.result === _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.SUCCESS) {\n          /**\n           * @type {Crosspatch}\n          */\n          //成功的把guid保存一下\n          data.guid = param.crosspatch.crosspatch_guid;\n          ret.guid = data.guid;\n          const updateParameter = {\n            guid: param.crosspatch.crosspatch_guid,\n            basedata_id: (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.genLocalGuid)(param.crosspatch, \'crosspatch_no\'),\n            number: param.crosspatch.crosspatch_no,\n            alias: param.crosspatch.crosspatch_alias,\n            owner: 1,\n            active: param.crosspatch.active_flag,\n            priority: param.crosspatch.priority,\n            purpose: param.crosspatch.crosspatch_purpose,\n            member_list: data.member_list\n          };\n          _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'basedata add member in,updateParameter\', JSON.stringify(updateParameter));\n\n          //把成员加进去\n          this.updateCrosspatch(updateParameter).then(res => {\n            ret.result = res.result;\n            resolve(ret);\n            // if (res.result === ERROR_CODE.SUCCESS) {\n            //   // 下面的代码不需要了，因为update接口服务端处理当前组的关系,但是待验证\n            //   // 设置成员的激活状态\n            //   // const activePromissArr = []\n            //   // updateParameter.member_list.forEach(member => {\n            //   //   if (member.active === 1 && unPackGuid(member.basedata_id).number_type != NUMBER_TYPE.INDIVIDUAL) {\n            //   //     //新成员要自己生成guid\n            //   //     if (!member.guid) {\n            //   //       member.guid = common.guid()\n            //   //     }\n            //   //     activePromissArr.push(this.updateCrosspatchMemberActiveStatus(\n            //   //       {\n            //   //         crosspatch_number: updateParameter.number,\n            //   //         member_guid: member.guid,\n            //   //         active: 1\n            //   //       }))\n            //   //   }\n            //   // })\n\n            //   // if (activePromissArr.length > 0) {\n            //   //   Promise.all(activePromissArr)\n            //   //     .then(activeResp => {\n            //   //       logInstance.debug(\'basedata createCrossPatch change current,result\', JSON.stringify(activeResp))\n            //   //       const fail = activeResp.find(item => item.result != ERROR_CODE.SUCCESS)\n            //   //       if (fail) {\n            //   //         //部分失败了，返回失败\n            //   //         resolve({ result: fail.result })\n            //   //       } else {\n            //   //         //全都成功了\n            //   //         resolve({ result: ERROR_CODE.SUCCESS })\n            //   //       }\n            //   //     })\n            //   //     .catch(err => {\n            //   //       reject(err)\n            //   //     })\n            //   // } else {\n            //   //   resolve(res)\n            //   // }\n            //   //   resolve(res)\n            //   // } else {\n            //   //最终结果了\n            //   resolve(res)\n            // }\n          }).catch(err => {\n            // 更新群组失败，其实是添加成员的操作\n            // reject(err)\n            ret.result = _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.MEMBER_ADD_ERROE;\n            resolve(ret);\n          });\n        } else {\n          resolve(ret);\n        }\n      }).catch(err => {\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].error(\'basedata createCrossPatch fail,err\', JSON.stringify(err));\n        reject(err);\n      });\n    });\n  }\n  /**\n   * 更新群组的信息，可以更新群组的信息、群组的成员、群组成员的属性(包括成员组当前群组的关系)，需要携带群组全量信息\n   * 目前群组成员支持的number_type包括（puc上代码是这样写的） 0 、 1 、3 、22 、23 、24--todo\n   * 多话权组不允许加入到群组-- todo\n   * @param {object} data\n   * @param {string} data.basedata_id\n   * @param {string} data.guid\n   * @param {string} data.number\n   * @param {string} data.active\n   * @param {string} data.alias\n   * @param {string} data.purpose 会议用于 参考{@link Crosspatch}\n   * @param {string} data.speak_timeout 成员占有话权超时\n   * @param {string} data.idle_timeout 通话空闲超时\n   * @param {Array.<CrosspatchMember>} data.member_list 会议成员\n   *\n   */\n  updateCrosspatch(data) {\n    return new Promise((resolve, reject) => {\n      if (!data || !data.basedata_id || !data.guid || data.number === undefined || data.active === undefined) {\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].warn(\'basedata updateCrosspatch interupt,data:\', JSON.stringify(data));\n        resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n        });\n        return;\n      }\n      _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'basedata updateCrosspatch ,param\', JSON.stringify(data));\n      const ids = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(data.basedata_id);\n      const param = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION,\n        cmd_name: CMD_UPDATE_CROSS_PATCH,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n        realm: ids.realm ? ids.realm : _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm,\n        crosspatch: {\n          crosspatch_guid: data.guid,\n          crosspatch_number: data.number,\n          //\n          crosspatch_no: data.number,\n          puc_id: ids.puc_id,\n          realm: ids.realm ? ids.realm : _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm,\n          crosspatch_alias: data.alias,\n          call_after_interval: 0,\n          //文档上没有这个字段，但是要传\n          dispatcher_account: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n          //todo 这里是不是得考虑是更新别的调度员创建的群组的情况\n          active_flag: data.active,\n          vox_delay: data.vox_delay ? data.vox_delay : default_vox_delay,\n          crosspatch_purpose: data.purpose,\n          priority: data.priority,\n          ptt_timeout: data.speak_timeout ? data.speak_timeout : 0,\n          idle_timeout: data.idle_timeout ? data.idle_timeout : 0\n        }\n      };\n\n      // 添加成员参数\n      param.crosspatch.member_list = [];\n      for (let element of data.member_list) {\n        const basedata_id = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(element.basedata_id);\n        //添加的时候，没有guid，要生成并且写入传入的参数data，其它地方有用\n        if (!element.guid) {\n          element.guid = _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid();\n        }\n        // 个号这个字段没有什么用，要置成0\n        if (element.active === undefined || basedata_id.number_type === _public_constant__WEBPACK_IMPORTED_MODULE_1__.NUMBER_TYPE.INDIVIDUAL || basedata_id.number_type === _public_constant__WEBPACK_IMPORTED_MODULE_1__.NUMBER_TYPE.ROIP_INDIVIDUAL) {\n          element.active = 0;\n        }\n        if (ids.puc_id !== _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id) {\n          //创建的群组是下级群组。 和当前比较,不是当前的就是下级的。 那么就不能添加本级\n          if (basedata_id.puc_id === _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id) {\n            // 添加的是本地\n            return resolve({\n              result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.LEVEL_CROSS_ERROR\n            });\n          }\n        }\n        const memberInfo = {\n          puc_id: basedata_id.puc_id,\n          member_guid: element.guid,\n          device_guid: element.target,\n          crosspatch_guid: data.guid,\n          number: element.number,\n          number_type: basedata_id.number_type,\n          system_id: basedata_id.system_id,\n          alias: element.alias,\n          call_priority: element.priority,\n          grant_mode: element.grant_mode === undefined ? 0 : element.grant_mode,\n          currentgrp: element.active,\n          vox_delay: element.vox_delay ? element.vox_delay : default_vox_delay,\n          realm: basedata_id.realm\n        };\n        param.crosspatch.member_list.push(memberInfo);\n      }\n      //添加成员参数\n      // param.crosspatch.member_list = data.member_list?.map(element => {\n      //   const basedata_id = unPackGuid(element.basedata_id)\n      //   //添加的时候，没有guid，要生成并且写入传入的参数data，其它地方有用\n      //   if (!element.guid) {\n      //     element.guid = common.guid()\n      //   }\n      //   // 个号这个字段没有什么用，要置成0\n      //   if (element.active === undefined || basedata_id.number_type === NUMBER_TYPE.INDIVIDUAL || basedata_id.number_type === NUMBER_TYPE.ROIP_INDIVIDUAL) {\n      //     element.active = 0\n      //   }\n      //   // if (ids.puc_id !== dataBase.user.puc_id) {\n      //   //   //创建的是下级群组。 和当前比较\n\n      //   // }\n\n      //   return {\n      //     puc_id: basedata_id.puc_id,\n      //     member_guid: element.guid,\n      //     device_guid: element.target,\n      //     crosspatch_guid: data.guid,\n      //     number: element.number,\n      //     number_type: basedata_id.number_type,\n      //     system_id: basedata_id.system_id,\n      //     alias: element.alias,\n      //     call_priority: element.priority,\n      //     grant_mode: element.grant_mode === undefined ? 0 : element.grant_mode,\n      //     currentgrp: element.active,\n      //     vox_delay: element.vox_delay ? element.vox_delay : default_vox_delay,\n      //     realm: basedata_id.realm\n      //   }\n      // })\n      _protocol_http__WEBPACK_IMPORTED_MODULE_0__["default"].postSync(param).then(resp => {\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'basedata updateCrosspatch succ,resp\', JSON.stringify(resp));\n        resolve(resp);\n      }).catch(err => {\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].error(\'basedata updateCrosspatch fail,err\', JSON.stringify(err));\n        reject(err);\n      });\n    });\n  }\n\n  /**\n   * 为群组的成员（组）绑定当前群组\n   *@param {object} data\n   * @param {string} data.crosspatch_number 群组号码\n   * @param {object} data.member_guid 成员id，对应成员对象中的guid\n   */\n  updateCrosspatchMemberActiveStatus(data) {\n    return new Promise((resolve, reject) => {\n      if (!data || !data.crosspatch_number || !data.member_guid) {\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].warn(\'basedata updateCrosspatchMemberActiveStatus interupt,data\', JSON.stringify(data));\n        resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n        });\n        return;\n      }\n      const param = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION,\n        cmd_name: CMD_ACTIVE_CROSS_PATCH_MEMBER,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n        // old_crosspatch_no: "54645",\t\t\t\t\t\t\t\t\t//原来当前组所在群组的号码,不传也可以的\n        // old_member_guid: "{008dfcda-f886-49ff-8ca4-ca293106a7df}",\t\t//原来当前组所在群组的成员guid，不传也可以的\n        current_crosspatch_no: data.crosspatch_number,\n        //新的当前组所在群组的号码\n        current_member_guid: data.member_guid,\n        //新的当前组所在群组的成员guid\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm\n      };\n      _protocol_http__WEBPACK_IMPORTED_MODULE_0__["default"].postSync(param).then(resp => {\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'basedata updateCrosspatchMemberActiveStatus succ,resp\', JSON.stringify(resp));\n        resolve(resp);\n      }).catch(err => {\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].error(\'basedata updateCrosspatchMemberActiveStatus fail,err\', JSON.stringify(err));\n        reject(err);\n      });\n    });\n  }\n  /**\n   * 更新群组的可用状态\n   * @param {object} data\n   * @param {string} data.guid 群组id\n   * @param {object} data.active 0取消激活， 1激活\n   */\n  updateCrosspatchActiveStatus(data) {\n    return new Promise((resolve, reject) => {\n      if (!data || !data.guid || data.active === undefined) {\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].warn(\'basedata updateCrosspatchMemberActiveStatus interupt,data\', JSON.stringify(data));\n        resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n        });\n        return;\n      }\n      const param = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION,\n        cmd_name: CMD_ACTIVE_CROSS_PATCH,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n        //新的当前组所在群组的号码\n        crosspatch_guid: data.guid,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm,\n        active_flag: data.active\n      };\n      _protocol_http__WEBPACK_IMPORTED_MODULE_0__["default"].postSync(param).then(resp => {\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'basedata updateCrosspatchMemberActiveStatus succ,resp\', JSON.stringify(resp));\n        resolve(_public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].getBaseResp(resp.result, resp.msg));\n      }).catch(err => {\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].error(\'basedata updateCrosspatchMemberActiveStatus fail,err\', JSON.stringify(err));\n        reject(err);\n      });\n    });\n  }\n  /**\n   * 删除群组\n   * @param {object} data 群组的guid\n   * @param {string} data.guid 群组的guid\n   */\n  deleteCrosspatch(data) {\n    if (!data || !data.guid) {\n      _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].warn(\'basedata deleteCrosspatch interupt,guid\', JSON.stringify(data));\n      return Promise.resolve({\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n      });\n    }\n    return new Promise((resolve, reject) => {\n      const param = {\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n        cmd_name: CMD_DELETE_CROSS_PATCH,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION,\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.PRODUCT_NAME,\n        guid: data.guid,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm\n      };\n      _protocol_http__WEBPACK_IMPORTED_MODULE_0__["default"].postSync(param).then(resp => {\n        resolve({\n          result: resp.result\n        });\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n  /**\n   * 群组添加新成员(服务端说没调试，最好不要用)\n   * @param {object} data \n   * @param {string} data.crosspatch_guid 群组guid\n   * @param {number} [data.grant_mode] 话权模式，默认0（ppt模式）\n   * @param {number} [data.priority] 成员在群组的优先级 默认0\n   * @param {number} [data.active] 是否在当前群组激活该成员,可选参数，默认0\n   * @param {number} [data.vox_delay] 发送延迟，默认8\n   * @param {object} data.target 成员对象\n   * @param {string} data.target.guid 要添加的成员的guid\n   * @param {object} data.target.basedata_id 要添加的成员的basedata_id\n   * @param {object} data.target.number 要添加的成员的号码\n   * @param {object} [data.target.alias] 要添加的成员的别名\n   */\n  addCrosspatchMember(data) {\n    var _data$target;\n    const ids = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(data === null || data === void 0 ? void 0 : (_data$target = data.target) === null || _data$target === void 0 ? void 0 : _data$target.basedata_id);\n    if (!data || !data.crosspatch_guid || !data.target || !data.target.basedata_id || !data.target.guid || !data.target.number) {\n      _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].warn(\'basedata addCrosspatchMember interupt,guid\', JSON.stringify(data));\n      return Promise.resolve({\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n      });\n    }\n    return new Promise((resolve, reject) => {\n      const member_guid = _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid();\n      const param = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION,\n        cmd_name: CMD_ADD_CROSS_PATCH_MEMBER,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm,\n        crosspatch_guid: data.crosspatch_guid,\n        member: {\n          puc_id: ids.puc_id,\n          member_guid: member_guid,\n          device_guid: data.target.guid,\n          number: data.target.number,\n          number_type: ids.number_type,\n          system_id: ids.system_id,\n          alias: data.target.alias,\n          call_priority: data.priority ? data.priority : 0,\n          grant_mode: data.grant_mode ? data.grant_mode : 0,\n          currentgrp: data.active === 1 && ids.number_type != _public_constant__WEBPACK_IMPORTED_MODULE_1__.NUMBER_TYPE.INDIVIDUAL ? 1 : 0,\n          vox_delay: data.vox_delay ? data.vox_delay : default_vox_delay,\n          realm: ids.realm ? ids.realm : _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm,\n          time_slot: ids.time_slot //车载台或者中转台下组的时隙\n        }\n      };\n\n      _protocol_http__WEBPACK_IMPORTED_MODULE_0__["default"].postSync(param).then(resp => {\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'basedata addCrosspatchMember succ,resp\', JSON.stringify(resp));\n        const res = _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].getBaseResp(resp.result, resp.msg);\n        if (res.result === _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.SUCCESS) {\n          res.guid = member_guid;\n        }\n        resolve(res);\n      }).catch(err => {\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].error(\'basedata addCrosspatchMember fail,err\', JSON.stringify(err));\n        reject(err);\n      });\n    });\n  }\n  /**\n   * 移除群组成员(服务端说没调试，最好不要用)\n   * @param {object} data \n   * @param {string} data.crosspatch_guid 群组guid\n   * @param {string} data.member_guid 成员在群组内的id\n   */\n  removeCrosspatchMember(data) {\n    if (!data || !data.crosspatch_guid || !data.member_guid) {\n      _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].warn(\'basedata deleteCrosspatchMember interupt,guid\', JSON.stringify(data));\n      return Promise.resolve({\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n      });\n    }\n    return new Promise((resolve, reject) => {\n      const param = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION,\n        cmd_name: CMD_REMOVE_CROSS_PATCH_MEMBER,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n        crosspatch_guid: data.crosspatch_guid,\n        member_guid: data.member_guid,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm\n      };\n      _protocol_http__WEBPACK_IMPORTED_MODULE_0__["default"].postSync(param).then(resp => {\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'basedata deleteCrosspatchMember succ,resp\', JSON.stringify(resp));\n        resolve(_public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].getBaseResp(resp.result, resp.msg));\n      }).catch(err => {\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].error(\'basedata deleteCrosspatchMember fail,err\', JSON.stringify(err));\n        reject(err);\n      });\n    });\n  }\n\n  /**\n   * 拉取第三方会议\n   */\n  fetchThirdConference() {\n    return new Promise((resolve, reject) => {\n      const params = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION,\n        cmd_name: CMD_FETCH_THIRD_CONFERENCE,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n        // puc_id: dataBase.user.puc_id,\n        puc_id: this.getRequestPucId(),\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n        version_seq: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION_SEQ\n      };\n      _protocol_http__WEBPACK_IMPORTED_MODULE_0__["default"].postSync(params).then(res => {\n        var _res$group_info_list;\n        /**\n         * @type {ListAck}\n         */\n        const simpleResp = {\n          result: res.result,\n          list: []\n        };\n        res === null || res === void 0 ? void 0 : (_res$group_info_list = res.group_info_list) === null || _res$group_info_list === void 0 ? void 0 : _res$group_info_list.forEach(item => {\n          simpleResp.list.push(this.#converThirdConference(item));\n        });\n        resolve(simpleResp);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n  /**\n    * 创建第三方会议\n    * \n    * @param {object} data 第三方会议对象\n    * @param {string} data.number 会议号码\n    * @param {string} data.alias 会议别名\n    * @param {string} data.system_id 会议归属系统,系统列表中可能会有多个满足要求（创建第三方会议有系统类型要求）的系统\n    * @param {string} [data.enable] 第三方会议对象，@see {@link ThirdConference}中的enable\n    * @param {string} [data.encryption] 第三方会议对象 @see {@link ThirdConference}中的encryption\n    */\n  createThirdConference(data) {\n    //字段检查\n    if (!data || !data.number || !data.alias) {\n      _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].warn(\'basedata createThirdConference interupt,data\', JSON.stringify(data));\n      return Promise.resolve({\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n      });\n    }\n    //可选字段enable补充\n    if (data.enable === undefined) {\n      data.enable = 1;\n    }\n    if (data.enable < 0) {\n      data.enable = 0;\n    }\n    if (data.enable > 1) {\n      data.enable = 1;\n    }\n    //可选字段encryption补充\n    if (data.encryption === undefined) {\n      data.encryption = 0;\n    }\n    if (data.encryption < 0) {\n      data.encryption = 0;\n    }\n    if (data.encryption > 1) {\n      data.encryption = 1;\n    }\n    let system_id = data.system_id;\n    //先找一遍\n    if (system_id === undefined) {\n      this.systemMap.forEach(value => {\n        if (value.system_type === _public_constant__WEBPACK_IMPORTED_MODULE_1__.SYSTEM_TYPE.VEDIO_CONF) {\n          system_id = value.system_id;\n        }\n      });\n    }\n    // 没找到系统玩个球\n    if (system_id === undefined) {\n      return Promise.resolve({\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.SYSTEM_NOT_FOUND\n      });\n    }\n    const guid = _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid();\n    return new Promise((resolve, reject) => {\n      const param = {\n        group_info: {\n          enable_flag: data.enable,\n          group_alias: data.alias,\n          group_id: data.number,\n          guid: guid,\n          is_mixgroup: 0,\n          number_type: _public_constant__WEBPACK_IMPORTED_MODULE_1__.NUMBER_TYPE.THIRD_CONFERENCE,\n          // org_alias: null,\n          // org_identifier: "",\n          // remark: "1",\n          puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id,\n          system_id: system_id,\n          realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm\n        },\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION,\n        cmd_name: CMD_ADD_THIRD_CONFERENCE,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id,\n        // system_id: dataBase.user.system_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm\n      };\n      _protocol_http__WEBPACK_IMPORTED_MODULE_0__["default"].postSync(param).then(res => {\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'basedata createThirdConference succ,res\', JSON.stringify(res));\n        resolve({\n          result: res.result\n        });\n      }).catch(err => {\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].error(\'basedata createThirdConference err,err\', JSON.stringify(err));\n        reject(err);\n      });\n    });\n  }\n  /**\n   * \n   * @param {object} data \n   * @return {ThirdConference} \n   */\n  #converThirdConference(data) {\n    /**\n     * create_datetime: "2023-07-28T12:00:51Z"\n    enable_flag: 1\n    end2endencryption: 0\n    group_alias: "123"\n    group_id: "12345"\n    group_member: null\n    guid: "dbCbbcEb-6EbB-55c9-91bC-f79cCB47dC85"\n    is_mixgroup: 0\n    judge_sync_edit: 0\n    member_list: ""\n    multi_talker: 0\n    number_type: 13\n    operate_type: ""\n    order_num: 0\n    org_history: ""\n    org_identifier: ""\n    pre_org_id: ""\n    puc_id: "00093"\n    real_organization: ""\n    realm: "puc.com"\n    remark: ""\n    sign_data: ""\n    sort_id: 0\n    system_id: "044"\n    update_datetime: "2023-07-28T12:00:51Z"\n    version_seq: 1\n     */\n    return {\n      guid: data === null || data === void 0 ? void 0 : data.guid,\n      basedata_id: (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.genLocalGuid)(data, "group_id"),\n      number: data === null || data === void 0 ? void 0 : data.group_id,\n      alias: data === null || data === void 0 ? void 0 : data.group_alias,\n      encryption: data === null || data === void 0 ? void 0 : data.end2endencryption,\n      enable: data === null || data === void 0 ? void 0 : data.enable_flag\n    };\n  }\n  /**\n   * 修改第三方会议，第三方会议也只有别名和是否可以用能改一改了\n   * \n   * @param {ThirdConference} data 第三方会议对象\n   */\n  updateThirdConference(data) {\n    //字段检查\n    if (!data || !data.basedata_id || !data.guid || !data.number || data.enable === undefined) {\n      _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].warn(\'basedata updateThirdConferenceAlias interupt,data\', JSON.stringify(data));\n      return Promise.resolve({\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n      });\n    }\n    const ids = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(data.basedata_id);\n    return new Promise((resolve, reject) => {\n      const param = {\n        group_info: {\n          enable_flag: data.enable,\n          group_alias: data.alias,\n          group_id: data.number,\n          guid: data.guid,\n          is_mixgroup: 0,\n          number_type: ids.number_type,\n          // org_alias: null,\n          // org_identifier: "",\n          // remark: "1",\n          puc_id: ids.puc_id,\n          system_id: ids.system_id,\n          realm: ids.realm\n        },\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION,\n        cmd_name: CMD_UPDATE_THIRD_CONFERENCE,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id,\n        // system_id: dataBase.user.system_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm\n      };\n      _protocol_http__WEBPACK_IMPORTED_MODULE_0__["default"].postSync(param).then(res => {\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'basedata updateThirdConferenceAlias succ,res\', JSON.stringify(res));\n        resolve({\n          result: res.result\n        });\n      }).catch(err => {\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].error(\'basedata updateThirdConferenceAlias err,err\', JSON.stringify(err));\n        reject(err);\n      });\n    });\n  }\n  /**\n   * 删除第三方会议\n   * @param {object} data \n   * @param {string} data.number\n   * @param {string} data.guid\n   * @param {string} data.basedata_id \n   */\n  deleteThirdConference(data) {\n    //字段检查\n    if (!data || !data.guid || !data.number || !data.basedata_id) {\n      _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].warn(\'basedata deleteThirdConference interupt,data\', JSON.stringify(data));\n      return Promise.resolve({\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n      });\n    }\n    const ids = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(data.basedata_id);\n    return new Promise((resolve, reject) => {\n      const param = {\n        group_id: data.number,\n        guid: data.guid,\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION,\n        cmd_name: CMD_DELETE_THIRD_CONFERENCE,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id,\n        system_id: ids === null || ids === void 0 ? void 0 : ids.system_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm\n      };\n      _protocol_http__WEBPACK_IMPORTED_MODULE_0__["default"].postSync(param).then(res => {\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'basedata deleteThirdConference succ,res\', JSON.stringify(res));\n        resolve({\n          result: res.result\n        });\n      }).catch(err => {\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].error(\'basedata deleteThirdConference err,err\', JSON.stringify(err));\n        reject(err);\n      });\n    });\n  }\n\n  /**\n   * 注册设备状态变更回调\n   * @param {DeviceCallback} callback 回调函数\n   * @returns {string} callbackId {@link removeDeviceChangeListener } 需要根据这个id找到对应的回调函数\n   */\n  addDeviceChangeListener(callback) {\n    const guid = _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid();\n    this.#deviceCBMap.set(guid, callback);\n    _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'basedata addDeviceChangeListener cbId=%s\', guid);\n    _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'basedata addDeviceChangeListener test\', JSON.stringify(this.#deviceCBMap));\n    return guid;\n  }\n\n  /**\n   * 根据callbackId删除之前注册的回调\n   * \n   * @param {string} callbackId \n   */\n  removeDeviceChangeListener(callbackId) {\n    let result;\n    if (callbackId) {\n      result = this.#deviceCBMap.delete(callbackId);\n    }\n    _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'basedata removeDeviceChangeListener cbId=%s,succ=%s\', callbackId, result);\n  }\n  /**\n   * 注册组织架构变化回调\n   * \n   * @param {OrgCallback} callback\n   * @return {string} callbackId  {@link removeOrgChangeListener } 需要根据这个id找到对应的回调函数\n   */\n  addOrgChangeListener(callback) {\n    const guid = _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid();\n    this.#orgCBMap.set(guid, callback);\n    _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'basedata addOrgChangeListener cbId=%s\', guid);\n    return guid;\n  }\n  /**\n   * 根据callbackId删除之前注册的回调\n   * \n   * @param {string} callbackId \n   */\n  removeOrgChangeListener(callbackId) {\n    let result;\n    if (callbackId) {\n      result = this.#orgCBMap.delete(callbackId);\n    }\n    _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'basedata removeOrgChangeListener cbId=%s,succ=%s\', callbackId, result);\n  }\n  /**\n   * 注册组列表变化回调\n   *\n   * \n   * @param {GroupCallback} callback\n   * @returns  {string} callbackId 回调id， {@link removeGroupChangeListener} 需要根据这个id找到对应的回调函数\n   */\n  addGroupChangeListener(callback) {\n    const guid = _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid();\n    this.#groupCBMap.set(guid, callback);\n    _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'basedata addGroupChangeListener cbId=%s\', guid);\n    return guid;\n  }\n\n  /**\n   *  根据callbackId删除之前注册的回调\n   * \n   * @param {string} callbackId \n   */\n  removeGroupChangeListener(callback_id) {\n    let result;\n    if (callback_id) {\n      result = this.#groupCBMap.delete(callback_id);\n    }\n    _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'basedata removeGroupChangeListener cbId=%s,succ=%s\', callback_id, result);\n  }\n  addDispatcherChangeListener(callback) {\n    const guid = _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid();\n    this.#dispatcherCBMap.set(guid, callback);\n    _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].info(\'basedata addDispatcherChangeListener cbId=%s\', guid);\n    return guid;\n  }\n\n  /**\n   *  根据callbackId删除之前注册的回调\n   * \n   * @param {string} callbackId \n   */\n  removeDispatcherChangeListener(callbackId) {\n    let result;\n    if (callbackId) {\n      result = this.#dispatcherCBMap.delete(callbackId);\n    }\n    _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].info(\'basedata removeGroupChangeListener cbId=%s,succ=%s\', callbackId, result);\n  }\n  /**\n   * 设置当前用户信息变更监听,因为外部无法判断推送数据中的的调度员是否是当前登录的调度员\n   * @param {function} callback \n   * @returns {string=} \n   */\n  addUserChangeListener(callback) {\n    if (!callback) {\n      return;\n    }\n    const guid = _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid();\n    this.#userChangeCBMap.set(guid, callback);\n    _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].info(\'basedata addUserChangeListener cbId=%s\', guid);\n    return guid;\n  }\n  /**\n   * 移除当前登录用户的信息变化监听\n   * @param {string} callback_id \n   */\n  removeUserChangeListener(callback_id) {\n    let result;\n    if (callback_id) {\n      result = this.#userChangeCBMap.delete(callback_id);\n    }\n    _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].info(\'basedata removeUserChangeListener cbId=%s,succ=%s\', callback_id, result);\n  }\n  /**\n    * 添加群组成员变化监听\n    * @param {function} callback \n    * @returns {string=} \n    */\n  addCrosspatchChangeListener(callback) {\n    if (!callback) {\n      return;\n    }\n    const guid = _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid();\n    this.#crosspatchChangeCBMap.set(guid, callback);\n    _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].info(\'basedata addCrosspatchChangeListener cbId=%s\', guid);\n    return guid;\n  }\n  /**\n   * 移除群组变化监听\n   * @param {string} callback_id \n   */\n  removeCrosspatchChangeListener(callback_id) {\n    let result;\n    if (callback_id) {\n      result = this.#crosspatchChangeCBMap.delete(callback_id);\n    }\n    _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].info(\'basedata removeCrosspatchChangeListener cbId=%s,succ=%s\', callback_id, result);\n  }\n  /**\n   * 添加群组成员变化监听\n   * @param {function} callback \n   * @returns {string=}\n   */\n  addCrosspatchMemberChangeListener(callback) {\n    if (!callback) {\n      return;\n    }\n    const guid = _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid();\n    this.#crosspatchMemberChangeCBMap.set(guid, callback);\n    _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].info(\'basedata addCrosspatchMemberChangeListener cbId=%s\', guid);\n    return guid;\n  }\n  /**\n   * 移除群组成员变化监听\n   * @param {string} callback_id \n   */\n  removeCrosspatchMemberChangeListener(callback_id) {\n    let result;\n    if (callback_id) {\n      result = this.#crosspatchMemberChangeCBMap.delete(callback_id);\n    }\n    _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].info(\'basedata removeCrosspatchMemberChangeListener cbId=%s,succ=%s\', callback_id, result);\n  }\n  /**\n   * 添加动态组事件监听\n   * @param {function} callback \n   */\n  addDynamicGroupChangeListener(callback) {\n    if (!callback) {\n      return;\n    }\n    const guid = _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid();\n    this.#dynamicGroupChangeCBMap.set(guid, callback);\n    _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].info(\'basedata addDynamicGroupChangeListener cbId=%s\', guid);\n    return guid;\n  }\n  /**\n   * 移除动态组变化监听\n   * @param {string} callback_id \n   */\n  removeDynamicChangeListener(callback_id) {\n    let result;\n    if (callback_id) {\n      result = this.#dynamicGroupChangeCBMap.delete(callback_id);\n    }\n    _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].info(\'basedata removeDynamicChangeListener cbId=%s,succ=%s\', callback_id, result);\n  }\n  /**\n  * 添加动态成员组事件监听\n  * @param {function} callback \n  */\n  addDynamicGroupMemberChangeListener(callback) {\n    if (!callback) {\n      return;\n    }\n    const guid = _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid();\n    this.#dynamicGroupMemberChangeCBMap.set(guid, callback);\n    _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].info(\'basedata addDynamicGroupMemberChangeListener cbId=%s\', guid);\n    return guid;\n  }\n  /**\n   * 移除动态组成员变化监听\n   * @param {string} callback_id \n   */\n  removeDynamicMamberChangeListener(callback_id) {\n    let result;\n    if (callback_id) {\n      result = this.#dynamicGroupMemberChangeCBMap.delete(callback_id);\n    }\n    _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].info(\'basedata removeDynamicMamberChangeListener cbId=%s,succ=%s\', callback_id, result);\n  }\n  /**\n  * 添加第三方会议事件监听\n  * @param {function} callback \n  */\n  addThirdConferenceChangeListener(callback) {\n    if (!callback) {\n      return;\n    }\n    const guid = _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid();\n    this.#thirdConferenceChangeCBMap.set(guid, callback);\n    _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].info(\'basedata addThirdConferenceChangeListener cbId=%s\', guid);\n    return guid;\n  }\n  /**\n   * 移除第三方会议变化监听\n   * @param {string} callback_id \n   */\n  removeThirdConferenceChangeListener(callback_id) {\n    let result;\n    if (callback_id) {\n      result = this.#thirdConferenceChangeCBMap.delete(callback_id);\n    }\n    _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].info(\'basedata removeThirdConferenceChangeListener cbId=%s,succ=%s\', callback_id, result);\n  }\n  /**\n  * 添加派接组事件监听\n  * @param {function} callback \n  */\n  addSystemPatchChangeListener(callback) {\n    if (!callback) {\n      return;\n    }\n    const guid = _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid();\n    this.#SystemPatchChangeCBMap.set(guid, callback);\n    _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].info(\'basedata addSystemPatchChangeListener cbId=%s\', guid);\n    return guid;\n  }\n  /**\n   * 移除派接组变化监听\n   * @param {string} callback_id \n   */\n  removeSystemPatchChangeListener(callback_id) {\n    let result;\n    if (callback_id) {\n      result = this.#SystemPatchChangeCBMap.delete(callback_id);\n    }\n    _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].info(\'basedata removeSystemPatchChangeListener cbId=%s,succ=%s\', callback_id, result);\n  }\n  /**\n   * 处理服务端推送过来的事件，数据需要处理一遍再传出去\n   * @param {object} event \n   * @return {boolean} 是否处理了该事件\n   */\n  #onDeviceChange(event) {\n    if (!event) {\n      return false;\n    }\n    /**\n     * @type {DeviceEvent}\n     */\n    const newEvent = {};\n    switch (event.cmd_name) {\n      case CMD_ADD_DEVICE:\n        newEvent.action = _public_constant__WEBPACK_IMPORTED_MODULE_1__.DATA_ACTION.ADD;\n        break;\n      case CMD_UPDATE_DEVICE:\n        newEvent.action = _public_constant__WEBPACK_IMPORTED_MODULE_1__.DATA_ACTION.UPDATE;\n        if (event.device) {\n          var _event$device$staff_s, _event$device$status, _event$device$status2;\n          /**\n          * @type {Device}\n          */\n          newEvent.data = {\n            guid: event.device.guid,\n            basedata_id: (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.genLocalGuid)(event.device, _public_constant__WEBPACK_IMPORTED_MODULE_1__.id_key_name.device),\n            number: event.device.device_id,\n            alias: event.device.device_alias,\n            certified_name: (_event$device$staff_s = event.device.staff_short_info) === null || _event$device$staff_s === void 0 ? void 0 : _event$device$staff_s.staff_name,\n            status: {\n              narrowband: (_event$device$status = event.device.status) === null || _event$device$status === void 0 ? void 0 : _event$device$status.online,\n              broadband: (_event$device$status2 = event.device.status) === null || _event$device$status2 === void 0 ? void 0 : _event$device$status2.poc_online\n            }\n          };\n        }\n        break;\n      case CMD_DELETE_DEVICE:\n        newEvent.action = _public_constant__WEBPACK_IMPORTED_MODULE_1__.DATA_ACTION.DELETE;\n        break;\n      case CMD_DEVICE_STATE:\n        //上下线状态变更\n        newEvent.action = _public_constant__WEBPACK_IMPORTED_MODULE_1__.DATA_ACTION.ONLINE;\n        /**\n         * @type {DeviceStateEvent}\n         */\n        const tEvent = event;\n        newEvent.data = [];\n        tEvent.device_list.forEach(item => {\n          var _item$status4, _item$status5;\n          // item中其实没有puc_id字段，这个字段在外部\n          item.puc_id = tEvent.puc_id;\n          /**\n           * @type {Device}\n           */\n          const device = {\n            guid: item.device_guid,\n            basedata_id: (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.genLocalGuid)(item, _public_constant__WEBPACK_IMPORTED_MODULE_1__.id_key_name.device),\n            number: item.device_id,\n            status: {\n              narrowband: (_item$status4 = item.status) === null || _item$status4 === void 0 ? void 0 : _item$status4.online,\n              broadband: (_item$status5 = item.status) === null || _item$status5 === void 0 ? void 0 : _item$status5.poc_online\n            }\n          };\n          newEvent.data.push(device);\n        });\n        break;\n      case CMD_DEVICE_LOCK_STATE:\n        /**\n         * cmd_guid: "d59901c7-65b5-4378-a14e-0daf81328310"\n         * cmd_name: "update_device_lock_status_evt"\n         * device_guid: "Device:00082:356:50040221@puc.com"\n         * lock_state: 1\n         * pre_lock_state: 0\n         * product_name: "PUC"\n         * puc_id: "00082"\n         * realm: "puc.com"\n         * recv_src_addr: ""\n         * system_id: "356"\n         * system_type: 0\n         * user_id: "1512"\n         * version: "10"\n         * \n         * 消息体中没有device_id和number_type,无法生成本地guid\n         */\n        newEvent.action = _public_constant__WEBPACK_IMPORTED_MODULE_1__.DATA_ACTION.UPDATE;\n        /**\n         * @type {Device}\n         */\n        const data = {};\n        data.guid = event.device_guid;\n        data.status = {};\n        data.status.lock_state = event.lock_state;\n        data.basedata_id = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.genLocalGuid)(event, _public_constant__WEBPACK_IMPORTED_MODULE_1__.id_key_name.device);\n        newEvent.data = data;\n        break;\n      default:\n        return false;\n    }\n    //todo 这里后续可能补充内容\n    this.#deviceCBMap.forEach(value => {\n      _littleLemon__WEBPACK_IMPORTED_MODULE_7__["default"].basedata.#safeInvoke(value, newEvent);\n    });\n    return true;\n  }\n  #onLockStateChange(event) {\n    if ((event === null || event === void 0 ? void 0 : event.cmd_name) !== CMD_DEVICE_LOCK_STATE) {\n      return false;\n    }\n    /**\n        * cmd_guid: "d59901c7-65b5-4378-a14e-0daf81328310"\n        * cmd_name: "update_device_lock_status_evt"\n        * device_guid: "Device:00082:356:50040221@puc.com"\n        * lock_state: 1\n        * pre_lock_state: 0\n        * product_name: "PUC"\n        * puc_id: "00082"\n        * realm: "puc.com"\n        * recv_src_addr: ""\n        * system_id: "356"\n        * system_type: 0\n        * user_id: "1512"\n        * version: "10"\n        * \n        * 消息体中没有device_id和number_type,无法生成本地guid\n        */\n  }\n  /**\n   * \n   * @param {object} event \n   * @return {boolean} 是否处理了该事件\n   */\n  #onGroupChange(event) {\n    if (!event) {\n      return false;\n    }\n    /**\n     * @type {GroupEvent}\n     */\n    const newEvent = {};\n    switch (event.cmd_name) {\n      case CMD_ADD_GROUP:\n        newEvent.action = _public_constant__WEBPACK_IMPORTED_MODULE_1__.DATA_ACTION.ADD;\n        break;\n      case CMD_UPDATE_GROUP:\n        newEvent.action = _public_constant__WEBPACK_IMPORTED_MODULE_1__.DATA_ACTION.UPDATE;\n        break;\n      case CMD_DELETE_GROUP:\n        newEvent.action = _public_constant__WEBPACK_IMPORTED_MODULE_1__.DATA_ACTION.DELETE;\n        break;\n      default:\n        return false;\n    }\n    //todo 这里后续可能补充内容\n    this.#groupCBMap.forEach(value => {\n      this.#safeInvoke(value, newEvent);\n    });\n    return true;\n  }\n  /**\n   * 组织架构节点变更\n   * @param {object} event \n   * @return {boolean} 是否处理了该事件\n   */\n  #onOrgChange(event) {\n    var _event$organization_i, _event$organization_i2, _event$organization_i3;\n    if (!event) {\n      return false;\n    }\n    /**\n     * @type {OrgEvent}\n     */\n    const newEvent = {};\n    switch (event.cmd_name) {\n      case CMD_ADD_ORG:\n        newEvent.action = _public_constant__WEBPACK_IMPORTED_MODULE_1__.DATA_ACTION.ADD;\n        newEvent.data = {\n          guid: (_event$organization_i = event.organization_info) === null || _event$organization_i === void 0 ? void 0 : _event$organization_i.guid,\n          org_alias: (_event$organization_i2 = event.organization_info) === null || _event$organization_i2 === void 0 ? void 0 : _event$organization_i2.org_alias,\n          org_identifier: (_event$organization_i3 = event.organization_info) === null || _event$organization_i3 === void 0 ? void 0 : _event$organization_i3.org_identifier\n        };\n        break;\n      case CMD_UPDATE_ORG:\n      case CMD_DATA_SYNC:\n        newEvent.action = _public_constant__WEBPACK_IMPORTED_MODULE_1__.DATA_ACTION.UPDATE;\n        const data_type = event.data_type;\n        if (data_type === \'device\') {\n          event.cmd_name = CMD_UPDATE_DEVICE;\n          this.#onDeviceChange(event);\n          return true;\n        } else if (data_type === \'group\') {\n          event.cmd_name = CMD_UPDATE_GROUP;\n          this.#onGroupChange(event);\n          return true;\n        }\n        // else if (data_type === \'organization\')\n        break;\n      case CMD_DELETE_ORG:\n        //服务端没有给具体的数据，只有信令\n        newEvent.action = _public_constant__WEBPACK_IMPORTED_MODULE_1__.DATA_ACTION.DELETE;\n        break;\n      default:\n        return false;\n    }\n\n    //todo 这里后续可能补充内容\n    this.#orgCBMap.forEach(value => {\n      this.#safeInvoke(value, newEvent);\n    });\n    return true;\n  }\n  /**\n   * 调度员（自己或者别人）信息变更\n   * @param {object} event \n   * @returns \n   */\n  #onDispatcherChange(event) {\n    var _event$status, _event$account, _event$account2, _event$account3, _event$account4, _event$account4$statu, _event$account5, _event$status2;\n    if (!event || !event.cmd_name) {\n      return false;\n    }\n    /**\n     * @type {DispatcherEvent}\n     */\n    const newEvent = {};\n    switch (event.cmd_name) {\n      case CMD_DISPATCHER_ADD:\n        //新增调度员\n        newEvent.action = _public_constant__WEBPACK_IMPORTED_MODULE_1__.DATA_ACTION.ADD;\n        newEvent.data = {\n          guid: event.guid,\n          basedata_id: (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.genLocalGuid)(event.account, _public_constant__WEBPACK_IMPORTED_MODULE_1__.id_key_name.dispatcher),\n          // realm: event.realm,\n          alias: event.dispatcher_name,\n          acc: event.dispatcher_account,\n          // number: event.dispatcher_no,\n          online: (_event$status = event.status) === null || _event$status === void 0 ? void 0 : _event$status.online\n        };\n        break;\n      case CMD_DISPATCHER_UPDATE:\n        //调度员更新，有可能是自己，也可能是别的调度员\n        //todo  这里是否要区分自己和其它的逻辑？\n        newEvent.action = _public_constant__WEBPACK_IMPORTED_MODULE_1__.DATA_ACTION.UPDATE;\n        newEvent.data = {\n          guid: (_event$account = event.account) === null || _event$account === void 0 ? void 0 : _event$account.guid,\n          basedata_id: (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.genLocalGuid)(event.account, _public_constant__WEBPACK_IMPORTED_MODULE_1__.id_key_name.dispatcher),\n          alias: (_event$account2 = event.account) === null || _event$account2 === void 0 ? void 0 : _event$account2.dispatcher_name,\n          number: (_event$account3 = event.account) === null || _event$account3 === void 0 ? void 0 : _event$account3.dispatcher_account,\n          online: (_event$account4 = event.account) === null || _event$account4 === void 0 ? void 0 : (_event$account4$statu = _event$account4.status) === null || _event$account4$statu === void 0 ? void 0 : _event$account4$statu.online\n        };\n        if (((_event$account5 = event.account) === null || _event$account5 === void 0 ? void 0 : _event$account5.guid) === _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_guid) {\n          return this.#onUserChange(newEvent);\n        }\n        break;\n      case CMD_DISPATCHER_DELETE:\n        //删除调度员\n        newEvent.action = _public_constant__WEBPACK_IMPORTED_MODULE_1__.DATA_ACTION.DELETE;\n        newEvent.data = {\n          guid: event.guid,\n          basedata_id: (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.genLocalGuid)(event, _public_constant__WEBPACK_IMPORTED_MODULE_1__.id_key_name.dispatcher)\n        };\n        break;\n      case CMD_DISPATCHER_STATE:\n        newEvent.action = _public_constant__WEBPACK_IMPORTED_MODULE_1__.DATA_ACTION.ONLINE;\n        newEvent.data = {\n          guid: event.dispatcher_guid,\n          basedata_id: (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.genLocalGuid)(event.account, _public_constant__WEBPACK_IMPORTED_MODULE_1__.id_key_name.dispatcher),\n          online: (_event$status2 = event.status) === null || _event$status2 === void 0 ? void 0 : _event$status2.online\n        };\n        break;\n      default:\n        return false;\n    }\n    //todo 这里后续可能补充内容\n    this.#dispatcherCBMap.forEach(value => {\n      this.#safeInvoke(value, newEvent);\n    });\n    return true;\n  }\n  /**\n   * 当前用户信息变更\n   * @param {object} event \n   * @return {boolean} 返回 true，是否处理，只要进来这里就认为是处理掉了\n   */\n  #onUserChange(event) {\n    //todo 这里后续可能补充内容\n    this.#userChangeCBMap.forEach(value => {\n      this.#safeInvoke(value, newEvent);\n    });\n    return true;\n  }\n  /**\n   * 群组变更事件\n   * @param {object} event \n   * @param {string} event.cmd_name \n   * @returns {boolean} 是否消费掉了事件\n   */\n  #onCrosspatchChange(event) {\n    var _event$crosspatch, _event$crosspatch$mem;\n    let newEvent = {\n      action: undefined,\n      data: undefined\n    };\n    switch (event.cmd_name) {\n      // 群组信息更新，,新增的群组也是走这个命令，\n      // 因为新增是分两步，第一新增空成员群组，2更新群组（加成员），\n      // 第一步其它调度员没有权限查看，\n      // 第二步成员得在调度员的组织架构列表权限下，才会收到通知，\n      // 即调度员有权限在组织架构列表中查看到群组的成员才会收到通知\n      case CMD_UPDATE_CROSS_PATCH:\n        newEvent.data = this.#convertCrosspatch(event.crosspatch);\n        //本地检索群组是否存在，存在则是更新，不存在则是新增\n        if (this.#crosspatchGuidMap.has(newEvent.data.guid)) {\n          newEvent.action = _public_constant__WEBPACK_IMPORTED_MODULE_1__.DATA_ACTION.UPDATE;\n        } else {\n          newEvent.action = _public_constant__WEBPACK_IMPORTED_MODULE_1__.DATA_ACTION.ADD;\n          this.#crosspatchGuidMap.set(newEvent.data.guid, undefined);\n        }\n        //处理成员\n        if (((_event$crosspatch = event.crosspatch) === null || _event$crosspatch === void 0 ? void 0 : (_event$crosspatch$mem = _event$crosspatch.member_list) === null || _event$crosspatch$mem === void 0 ? void 0 : _event$crosspatch$mem.length) > 0) {\n          var _event$crosspatch2;\n          newEvent.data.member_list = (_event$crosspatch2 = event.crosspatch) === null || _event$crosspatch2 === void 0 ? void 0 : _event$crosspatch2.member_list.map(item => this.#convertCrosspatchMember(item));\n        }\n        break;\n      //群组被删除了，只会携带一个guid\n      case CMD_DELETE_CROSS_PATCH:\n        newEvent = {\n          action: _public_constant__WEBPACK_IMPORTED_MODULE_1__.DATA_ACTION.DELETE,\n          /**\n           * @type {Crosspatch}\n           */\n          data: {\n            guid: event.guid\n          }\n        };\n        break;\n      default:\n        return false;\n    }\n    this.#crosspatchChangeCBMap.forEach(value => {\n      this.#safeInvoke(value, newEvent);\n    });\n    return true;\n  }\n  /**\n   * 群组变更事件\n   * @param {object} event \n   * @param {string} event.cmd_name \n   * @returns {boolean} 是否消费掉了事件\n   * \n   */\n  #onCrosspatchMemberChange(event) {\n    let newEvent = {\n      action: undefined,\n      data: undefined\n    };\n    switch (event.cmd_name) {\n      case CMD_REMOVE_CROSS_PATCH_MEMBER:\n        //移除成员\n        newEvent.action = _public_constant__WEBPACK_IMPORTED_MODULE_1__.DATA_ACTION.DELETE;\n        newEvent.data = {\n          crosspatch_guid: event.crosspatch_guid,\n          member_guid: event.member_guid\n        };\n        break;\n      case CMD_ADD_CROSS_PATCH_MEMBER:\n        //新增成员,没有携带别名字段，因为这个接口服务端说没调试\n        /**\n         * {\n        "product_name":"PUC",\n        "version":"10",\n        "cmd_name":"add_crosspatch_member",\n        "cmd_guid":"d2ff2f25-985b-4a49-87d6-ba81c2f61d27",\n        "user_id":"1513",\n        "realm":"mcs.com",\n        "crosspatch_guid":"d3bd6cd4-d377-44ba-849b-66c5934b5893",\n        "member":{\n          "member_guid":"68622282-4b25-4824-baf0-116914d55590",\n          "puc_id":"00001",\n          "device_guid":"Device:00001:890:9999993@mcs.com",\n          "crosspatch_guid":"d3bd6cd4-d377-44ba-849b-66c5934b5893",\n          "number":"9999993",\n          "number_type":0,\n          "sap_guid":"",\n          "system_id":"890",\n          "call_priority":0,\n          "version_seq":0,\n          "grant_mode":0,\n          "currentgrp":0,\n          "realm":"mcs.com",\n          "vox_delay":8,\n          "time_slot":""\n        }\n        }\n         */\n        newEvent.action = _public_constant__WEBPACK_IMPORTED_MODULE_1__.DATA_ACTION.ADD;\n        newEvent.data = {\n          crosspatch_guid: event.crosspatch_guid,\n          member: this.#convertCrosspatchMember(event.member)\n        };\n        break;\n      default:\n        return false;\n    }\n    this.#crosspatchMemberChangeCBMap.forEach(value => {\n      this.#safeInvoke(value, newEvent);\n    });\n    return true;\n  }\n  /**\n   * 动态组变更事件\n   * @param {object} jsonData \n   * @param {string} jsonData.cmd_name \n   */\n  #onDynamicGroupChange(jsonData) {\n    const event = {\n      action: undefined,\n      data: undefined\n    };\n    switch (jsonData.cmd_name) {\n      case CMD_ADD_DYNAMICGROUP:\n        //调度员创建动态组，，目前创建者才会收到这个通知\n        event.action = _public_constant__WEBPACK_IMPORTED_MODULE_1__.DATA_ACTION.ADD;\n        event.data = this.#convertDynamicGroup(jsonData);\n        break;\n      case CMD_UPDATE_DYNAMICGROUP:\n        event.action = _public_constant__WEBPACK_IMPORTED_MODULE_1__.DATA_ACTION.UPDATE;\n        event.data = this.#convertDynamicGroup(jsonData);\n        break;\n      case CMD_DELETE_DYNAMICGROUP:\n        event.action = _public_constant__WEBPACK_IMPORTED_MODULE_1__.DATA_ACTION.DELETE;\n        event.data = {\n          guid: jsonData.dgna_guid\n        };\n        break;\n    }\n    if (event.action) {\n      this.#dynamicGroupChangeCBMap.forEach(cb => {\n        this.#safeInvoke(cb, event);\n      });\n      return true;\n    }\n  }\n  /**\n   * 动态组通知的成员结构-供外部使用\n   * @typedef AddDGNAMemberStruc\n   * @property {string} guid\n   * @property {string} number\n   * @property {string} basedata_id\n   \n   */\n  /**\n   * 动态组通知结构-供外部使用\n   * @typedef AddDGNAMemberDataStruc\n   * @property {string} guid\n   * @property {Array.<AddDGNAMemberStruc>} member_list\n   */\n  /**\n   * 缓存还没给外部发出去的 收到的 新增动态组成员的通知\n   * key是动态组guid，value的data对应动态组应该要处理的新增的成员，value的timer的延迟任务，时间到了就会发给外部，期间如果该动态组有新的新增成员通知，则合并数据\n   * 如果事件处理掉，要删除key-value\n   * @type {Map<string,AddDGNAMemberDataStruc>}\n   */\n  #dyngMemberAddedMap = new Map();\n  /**\n   * 给删除动态组成员用的，具体参考{@link #dyngMemberAddedMap}\n   */\n  #dyngMemberRemovedMap = new Map();\n  // 新增动态组成员的延时任务\n  addDyngMemberTimer;\n  /**\n   * 动态组变更事件\n   * @param {object} jsonData \n   * @param {string} jsonData.cmd_name \n   * @param {string} jsonData.dgna_guid \n   */\n  #onDynamicMemberChange(jsonData) {\n    const event = {\n      action: undefined,\n      data: undefined\n    };\n    switch (jsonData.cmd_name) {\n      case CMD_ADD_DYNAMICGROUP_MEMBER:\n        //每个成员推一次，这里要做汇聚\n        //map中已经存了数据\n        if (this.#dyngMemberAddedMap.has(jsonData.dgna_guid)) {\n          //合并数据\n          const value = this.#dyngMemberAddedMap.get(jsonData.dgna_guid);\n          //todo\n          value.data.member_list.push(this.#convertDynamicGroupMember(jsonData));\n        } else {\n          //没有数据，创建、保存,并启动定时器\n          this.#dyngMemberAddedMap.set(jsonData.dgna_guid, {\n            guid: jsonData.dgna_guid,\n            member_list: [this.#convertDynamicGroupMember(jsonData)]\n          });\n        }\n        this.#startAddDyngMemberTimer(jsonData.dgna_guid);\n        return true;\n      case CMD_REMOVE_DYNAMICGROUP_MEMBER:\n        // 删除动态组成员\n        event.action = _public_constant__WEBPACK_IMPORTED_MODULE_1__.DATA_ACTION.DELETE;\n        //map中已经存了数据\n        if (this.#dyngMemberRemovedMap.has(jsonData.dgna_guid)) {\n          //合并数据\n          const value = this.#dyngMemberRemovedMap.get(jsonData.dgna_guid);\n          //todo\n          value.data.member_list.push({});\n        } else {\n          //没有数据，创建、保存,并启动定时器\n          this.#dyngMemberRemovedMap.set(jsonData.dgna_guid, {\n            guid: jsonData.dgna_guid,\n            member_list: [{\n              guid: jsonData.device_guid\n            }]\n          });\n        }\n        return true;\n    }\n  }\n  /**\n   * 启动动态组新增成员延时任务\n   * @param {string} guid \n   */\n  #startAddDyngMemberTimer(guid) {\n    setTimeout(() => {\n      const value = this.#dyngMemberAddedMap.get(guid);\n      this.#dynamicGroupMemberChangeCBMap.forEach(cb => {\n        this.#safeInvoke(cb, this.#getEventStruc(_public_constant__WEBPACK_IMPORTED_MODULE_1__.DATA_ACTION.ADD, value));\n      });\n    }, 300);\n  }\n  /**\n   * 启动动态组删除成员延时任务\n   * @param {string} guid \n   */\n  #startRemoveDyngMemberTimer(guid) {\n    setTimeout(() => {\n      const value = this.#dyngMemberRemovedMap.get(guid);\n      this.#dynamicGroupMemberChangeCBMap.forEach(cb => {\n        this.#safeInvoke(cb, this.#getEventStruc(_public_constant__WEBPACK_IMPORTED_MODULE_1__.DATA_ACTION.DELETE, value));\n      });\n    }, 300);\n  }\n  /**\n   * 通知外部的结构，主要是懒得重复写\n   * @param {DATA_ACTION} action \n   * @param {any} data \n   */\n  #getEventStruc(action, data) {\n    return {\n      action: action,\n      data: data\n    };\n  }\n  /**\n   * 第三方会议事件\n   * @param {object} jsonData \n   * @param {object} jsonData.cmd_name \n   */\n  #onThirdConferenceChange(jsonData) {\n    let action;\n    let data;\n    switch (jsonData === null || jsonData === void 0 ? void 0 : jsonData.cmd_name) {\n      case CMD_ADD_THIRD_CONFERENCE:\n        action = _public_constant__WEBPACK_IMPORTED_MODULE_1__.DATA_ACTION.ADD;\n        data = this.#converThirdConference(jsonData.group_info);\n        break;\n      case CMD_UPDATE_THIRD_CONFERENCE:\n        action = _public_constant__WEBPACK_IMPORTED_MODULE_1__.DATA_ACTION.UPDATE;\n        data = this.#converThirdConference(jsonData.group_info);\n        break;\n      case CMD_DELETE_THIRD_CONFERENCE:\n        action = _public_constant__WEBPACK_IMPORTED_MODULE_1__.DATA_ACTION.DELETE;\n        data = {\n          guid: jsonData.guid\n        };\n        break;\n      default:\n        return false;\n    }\n    if (action != undefined) {\n      this.#thirdConferenceChangeCBMap.forEach(value => {\n        this.#safeInvoke(value, this.#getEventStruc(action, data));\n      });\n      return true;\n    }\n  }\n  /**\n   * 派接组事件\n   * 目前添加、删除成员，更新组名 都是走更新通知\n   * @param {object} jsonData \n   * @param {object} jsonData.cmd_name \n   */\n  #onSystemPatchChange(jsonData) {\n    let action;\n    let data;\n    switch (jsonData === null || jsonData === void 0 ? void 0 : jsonData.cmd_name) {\n      case CMD_ADD_SYSTEM_PATCH:\n        action = _public_constant__WEBPACK_IMPORTED_MODULE_1__.DATA_ACTION.ADD;\n        data = this.#convertSystemPatch(jsonData);\n        break;\n      case CMD_UPDATE_SYSTEM_PATCH:\n        action = _public_constant__WEBPACK_IMPORTED_MODULE_1__.DATA_ACTION.UPDATE;\n        data = this.#convertSystemPatch(jsonData);\n        break;\n      case CMD_DELETE_SYSTEM_PATCH_MEMBER:\n        // 暂不处理，删除没有返回具体的信息，只能走更新通知。 \n        break;\n      case CMD_DELETE_SYSTEM_PATCH:\n        action = _public_constant__WEBPACK_IMPORTED_MODULE_1__.DATA_ACTION.DELETE;\n        data = {\n          guid: jsonData.guid\n        };\n        break;\n      default:\n        return false;\n    }\n    if (action != undefined) {\n      this.#SystemPatchChangeCBMap.forEach(value => {\n        this.#safeInvoke(value, this.#getEventStruc(action, data));\n      });\n      return true;\n    }\n  }\n  /**\n   * ws收到事件调用这个方法，基础数据相关事件由此分发\n   * @param {object} event \n   */\n  onEvent(event) {\n    _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'basedata onEvent:\', JSON.stringify(event));\n    let finished;\n    if (!finished) {\n      finished = this.#onOrgChange(event);\n    }\n    if (!finished) {\n      finished = this.#onDeviceChange(event);\n    }\n    if (!finished) {\n      finished = this.#onGroupChange(event);\n    }\n    if (!finished) {\n      finished = this.#onDispatcherChange(event);\n    }\n    if (!finished) {\n      finished = this.#onCrosspatchChange(event);\n    }\n    if (!finished) {\n      finished = this.#onCrosspatchMemberChange(event);\n    }\n    if (!finished) {\n      finished = this.#onDynamicGroupChange(event);\n    }\n    if (!finished) {\n      finished = this.#onDynamicMemberChange(event);\n    }\n    if (!finished) {\n      finished = this.#onThirdConferenceChange(event);\n    }\n    if (!finished) {\n      finished = this.#onSystemEvent(event);\n    }\n    if (!finished) {\n      finished = this.#onSystemPatchChange(event);\n    }\n    if (!finished) {\n      _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].warn(\'baseData,onEvent throwed:\', event);\n    }\n  }\n\n  /**\n   * 模糊查询\n   * @param {object} data\n   * @param {string} data.key_word 搜索关键字\n   * @param {number} [data.type] 查询范围\n   * @param {number} [data.size] 返回的数量,默认20\n   */\n  fuzzyQuery(data) {\n    return new Promise((resolve, reject) => {\n      if (!data || !data.key_word) {\n        resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n        });\n        return;\n      }\n      if (data.type === undefined) {\n        data.type = _public_constant__WEBPACK_IMPORTED_MODULE_1__.QUERY_TYPE.ALL;\n      }\n      const params = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION,\n        cmd_name: \'fuzzy_query_req_evt\',\n        token: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.token,\n        // puc_id: dataBase.user.puc_id,\n        puc_id: this.getRequestPucId(),\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm,\n        query_type: data.type,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n        querykey: data.key_word,\n        per_page: data.size ? data.size : 20,\n        is_user_auth_org: 1\n      };\n      _protocol_http__WEBPACK_IMPORTED_MODULE_0__["default"].postSync(params).then(resp => {\n        var _resp$querylist;\n        /**\n         * @type {ListAck}\n         */\n        const newResp = {\n          result: resp === null || resp === void 0 ? void 0 : resp.result\n        };\n        if ((resp === null || resp === void 0 ? void 0 : (_resp$querylist = resp.querylist) === null || _resp$querylist === void 0 ? void 0 : _resp$querylist.length) > 0) {\n          newResp.list = resp.querylist.map(item => {\n            let type;\n            switch (item.number_type) {\n              case _public_constant__WEBPACK_IMPORTED_MODULE_1__.NUMBER_TYPE.INDIVIDUAL:\n              case _public_constant__WEBPACK_IMPORTED_MODULE_1__.NUMBER_TYPE.ROIP_INDIVIDUAL:\n                type = _public_constant__WEBPACK_IMPORTED_MODULE_1__.QUERY_TYPE.DEVICE; //设备\n                break;\n              case _public_constant__WEBPACK_IMPORTED_MODULE_1__.NUMBER_TYPE.DC:\n              case _public_constant__WEBPACK_IMPORTED_MODULE_1__.NUMBER_TYPE.DISPATCHER:\n                type = _public_constant__WEBPACK_IMPORTED_MODULE_1__.QUERY_TYPE.PUC; //调度台\n                break;\n              case _public_constant__WEBPACK_IMPORTED_MODULE_1__.NUMBER_TYPE.DYNAMIC_GROUP:\n                type = _public_constant__WEBPACK_IMPORTED_MODULE_1__.QUERY_TYPE.DYNAMIC_GROUP; //动态组\n                break;\n              case _public_constant__WEBPACK_IMPORTED_MODULE_1__.NUMBER_TYPE.CROSS_SYS_GROUP:\n                type = _public_constant__WEBPACK_IMPORTED_MODULE_1__.QUERY_TYPE.CROSS_PATCH_GROUP; //群组\n                break;\n              case _public_constant__WEBPACK_IMPORTED_MODULE_1__.NUMBER_TYPE.SYS_PATCH:\n                type = _public_constant__WEBPACK_IMPORTED_MODULE_1__.QUERY_TYPE.CROSS_GROUP; //派接组\n                break;\n              case _public_constant__WEBPACK_IMPORTED_MODULE_1__.NUMBER_TYPE.GROUP:\n              case _public_constant__WEBPACK_IMPORTED_MODULE_1__.NUMBER_TYPE.ROIP_GROUP:\n                type = _public_constant__WEBPACK_IMPORTED_MODULE_1__.QUERY_TYPE.STATIC_GROUP; //静态组\n                break;\n            }\n            return {\n              alias: item.alias,\n              basedata_id: (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.genLocalGuid)(item, \'grp_dev_id\', true),\n              guid: item.guid,\n              type: type,\n              number: item.grp_dev_id\n            };\n          });\n        }\n        resolve(newResp);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n  /**\n   * 网关系统变动\n   * @param {object} jsonData \n   * @param {string} jsonData.cmd_name \n   * @param {System} jsonData.system \n   */\n  #onSystemEvent(jsonData) {\n    var _jsonData$system, _jsonData$system2, _jsonData$system3;\n    switch (jsonData.cmd_name) {\n      case CMD_ADD_SYSTEM:\n      case CMD_UPDATE_SYSTEM:\n        this.systemMap.set(`${jsonData === null || jsonData === void 0 ? void 0 : (_jsonData$system = jsonData.system) === null || _jsonData$system === void 0 ? void 0 : _jsonData$system.puc_id}@${jsonData === null || jsonData === void 0 ? void 0 : (_jsonData$system2 = jsonData.system) === null || _jsonData$system2 === void 0 ? void 0 : _jsonData$system2.system_id}`, jsonData === null || jsonData === void 0 ? void 0 : jsonData.system);\n        return true;\n      case CMD_DELETE_SYSTEM:\n        this.systemMap.delete(jsonData === null || jsonData === void 0 ? void 0 : (_jsonData$system3 = jsonData.system) === null || _jsonData$system3 === void 0 ? void 0 : _jsonData$system3.system_id);\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  /**\n   * \n   * @param {function} method \n   * @param {any} args\n   */\n  #safeInvoke(method, args) {\n    try {\n      method(args);\n    } catch (error) {\n      _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].error(\'safeInvoke %s, error:%s\', method, error);\n    }\n  }\n\n  /**\n   * 获取设备的详细类型\n   * @param {string} id \n   * @returns {NUMBER_TYPE|undefined} \n   */\n  getNumberType(basedata_id) {\n    _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'basedata getNumberType param:\', basedata_id);\n    const ids = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(basedata_id);\n    _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'basedata getNumberType ids:\', JSON.stringify(ids));\n    return ids === null || ids === void 0 ? void 0 : ids.number_type;\n  }\n  findSystem(basedata_id) {\n    _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'basedata getSystem param:\', basedata_id);\n    const ids = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(basedata_id);\n    return this.querySystemById(ids.puc_id, ids.system_id);\n  }\n\n  /**\n   * 根据系统类型找到相应的系统对象\n   * @param {Number} type \n   * @return {Array.<System>=}\n   */\n  findSystemByType(type) {\n    let sys = [];\n    if (!this.#loadedSystem) {\n      return _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.SYSTEM_NOT_FOUND;\n    }\n    try {\n      this.systemMap.forEach(value => {\n        if (value.system_type === type) {\n          sys.push(value);\n        }\n      });\n    } catch (error) {\n      _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'basedata findSystemByType found:\');\n    }\n    return sys;\n  }\n\n  /**\n   * 获取系统派接组列表 ，不支持上下级\n   */\n  fetchSystemPatchList() {\n    return new Promise((resolve, reject) => {\n      const param = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION,\n        cmd_name: CMD_FETCH_SYSTEM_PATCH_LIST,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm,\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id,\n        // puc_id: this.getRequestPucId(),   //不支持上下级\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id\n        // version_seq: api_constant.VERSION_SEQ,\n        // system_id: "000",\n        // number_type: 7,\n      };\n\n      _protocol_http__WEBPACK_IMPORTED_MODULE_0__["default"].postSync(param).then(resp => {\n        var _resp$syspatch_info_l;\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'fetchSystemPatchList succ\', JSON.stringify(resp));\n        /**\n         * @type {ListAck}\n         */\n        const newResp = {\n          result: resp.result,\n          list: []\n        };\n        if (newResp.result === _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.SUCCESS && ((_resp$syspatch_info_l = resp.syspatch_info_list) === null || _resp$syspatch_info_l === void 0 ? void 0 : _resp$syspatch_info_l.length) > 0) {\n          var _resp$syspatch_info_l2;\n          (_resp$syspatch_info_l2 = resp.syspatch_info_list) === null || _resp$syspatch_info_l2 === void 0 ? void 0 : _resp$syspatch_info_l2.forEach(item => {\n            /**\n             * @type {SystemPatchGroup}\n             */\n            let data = this.#convertSystemPatch(item);\n            //这里其实是有组成员的，但是成员信息不全，比如没有别名，这里就不返回了，需要的话，单独请求\n            newResp.list.push(data);\n          });\n        }\n        resolve(newResp);\n      }).catch(err => {\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].error(\'fetchSystemPatchList catched error\', err);\n        reject(err);\n      });\n    });\n  }\n\n  /**\n  * \n  * @param {object} data \n  * @returns {SystemPatch}\n  */\n  #convertSystemPatch(data) {\n    if (data) {\n      const systemPatch = {\n        guid: data.guid,\n        alias: data.alias,\n        number: data.syspatch_number,\n        basedata_id: (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.genLocalGuid)(data, \'syspatch_number\'),\n        owner: data.dispatcher_account === _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id && data.puc_id === _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id && data.realm === _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm ? 1 : 0,\n        create_time: data.create_datetime\n      };\n      if (data.syspatch_mem_list !== undefined) {\n        systemPatch.member_count = data.syspatch_mem_list ? data.syspatch_mem_list.length : 0;\n      }\n      return systemPatch;\n    }\n  }\n\n  /**\n  * 将原生动态组的成员转换成通用的设备结构\n  * @param {object} mem 动态组的成员，类型是设备\n  * @param {string} mem.member_guid 设备guid\n  * @param {string} mem.member_number 设备号码\n  * @param {string} mem.member_number_type 设备号码类型\n  * @param {string} mem.realm \n  * @param {string} mem.puc_id \n  */\n  #convertSystemPatchMember(mem, puc_id, system_id) {\n    if (mem) {\n      if (!mem.puc_id) {\n        mem.puc_id = puc_id;\n      }\n      if (!mem.system_id) {\n        mem.system_id = system_id;\n      }\n      return {\n        guid: mem.guid,\n        basedata_id: (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.genLocalGuid)({\n          puc_id: mem.puc_id,\n          system_id: mem.system_id,\n          number: mem.member_number,\n          number_type: mem.member_number_type,\n          time_slot: "",\n          realm: mem.realm\n        }, \'number\'),\n        number: mem.member_number,\n        alias: mem.alias\n      };\n    }\n  }\n\n  /**\n  * 获取派接组成员\n  * @param {object} systemPatch \n  * @param {string} systemPatch.syspatch_guid 派接组guid，唯一标识\n  * @param {string} systemPatch.number 派接组号码\n  * @param {string} systemPatch.basedata_id 派接组基础数据id\n  * @param {string} systemPatch.alias 派接组别名\n  */\n  fetchSystemPatchMember(systemPatch) {\n    _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'fetchSystemPatchMember param\', JSON.stringify(systemPatch));\n    if (!systemPatch || !systemPatch.syspatch_guid || !systemPatch.basedata_id || !systemPatch.number) {\n      _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].warn(\'basedata fetchSystemPatchMember interupt,data\', JSON.stringify(systemPatch));\n      return Promise.resolve({\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n      });\n    }\n    return new Promise((resolve, reject) => {\n      const ids = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(systemPatch.basedata_id);\n      const param = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION,\n        cmd_name: CMD_FETCH_SYSTEM_PATCH_MEMBER,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm,\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n        version_seq: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION_SEQ,\n        syspatch_info: {\n          syspatch_num_guid: systemPatch.syspatch_guid,\n          syspatch_number: systemPatch.number,\n          puc_id: ids === null || ids === void 0 ? void 0 : ids.puc_id,\n          alias: systemPatch.alias\n        }\n      };\n      _protocol_http__WEBPACK_IMPORTED_MODULE_0__["default"].postSync(param).then(resp => {\n        var _resp$member_list4;\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'fetchSystemPatchMember succ\', JSON.stringify(resp));\n        /**\n         * @type {ListAck}\n         */\n        const newResp = {\n          result: resp.result,\n          list: []\n        };\n        if (newResp.result === _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.SUCCESS && ((_resp$member_list4 = resp.member_list) === null || _resp$member_list4 === void 0 ? void 0 : _resp$member_list4.length) > 0) {\n          var _resp$member_list5;\n          (_resp$member_list5 = resp.member_list) === null || _resp$member_list5 === void 0 ? void 0 : _resp$member_list5.forEach(item => {\n            newResp.list.push(this.#convertSystemPatchMember(item, ids.puc_id, ids.system_id));\n          });\n        }\n        resolve(newResp);\n      }).catch(err => {\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].error(\'fetchDynamicGroupList catched error\', err);\n        reject(err);\n      });\n    });\n  }\n\n  /**\n     * 删除派接组\n     * @param {object} data\n     * @param {string} data.syspatch_guid 派接组的guid，不可更改\n     * @param {string} data.basedata_id 派接组的基础数据id，不可更改\n     *  \n     */\n  deleteSystemPatch(data) {\n    _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'deleteSystemPatch\', JSON.stringify(data));\n    if (!data || !data.syspatch_guid || !data.basedata_id) {\n      _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].warn(\'basedata deleteSystemPatch interupt,param\', JSON.stringify(data));\n      return Promise.resolve({\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n      });\n    }\n    return new Promise((resolve, reject) => {\n      const ids = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(data.basedata_id);\n      const param = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION,\n        cmd_name: CMD_DELETE_SYSTEM_PATCH,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id,\n        system_id: ids.system_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm,\n        syspatch_guid: data.syspatch_guid,\n        number_type: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.number_type\n        // dgna_alias: data.alias,\n        // dispatcher_account: dataBase.user.user_id,\n        // end2endencryption: data.encryption\n      };\n\n      _protocol_http__WEBPACK_IMPORTED_MODULE_0__["default"].postSync(param).then(resp => {\n        resolve({\n          result: resp.result\n        });\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  }\n\n  /**\n  * 创建派接组，，其中包含创建派接组和添加成员两个步骤，如果添加成员失败，把添加失败的成员列表返回去\n  * 派接组成员不能跨系统，所有成员以及派接组都属于同一个系统, 成员也不能是多级。 不支持多级\n  * @param {object} data \n  * @param {string} data.alias 派接组的别名\n  * @param {string} [data.encryption] 组内通信是否加密 0否 1是 默认1\n  * @param {Array.<Group>} data.member_list 派接组的成员\n  */\n  createSystemPatch(data) {\n    var _data$member_list4;\n    _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'createSystemPatch\', JSON.stringify(data));\n    // 必须要有成员才好确定归属的系统，因为system_id这个字段没暴露出去\n    if (!data || !data.alias || !(((_data$member_list4 = data.member_list) === null || _data$member_list4 === void 0 ? void 0 : _data$member_list4.length) > 0)) {\n      _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].warn(\'basedata createSystemPatch interupt,data\', JSON.stringify(data));\n      return Promise.resolve({\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n      });\n    }\n\n    //是否是同一个系统校验\n    let system_id;\n    let puc_id = _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id;\n    for (let member of data.member_list) {\n      const ids = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(member.basedata_id);\n      const member_systemt_id = ids === null || ids === void 0 ? void 0 : ids.system_id;\n      const member_puc_id = ids === null || ids === void 0 ? void 0 : ids.puc_id;\n      const member_number_type = ids === null || ids === void 0 ? void 0 : ids.number_type;\n      if (member_number_type !== _public_constant__WEBPACK_IMPORTED_MODULE_1__.NUMBER_TYPE.GROUP && member_number_type !== _public_constant__WEBPACK_IMPORTED_MODULE_1__.NUMBER_TYPE.ROIP_GROUP) {\n        //派接组只支持静态组\n        return Promise.resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.MEMBER_TYPE_ERROE\n        });\n      }\n      if (puc_id !== member_puc_id) {\n        // 什么鬼，不能跨级别的\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].warn(\'basedata createSystemPatch interupt,diff level,found $s and $s\', puc_id, member_puc_id);\n        return Promise.resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.LEVEL_CROSS_ERROR\n        });\n      }\n      if (!system_id) {\n        system_id = member_systemt_id;\n      } else if (system_id !== member_systemt_id) {\n        // 什么鬼，不能跨系统的\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].warn(\'basedata createSystemPatch interupt,diff system,found $s and $s\', system_id, member_systemt_id);\n        return Promise.resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.SYSTEM_CROSS_ERROR\n        });\n      }\n    }\n    if (data.encryption === undefined) {\n      data.encryption = 1;\n    }\n    //加密参数过滤\n    if (data.encryption < 0) {\n      data.encryption = 0;\n    }\n    if (data.encryption > 1) {\n      data.encryption = 1;\n    }\n    return new Promise((resolve, reject) => {\n      const guid = _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid();\n      const param = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION,\n        cmd_name: CMD_ADD_SYSTEM_PATCH,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id,\n        system_id: system_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n        syspatch_guid: guid,\n        syspatch_alias: data.alias,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm,\n        dispatcher_account: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n        end2endencryption: data.encryption,\n        createpuc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id\n      };\n      const ret = {\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.SUCCESS\n      };\n      _protocol_http__WEBPACK_IMPORTED_MODULE_0__["default"].postSync(param).then(res => {\n        ret.result = res.result;\n        if (res.result === _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.SUCCESS) {\n          var _data$member_list5;\n          ret.guid = guid;\n          // todo 组装成员\n          const promiseArr = [];\n          if (((_data$member_list5 = data.member_list) === null || _data$member_list5 === void 0 ? void 0 : _data$member_list5.length) > 0) {\n            data.member_list.forEach(member => {\n              promiseArr.push(this.addSystemPatchMember({\n                syspatch_guid: guid,\n                target_basedata_id: member.basedata_id,\n                target_number: member.number\n              }));\n            });\n          }\n          // 有成员，添加成员\n          if (promiseArr.length > 0) {\n            Promise.all([promiseArr]);\n          } else {\n            //没有成员，直接返回结果\n            resolve(ret);\n          }\n        } else {\n          // 创建派接组失败\n          resolve(ret);\n        }\n      }).then(res => {\n        // 添加成员结果,只要有一个失败就认为是失败\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].warn(\'basedata createSystemPatch addmember all finished,resp\', res);\n        res === null || res === void 0 ? void 0 : res.forEach(resp => {\n          if (resp.result != _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.SUCCESS) {\n            ret.result = resp.result;\n          }\n        });\n        resolve(ret);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  /**\n   * 派接组添加成员\n   * @param {object} data \n   * @param {string} data.syspatch_guid 派接组guid\n   * @param {string} [data.syspatch_basedata_id] 派接组的basedata_id\n   * @param {string} data.target_basedata_id 要添加的成员的基础数据id\n   * @param {string} data.target_number 要添加的成员的号码\n   */\n  addSystemPatchMember(data) {\n    _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'addSystemPatchMember\', JSON.stringify(data));\n    if (!data || !data.syspatch_guid || !data.target_basedata_id || !data.target_number) {\n      _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].warn(\'basedata addSystemPatchMember interupt,data\', JSON.stringify(data));\n      return Promise.resolve({\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n      });\n    }\n    const member_ids = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(data.target_basedata_id);\n    // 检测是否跨系统，因为sdk开始没有这个参数\n    if (data.syspatch_basedata_id) {\n      const group_ids = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(data.syspatch_basedata_id);\n      if (group_ids.system_id !== member_ids.system_id) {\n        return Promise.resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.SYSTEM_CROSS_ERROR\n        });\n      }\n    }\n    if (_public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id !== member_ids.puc_id) {\n      // 什么鬼，不能跨级别的\n      _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].warn(\'basedata createSystemPatch interupt,diff level,found $s and $s\', puc_id, member_ids.puc_id);\n      return Promise.resolve({\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.LEVEL_CROSS_ERROR\n      });\n    }\n    return new Promise((resolve, reject) => {\n      const guid = _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid();\n      const param = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION,\n        cmd_name: CMD_ADD_SYSTEM_PATCH_MEMBER,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm,\n        syspatch_guid: data.syspatch_guid,\n        mem_guid: guid,\n        member_number: data.target_number,\n        number_type: member_ids === null || member_ids === void 0 ? void 0 : member_ids.number_type,\n        system_id: member_ids === null || member_ids === void 0 ? void 0 : member_ids.system_id\n      };\n      _protocol_http__WEBPACK_IMPORTED_MODULE_0__["default"].postSync(param).then(resp => {\n        const simpleResp = {};\n        simpleResp.result = resp.result;\n        if (simpleResp.result === _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.SUCCESS) {\n          simpleResp.member_guid = guid;\n        }\n        resolve(simpleResp);\n      }).catch(err => {\n        // reject(err)\n        // 这里不抛reject 返回添加成员失败的错误，避免 无法区分是 创建派接组的reject 还是 添加成员的 reject\n        resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.MEMBER_ADD_ERROE\n        });\n      });\n    });\n  }\n\n  /**\n  * 移除派接组成员\n  * @param {object} data\n  * @param {string} data.syspatch_guid 派接组组的guid\n  * @param {string} data.member_guid 派接组成员在组内的guid\n  * @param {string} data.basedata_id 派接组成员的基础数据id\n  *  \n  */\n  removeSystemPatchMember(data) {\n    _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'removeSystemPatchMember\', JSON.stringify(data));\n    if (!data || !data.syspatch_guid || !data.member_guid || !data.basedata_id) {\n      _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].warn(\'basedata removeSystemPatchMember interupt,param\', JSON.stringify(data));\n      return Promise.resolve({\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n      });\n    }\n    return new Promise((resolve, reject) => {\n      const ids = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(data.basedata_id);\n      const param = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION,\n        cmd_name: CMD_DELETE_SYSTEM_PATCH_MEMBER,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id,\n        system_id: ids.system_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm,\n        syspatch_guid: data.syspatch_guid,\n        mem_guid: data.member_guid,\n        number_type: ids === null || ids === void 0 ? void 0 : ids.number_type,\n        member_number: ids === null || ids === void 0 ? void 0 : ids.what_id\n      };\n      _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'basedata removeSystemPatchMember param\', JSON.stringify(param));\n      _protocol_http__WEBPACK_IMPORTED_MODULE_0__["default"].postSync(param).then(resp => {\n        resolve({\n          result: resp.result\n        });\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  }\n\n  /**\n  * 更新派接组,只能修改派接组的信息，不能修改成员相关信息\n  * @param {object} data\n  * @param {string} data.syspatch_guid 派接组的guid，不可更改\n  * @param {string} data.number 派接组的号码，不可更改\n  * @param {string} data.basedata_id 派接组的基础数据id，不可更改\n  * @param {string} data.alias 派接组的别名，可以更改\n  * @param {string} data.encryption 派接组是否加密 可以更改\n  *  \n  */\n  updateSystemPatch(data) {\n    _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'updateSystemPatch\', JSON.stringify(data));\n    if (!data || !data.syspatch_guid || !data.number || !data.basedata_id) {\n      _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].warn(\'basedata updateSystemPatch interupt,param\', JSON.stringify(data));\n      return Promise.resolve({\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n      });\n    }\n    if (data.encryption === undefined) {\n      data.encryption = 1;\n    }\n    //加密参数过滤\n    if (data.encryption < 0) {\n      data.encryption = 0;\n    }\n    if (data.encryption > 1) {\n      data.encryption = 1;\n    }\n    return new Promise((resolve, reject) => {\n      const ids = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(data.basedata_id);\n      const param = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION,\n        cmd_name: CMD_UPDATE_SYSTEM_PATCH,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id,\n        system_id: ids.system_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm,\n        syspatch_guid: data.syspatch_guid,\n        number: data.number,\n        syspatch_alias: data.alias,\n        dispatcher_account: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n        end2endencryption: data.encryption\n      };\n      _protocol_http__WEBPACK_IMPORTED_MODULE_0__["default"].postSync(param).then(resp => {\n        resolve({\n          result: resp.result\n        });\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  }\n\n  /**\n  * 遥晕\n  * @param {object} data\n  * @param {string} data.basedata_id 设备的基础数据id，不可更改\n  * @param {string} data.device_guid 设备的guid，不可更改\n  */\n  deviceStun(data) {\n    _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'deviceStun\', JSON.stringify(data));\n    return new Promise((resolve, reject) => {\n      if (!data || !data.basedata_id || !data.device_guid) {\n        return resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n        });\n      }\n      const ids = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(data.basedata_id);\n      const params = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION,\n        cmd_name: CMD_DEVICE_STUN,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm,\n        system_id: ids.system_id,\n        device_guid: data.device_guid,\n        device_id: ids.what_id,\n        dispatcher_guid: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_guid,\n        dispatcher_name: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id\n      };\n      _protocol_http__WEBPACK_IMPORTED_MODULE_0__["default"].postSync(params).then(resp => {\n        resolve({\n          result: resp.result\n        });\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  }\n  /**\n  * 遥醒\n  * @param {object} data\n  * @param {string} data.basedata_id 设备的基础数据id，不可更改\n  * @param {string} data.device_guid 设备的guid，不可更改\n  */\n  deviceRevive(data) {\n    _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'deviceRevive\', JSON.stringify(data));\n    return new Promise((resolve, reject) => {\n      if (!data || !data.basedata_id || !data.device_guid) {\n        return resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n        });\n      }\n      const ids = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(data.basedata_id);\n      const params = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION,\n        cmd_name: CMD_DEVICE_REVIVE,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm,\n        system_id: ids.system_id,\n        device_guid: data.device_guid,\n        device_id: ids.what_id,\n        dispatcher_guid: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_guid,\n        dispatcher_name: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id\n      };\n      _protocol_http__WEBPACK_IMPORTED_MODULE_0__["default"].postSync(params).then(resp => {\n        resolve({\n          result: resp.result\n        });\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  }\n  /**\n  * 遥毙\n  * @param {object} data\n  * @param {string} data.basedata_id 设备的基础数据id，不可更改\n  * @param {string} data.device_guid 设备的guid，不可更改\n  */\n  deviceKill(data) {\n    _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'deviceRevive\', JSON.stringify(data));\n    return new Promise((resolve, reject) => {\n      if (!data || !data.basedata_id || !data.device_guid) {\n        return resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n        });\n      }\n      const ids = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(data.basedata_id);\n      const params = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION,\n        cmd_name: CMD_DEVICE_KILL,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm,\n        system_id: ids.system_id,\n        device_guid: data.device_guid,\n        device_id: ids.what_id,\n        dispatcher_guid: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_guid,\n        dispatcher_name: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id\n      };\n      _protocol_http__WEBPACK_IMPORTED_MODULE_0__["default"].postSync(params).then(resp => {\n        resolve({\n          result: resp.result\n        });\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  }\n\n  /**\n    * 请求puc 列表。\n    */\n  async fetchPucList() {\n    return new Promise((resolve, reject) => {\n      const param = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION,\n        cmd_name: \'puc_list_request\',\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm\n      };\n      _protocol_http__WEBPACK_IMPORTED_MODULE_0__["default"].postSync(param).then(resp => {\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug("fetchPucList resp ", JSON.stringify(resp));\n        const resultData = {\n          result: resp.result,\n          puc_list: []\n        };\n        if (resp.result === 0) {\n          resp.puc_list.forEach(item => {\n            resultData.puc_list.push({\n              puc_id: item.puc_id,\n              puc_name: item.puc_name\n            });\n          });\n        }\n        this.pucList = resultData.puc_list;\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug("fetchPucList resultData ", JSON.stringify(resultData));\n        resolve(resultData);\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  }\n\n  /**\n  * 设置基础数据的pucid，用于获取该pucid下的基础数据\n  * @param {object} data\n  * @param {string} data.puc_id \n  */\n  setBasedataPucId(data) {\n    _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'setBasedataPucId\', JSON.stringify(data));\n    return new Promise((resolve, reject) => {\n      var _this$pucList;\n      if (!data || !data.puc_id) {\n        return resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n        });\n      }\n      var ret = 0;\n      if (this.pucList && ((_this$pucList = this.pucList) === null || _this$pucList === void 0 ? void 0 : _this$pucList.length) > 0) {\n        if (data.puc_id === _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id) {\n          // 如果是本级，设置为null\n          this.basedataPucId = null;\n        } else {\n          const pucData = this.pucList.find(v => v.puc_id === data.puc_id);\n          if (!pucData) {\n            // 传进来的pucid 在上下级列表找不到\n            ret = _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.LEVEL_CROSS_ERROR;\n          } else {\n            this.basedataPucId = data.puc_id;\n          }\n        }\n      } else {\n        // 没有puclist 就和 登陆返回的pucid 比较\n        if (data.puc_id !== _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id) {\n          ret = _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.LEVEL_CROSS_ERROR;\n        } else {\n          // 如果是本级，设置为null\n          this.basedataPucId = null;\n        }\n      }\n      if (ret === 0) {\n        // 切换成功需要重新获取 系统列表\n        this.fetchSystemList();\n      }\n      resolve({\n        result: ret\n      });\n    });\n  }\n  /** \n  * 获取当前请求的pucid，适配多级\n  */\n  getRequestPucId() {\n    if (!this.basedataPucId) {\n      // 为null 即为本级 或者 传进来的pucid 不对。\n      return _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id;\n    } else {\n      return this.basedataPucId;\n    }\n  }\n\n  /* 云台控制 start */\n  /**\n  *  云台控制\n  * @param {object} data\n  * @param {string} data.basedata_id 设备的基础数据id，不可更改\n  * @param {number} data.operate_type  1 开始云台控制 ptz_ctrl 2 结束云台控制 stop_ptz_ctrl\n  * @param {number} data.operate_action  1 cradle_pan_left（左移动） 2 cradle_pan_right（右移动）3 cradle_tilt_up（上移动）4 cradle_tilt_down（下移动）\n  *                                       5 zoom_lens_big（图像放大）6 zoom_lens_small（图像缩小）\n  * @param {number} data.operate_speed  1 低速0x33 2 中速0x99   3   高速 0xFF  默认高速\n  * \n  */\n  deviceCtl(data) {\n    _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug(\'deviceCtl\', JSON.stringify(data));\n    return new Promise((resolve, reject) => {\n      if (!data || !data.basedata_id || data.operate_type === undefined || data.operate_action === undefined) {\n        return resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n        });\n      }\n      const ids = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(data.basedata_id);\n      const params = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_1__.api_constant.VERSION,\n        cmd_name: "system_ctrl_msg",\n        sub_cmd_name: "device_ctrl",\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_5__["default"].guid(),\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.puc_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].user.realm,\n        system_id: ids.system_id,\n        content: {\n          device_id: ids.what_id,\n          operation: data.operate_type === 1 ? \'ptz_ctrl\' : \'stop_ptz_ctrl\',\n          ptz_speed: "0xFF"\n        }\n      };\n      switch (data.operate_action) {\n        case 1:\n          params.content.ptz_cmd = \'cradle_pan_left\';\n          break;\n        case 2:\n          params.content.ptz_cmd = \'cradle_pan_right\';\n          break;\n        case 3:\n          params.content.ptz_cmd = \'cradle_tilt_up\';\n          break;\n        case 4:\n          params.content.ptz_cmd = \'cradle_tilt_down\';\n          break;\n        case 5:\n          params.content.ptz_cmd = \'zoom_lens_big\';\n          break;\n        case 6:\n          params.content.ptz_cmd = \'zoom_lens_small\';\n          break;\n        default:\n          params.content.ptz_cmd = \'cradle_pan_left\';\n          break;\n      }\n      if (data.operate_speed !== undefined) {\n        if (data.operate_speed === 1) {\n          params.content.ptz_speed = \'0x33\';\n        } else if (data.operate_speed === 2) {\n          params.content.ptz_speed = \'0x99\';\n        }\n      }\n      const obj = {\n        method: \'post\',\n        url: \'/has\',\n        async: false,\n        data: params\n      };\n      // 目前服务端返回的数据有问题，没有带data\n      _protocol_http__WEBPACK_IMPORTED_MODULE_0__["default"].postNormalNoData(obj).then(resp => {\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug("deviceCtl resp", resp);\n        resolve({\n          result: resp.result\n        });\n      }).catch(error => {\n        _common_log__WEBPACK_IMPORTED_MODULE_4__["default"].debug("deviceCtl error", error);\n        reject(error);\n      });\n    });\n  }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new BaseData());\n\n//# sourceURL=webpack://lemon/./lemon/modules/baseData.js?'
          );

          /***/
        },

      /***/ "./lemon/modules/call.js":
        /*!*******************************!*\
  !*** ./lemon/modules/call.js ***!
  \*******************************/
        /***/ (
          __unused_webpack_module,
          __webpack_exports__,
          __webpack_require__
        ) => {
          "use strict";
          eval(
            '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _common_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/utils */ "./lemon/common/utils.js");\n/* harmony import */ var _public_constant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../public/constant */ "./lemon/public/constant.js");\n/* harmony import */ var _common_log__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/log */ "./lemon/common/log.js");\n/* harmony import */ var _protocol_http__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../protocol/http */ "./lemon/protocol/http.js");\n/* harmony import */ var _protocol_webrtc__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocol/webrtc */ "./lemon/protocol/webrtc.js");\n/* harmony import */ var _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../public/baseRequest */ "./lemon/public/baseRequest.js");\n/* harmony import */ var _common_sessionFactory__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../common/sessionFactory */ "./lemon/common/sessionFactory.js");\n/* harmony import */ var _modules_common__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../modules/common */ "./lemon/modules/common.js");\n/* harmony import */ var _baseData__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./baseData */ "./lemon/modules/baseData.js");\n/* harmony import */ var _floor__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./floor */ "./lemon/modules/floor.js");\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * 禁言解禁返回记录\n * @typedef {object} SpeakSettingResult\n * @property  {number} forbid   操作类型  1：禁言开始， 0：禁言停止\n * @property  {number} result   操作结构  0是成功， 其他为错误码\n */\nclass Call {\n  constructor() {\n    /* 存储呼叫的会话session */\n    this._callsessions = new Map();\n\n    /* Session处理工厂类 */\n    this.sessionFac = new _common_sessionFactory__WEBPACK_IMPORTED_MODULE_6__["default"]();\n\n    /* 媒体流获取回调列表 */\n    this.onMediaStreams = new Map();\n\n    /* 主叫接听，被叫接听确认事件回调 */\n    this.onConnecteds = new Map();\n\n    /* 挂断确认事件回调 */\n    this.onByes = new Map();\n\n    /* 挂断确认事件回调 */\n    this.onIncomings = new Map();\n\n    /* 挂断确认事件回调 */\n    this.onForceHangupMap = new Map();\n\n    /* 呼叫状态事件回调 */\n    this.onCallProcessChanges = new Map();\n\n    /* 上呼接听promise调用链 */\n    this.promiseMap = new Map();\n    /* 存储 转发视频呼叫的 key为原呼叫的callid，value为 转发的callid 列表，用于关联挂断呼叫 */\n    this._forwardMap = new Map();\n    /* 存储 视频上拉的 转发视频呼叫的 key为原呼叫的callid，value为 转发的对象的basedata_id ，用于处理多余的通知 */\n    this._pullVideoForwardMap = new Map();\n    /* 存储 转发视频呼叫 的callid 列表，用于快速查询该呼叫是否为转发的呼叫 */\n    this._forwardCallIDMap = new Map();\n  }\n\n  /** 回调处理通用逻辑 */\n  _safeOnCallback(func, param) {\n    try {\n      func(param);\n    } catch (error) {\n      _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].error(error);\n    }\n  }\n\n  /** 添加媒体流获取回调 */\n  addMediaStream(callback) {\n    if (!callback) {\n      _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].error(\'call - 回调 - 媒体流回调添加失败，事件回调函数为空！\');\n      return false;\n    }\n    const callbackId = (0,_common_utils__WEBPACK_IMPORTED_MODULE_0__.guid)();\n    this.onMediaStreams.set(callbackId, callback);\n    return callbackId;\n  }\n\n  /** 触发媒体流获取回调 */\n  onMediaStream(call_id, stream, type) {\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].info(\'call - 回调 - 媒体流回调被触发\', call_id, type, this.onMediaStreams.size);\n    this.onMediaStreams.forEach(func => {\n      func(call_id, stream, type);\n    });\n  }\n\n  /** 根据callbackId移除媒体流回调 */\n  removeMediaStream(callbackId) {\n    if (this.onMediaStreams.has(callbackId)) {\n      this.onMediaStreams.delete(callbackId);\n      _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].info(\'call - 回调 - 移除媒体流回调成功，callbackId = \', callbackId);\n      return;\n    }\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].error(\'call - 回调 - 需要移除的媒体流回调未找到！\');\n  }\n\n  /** 添加接听回调 */\n  addAnswerAckEvt(callback) {\n    if (!callback) {\n      _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].error(\'call - 回调 - 接听回调添加失败，事件回调函数为空！\');\n      return false;\n    }\n    const callbackId = (0,_common_utils__WEBPACK_IMPORTED_MODULE_0__.guid)();\n    this.onConnecteds.set(callbackId, callback);\n    return callbackId;\n  }\n\n  /** 触发接听回调 */\n  onAnswerAckEvt(session) {\n    // log.info(\'call - 回调 - 接听回调被触发 enter\', JSON.stringify(session));\n\n    const caller = {\n      ...session.caller,\n      realm: session.realm\n    };\n    const callee = {\n      ...session.callee,\n      realm: session.realm\n    };\n    const answerAckInfo = {\n      call_id: session.call_id,\n      caller_guid: (0,_common_utils__WEBPACK_IMPORTED_MODULE_0__.genLocalGuid)(caller, \'number\'),\n      caller_number: caller.number,\n      caller_alias: caller.number_alias,\n      callee_guid: (0,_common_utils__WEBPACK_IMPORTED_MODULE_0__.genLocalGuid)(callee, \'number\'),\n      callee_alias: callee.number_alias,\n      callee_number: callee.number,\n      attribute: {\n        ...session.attribute\n      },\n      remote_receive: session.cmd_name === "cc_connected_evt",\n      farward_call: false\n    };\n    if (answerAckInfo.attribute.ip_cross_info) {\n      delete answerAckInfo.attribute.ip_cross_info;\n    }\n    if (answerAckInfo.attribute.nat_sign) {\n      delete answerAckInfo.attribute.nat_sign;\n    }\n    if (this._forwardCallIDMap.has(session.call_id)) {\n      answerAckInfo.farward_call = true;\n      answerAckInfo.forward_basedata_id = answerAckInfo.callee_guid;\n    }\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].debug(\'call - 回调 - 接听回调被触发\', JSON.stringify(answerAckInfo));\n    this.onConnecteds.forEach(func => {\n      this._safeOnCallback(func, answerAckInfo);\n    });\n  }\n\n  /** 根据callbackId移除接听回调 */\n  removeAnswerAckEvt(callbackId) {\n    if (this.onConnecteds.has(callbackId)) {\n      this.onConnecteds.delete(callbackId);\n      _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].info(\'call - 回调 - 移除接听回调成功，callbackId = \', callbackId);\n      return;\n    }\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].error(\'call - 回调 - 需要移除的接听回调未找到！\');\n  }\n\n  /** 添加挂断回调 */\n  addHangupEvt(callback) {\n    if (!callback) {\n      _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].error(\'call - 回调 - 挂断回调添加失败，事件回调函数为空！\');\n      return false;\n    }\n    const callbackId = (0,_common_utils__WEBPACK_IMPORTED_MODULE_0__.guid)();\n    this.onByes.set(callbackId, callback);\n    return callbackId;\n  }\n\n  /** 触发挂断回调 */\n  onHangupEvt(hangUpInfo) {\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].info(\'call - 回调 - 挂断回调被触发\', JSON.stringify(hangUpInfo));\n    this.onByes.forEach(func => {\n      this._safeOnCallback(func, hangUpInfo);\n    });\n    //收到挂断通知，检查有没有该呼叫的转发，有就把关联的转发也挂断。\n    if (this._forwardMap.has(hangUpInfo.call_id)) {\n      const forwardcallList = this._forwardMap.get(hangUpInfo.call_id);\n      forwardcallList.forEach(item => {\n        this.hangupCall({\n          call_id: item\n        });\n      });\n      this._forwardMap.delete(hangUpInfo.call_id);\n    }\n  }\n\n  /** 根据callbackId移除挂断回调 */\n  removeHangupEvt(callbackId) {\n    if (this.onByes.has(callbackId)) {\n      this.onByes.delete(callbackId);\n      _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].info(\'call - 回调 - 移除挂断回调成功，callbackId = \', callbackId);\n      return;\n    }\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].error(\'call - 回调 - 需要移除的挂断回调未找到！\');\n  }\n\n  /** 添加强拆回调 */\n  addForceHangupEvt(callback) {\n    if (!callback) {\n      _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].error(\'call - 回调 - 挂断回调添加失败，事件回调函数为空！\');\n      return false;\n    }\n    const callbackId = (0,_common_utils__WEBPACK_IMPORTED_MODULE_0__.guid)();\n    this.onForceHangupMap.set(callbackId, callback);\n    return callbackId;\n  }\n\n  /** 触发强拆回调 */\n  onForceHangupEvt(hangUpInfo) {\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].info(\'call - 回调 - 强拆回调被触发\', JSON.stringify(hangUpInfo));\n    this.onForceHangupMap.forEach(func => {\n      this._safeOnCallback(func, hangUpInfo);\n    });\n    //收到挂断通知，检查有没有该呼叫的转发，有就把关联的转发也挂断。\n    if (this._forwardMap.has(hangUpInfo.call_id)) {\n      const forwardcallList = this._forwardMap.get(hangUpInfo.call_id);\n      forwardcallList.forEach(item => {\n        this.hangupCall({\n          call_id: item\n        });\n      });\n      this._forwardMap.delete(hangUpInfo.call_id);\n    }\n  }\n\n  /** 强拆通知 */\n  receiveForceHangupEvt(jsonData) {\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].info(\'call -强拆通知\', JSON.stringify(jsonData));\n    const hangUpInfo = {\n      call_id: jsonData.call_id,\n      result: jsonData.fd_result\n    };\n    if (hangUpInfo.result !== 0) {\n      hangUpInfo.result = jsonData.fd_failed_reason;\n    }\n    this.onForceHangupEvt(hangUpInfo);\n  }\n\n  /** 根据callbackId移除挂断回调 */\n  removeForceHangupEvt(callbackId) {\n    if (this.onForceHangupMap.has(callbackId)) {\n      this.onForceHangupMap.delete(callbackId);\n      _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].info(\'call - 回调 - 移除强拆回调成功，callbackId = \', callbackId);\n      return;\n    }\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].error(\'call - 回调 - 需要移除的强拆回调未找到！\');\n  }\n\n  /** 添加来电回调 */\n  addIncomingEvt(callback) {\n    if (!callback) {\n      _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].error(\'call - 回调 - 来电回调添加失败，事件回调函数为空！\');\n      return false;\n    }\n    const callbackId = (0,_common_utils__WEBPACK_IMPORTED_MODULE_0__.guid)();\n    this.onIncomings.set(callbackId, callback);\n    return callbackId;\n  }\n\n  /** 触发来电回调 */\n  onIncomingEvt(incomingInfo) {\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].info(\'call - 回调 - 来电回调被触发\', JSON.stringify(incomingInfo));\n    this.onIncomings.forEach(func => {\n      this._safeOnCallback(func, incomingInfo);\n    });\n  }\n\n  /** 根据callbackId移除来电回调 */\n  removeIncomingEvt(callbackId) {\n    if (this.onIncomings.has(callbackId)) {\n      this.onIncomings.delete(callbackId);\n      _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].info(\'call - 回调 - 移除来电回调成功，callbackId = \', callbackId);\n      return;\n    }\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].error(\'call - 回调 - 需要移除的来电回调未找到！\');\n  }\n\n  /** 添加呼叫流程变更回调 */\n  addCallProcessChangeEvt(callback) {\n    if (!callback) {\n      _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].error(\'call - 回调 - 呼叫流程变更回调添加失败，事件回调函数为空！\');\n      return false;\n    }\n    const callbackId = (0,_common_utils__WEBPACK_IMPORTED_MODULE_0__.guid)();\n    this.onCallProcessChanges.set(callbackId, callback);\n    return callbackId;\n  }\n\n  /** 触发呼叫流程变更回调 */\n  onCallProcessChangeEvt(callProcessInfo) {\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].info(\'call - 回调 - 呼叫流程变更回调被触发\', JSON.stringify(callProcessInfo));\n    this.onCallProcessChanges.forEach(func => {\n      this._safeOnCallback(func, callProcessInfo);\n    });\n  }\n\n  /** 根据callbackId移除呼叫流程变更回调 */\n  removeCallProcessChangeEvt(callbackId) {\n    if (this.onCallProcessChanges.has(callbackId)) {\n      this.onCallProcessChanges.delete(callbackId);\n      _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].info(\'call - 回调 - 移除呼叫流程变更回调成功，callbackId = \', callbackId);\n      return;\n    }\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].error(\'call - 回调 - 需要移除的呼叫流程变更回调未找到！\');\n  }\n\n  /** 组装并发送 cc_setup_call 主叫信令 */\n  sendSetupCall(session) {\n    return new Promise((resolve, reject) => {\n      var _session$mediaRTC;\n      const audioSdp = session.mediaRTC.localSdp1 === null ? null : session.mediaRTC.localSdp1.sdp;\n      const videoSdp = session.mediaRTC.localSdp2 === null ? null : session.mediaRTC.localSdp2.sdp;\n      const audioCandidate = session === null || session === void 0 ? void 0 : (_session$mediaRTC = session.mediaRTC) === null || _session$mediaRTC === void 0 ? void 0 : _session$mediaRTC.localCandidates1;\n      const videoCandidate = session.mediaRTC.localCandidates2.length === 0 ? null : session.mediaRTC.localCandidates2;\n      const call_id = session.call_id;\n      const baseReq = _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].getBaseReq();\n      baseReq.cmd_name = \'cc_setup_call\';\n      baseReq.cmd_guid = \'\';\n      baseReq.call_id = call_id;\n      baseReq.system_id = session.callee.system_id;\n      baseReq.caller = session.caller;\n      baseReq.callee = session.callee;\n      baseReq.attribute = session.attribute;\n      baseReq.media = baseReq.media || {};\n      if (session.attribute.call_mode !== _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_MODE.VIDEO) {\n        baseReq.media.audio = {\n          audio_codec: 8,\n          ptime: 20,\n          sample_rate: 8000,\n          web_audio_candidate: JSON.stringify(audioCandidate, [\'candidate\', \'sdpMid\', \'sdpMLineIndex\']),\n          web_audio_sdp: audioSdp,\n          rtp_ip: "10.110.12.30",\n          rtp_port: 20058,\n          rtp_ssrc_id: 0,\n          rtp_recv_id: -2006974359\n        };\n      }\n      if (session.attribute.call_mode !== _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_MODE.AUDIO) {\n        let aimFrameSize = session.mediaRTC.mediaOptions.video_frame_size;\n        if (aimFrameSize === -1) {\n          aimFrameSize = this.getMaxFrameSize();\n        }\n        baseReq.media.video = {\n          video_codec: 98,\n          video_frame_rate: 25,\n          video_encode_level: 1,\n          video_decode_level: 3,\n          video_pack_mode: 1,\n          video_decode_frame_size: aimFrameSize === undefined ? 3 : aimFrameSize,\n          video_frame_size: aimFrameSize === undefined ? 3 : aimFrameSize,\n          web_video_candidate: JSON.stringify(videoCandidate, [\'candidate\', \'sdpMid\', \'sdpMLineIndex\']),\n          web_video_sdp: videoSdp,\n          rtp_ip: \'10.110.12.30\',\n          rtp_port: 20056,\n          rtp_ssrc_id: 0,\n          rtp_recv_id: -2006974360\n        };\n      }\n      _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].info(\'call - 下呼  —> 呼叫信令封装完毕，准备发送！~\', call_id);\n      _protocol_http__WEBPACK_IMPORTED_MODULE_3__["default"].callPost(baseReq).then(res => {\n        if ((res === null || res === void 0 ? void 0 : res.result) !== null && (res === null || res === void 0 ? void 0 : res.result) !== undefined) {\n          reject(res);\n          return;\n        }\n        _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].info(\'call - 下呼  —> 呼叫信令发送成功！~\', call_id);\n        if (session.error_code != undefined) {\n          res.error_code = session.error_code;\n        }\n        resolve(res);\n      }).catch(err => {\n        _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].info(\'call - 下呼  —> 呼叫信令发送异常！~\', call_id, err);\n        reject(err);\n      });\n    });\n  }\n\n  /** 组装并发送 cc_connected_evt 接听信令 */\n  sendConnect(session) {\n    return new Promise((resolve, reject) => {\n      const call_id = session.call_id;\n      const audioSdp = session.mediaRTC.localSdp1 === null ? null : session.mediaRTC.localSdp1.sdp;\n      const videoSdp = session.mediaRTC.localSdp2 === null ? null : session.mediaRTC.localSdp2.sdp;\n      const audioCandidate = session.mediaRTC.localCandidates1;\n      const videoCandidate = session.mediaRTC.localCandidates2.length === 0 ? null : session.mediaRTC.localCandidates2;\n      const baseReq = _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].getBaseReq();\n      baseReq.cmd_name = \'cc_connected_evt\';\n      baseReq.cmd_guid = \'\';\n      baseReq.call_id = call_id;\n      baseReq.caller = session.caller;\n      baseReq.callee = session.callee;\n      baseReq.puc_id = session.callee.puc_id;\n      baseReq.puc_version = baseReq.version;\n      baseReq.attribute = session.attribute;\n      baseReq.media = {};\n      if (baseReq.attribute.call_mode !== 1) {\n        baseReq.media.audio = {\n          audio_codec: 8,\n          ptime: 20,\n          sample_rate: 8000,\n          web_audio_candidate: JSON.stringify(audioCandidate, [\'candidate\', \'sdpMid\', \'sdpMLineIndex\']),\n          web_audio_sdp: audioSdp,\n          rtp_ip: "10.110.13.96",\n          rtp_port: 20058,\n          rtp_ssrc_id: 0,\n          rtp_recv_id: -2006974359\n        };\n      }\n      const sessionAimFrameSize = session.mediaRTC.mediaOptions.video_frame_size;\n      if (baseReq.attribute.call_mode !== 0) {\n        const aimFrameSize = sessionAimFrameSize ? this.getSuitableFrameSize(sessionAimFrameSize) : sessionAimFrameSize;\n        baseReq.media.video = {\n          video_codec: 98,\n          video_frame_rate: 25,\n          video_encode_level: 1,\n          video_decode_level: 3,\n          video_pack_mode: 1,\n          video_decode_framesize: aimFrameSize === undefined ? 3 : aimFrameSize,\n          video_frame_size: aimFrameSize === undefined ? 3 : aimFrameSize,\n          web_video_candidate: JSON.stringify(videoCandidate, [\'candidate\', \'sdpMid\', \'sdpMLineIndex\']),\n          web_video_sdp: videoSdp,\n          rtp_ip: \'10.110.12.30\',\n          rtp_port: 20056,\n          rtp_ssrc_id: 0,\n          rtp_recv_id: -2006974360\n        };\n      }\n      _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].info(\'call - 上呼  —> 接听信令封装完毕，准备发送！~\', call_id);\n      _protocol_http__WEBPACK_IMPORTED_MODULE_3__["default"].callPost(baseReq).then(res => {\n        var _res$data, _res$data2;\n        if ((res === null || res === void 0 ? void 0 : (_res$data = res.data) === null || _res$data === void 0 ? void 0 : _res$data.result) !== null && (res === null || res === void 0 ? void 0 : (_res$data2 = res.data) === null || _res$data2 === void 0 ? void 0 : _res$data2.result) !== undefined) {\n          reject(res);\n        }\n        _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].info(\'call - 上呼 - 接听信令发送成功！\', call_id);\n        resolve(session);\n      }).catch(err => {\n        _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].error(\'call - 上呼 - 接听信令发送异常！\', call_id, err);\n        reject(err);\n      });\n    });\n  }\n\n  /** 调度下呼方法 */\n  makeCall(makeCallInfo) {\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].info(\'call - 下呼  —> 呼叫流程开始！~\', JSON.stringify(makeCallInfo));\n    if (!(makeCallInfo !== null && makeCallInfo !== void 0 && makeCallInfo.call_id)) {\n      makeCallInfo.call_id = (0,_common_utils__WEBPACK_IMPORTED_MODULE_0__.guid)();\n    }\n    return new Promise((resolve, reject) => {\n      this.sessionFac.initSession(makeCallInfo).then(session => {\n        this.setSession(makeCallInfo.call_id, session);\n        return this.sessionFac.build(session, this.onStream.bind(this));\n      }).then(this.sendSetupCall).then(resp => {\n        return resolve({\n          call_id: makeCallInfo.call_id,\n          error_code: resp.error_code || 0,\n          //这个字段有值只是这说明个流程有点点问题，但是不影响呼叫流程\n          result: 0\n        });\n      }).catch(error => {\n        reject(error);\n        let disconnect_reason = _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.SERVER_ERROR;\n        if (error !== null && error !== void 0 && error.result) {\n          disconnect_reason = error === null || error === void 0 ? void 0 : error.result;\n        }\n        this.receiveDisconnect({\n          call_id: makeCallInfo.call_id,\n          disconnect_reason: disconnect_reason\n        });\n      });\n    });\n  }\n\n  /** 调度接听方法 */\n  answerCall(answerCallInfo) {\n    const call_id = answerCallInfo.call_id;\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].info(\'call - 上呼 - 接听流程开始！\', call_id);\n    return new Promise((resolve, reject) => {\n      if (!call_id) {\n        _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].info(\'call - 上呼 - 参数错误\', call_id);\n        return resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n        });\n      }\n      this.promiseMap.get(call_id).then(session => {\n        return this.sessionFac.connectBuild(session, this.onStream.bind(this));\n      }).then(session => {\n        this.promiseMap.delete(call_id);\n        return this.sendConnect(session);\n      }).then(res => {\n        const info = {\n          result: 0,\n          call_id: res.call_id,\n          caller_guid: (0,_common_utils__WEBPACK_IMPORTED_MODULE_0__.genLocalGuid)(res.caller, \'number\'),\n          caller_number: res.caller.number,\n          caller_alias: res.caller.number_alias,\n          callee_guid: (0,_common_utils__WEBPACK_IMPORTED_MODULE_0__.genLocalGuid)(res.callee, \'number\'),\n          callee_alias: res.callee.number_alias,\n          callee_number: res.callee.number,\n          attribute: res.attribute\n        };\n        resolve(info);\n      }).catch(err => {\n        var _err$data;\n        this.promiseMap.delete(call_id);\n        reject(err);\n        let disconnect_reason = _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.SERVER_ERROR;\n        if (err !== null && err !== void 0 && (_err$data = err.data) !== null && _err$data !== void 0 && _err$data.result) {\n          var _err$data2;\n          disconnect_reason = err === null || err === void 0 ? void 0 : (_err$data2 = err.data) === null || _err$data2 === void 0 ? void 0 : _err$data2.result;\n        }\n        this.receiveDisconnect({\n          call_id: call_id,\n          disconnect_reason: disconnect_reason\n        });\n      });\n    });\n  }\n\n  /** 调度挂断方法 */\n  hangupCall(hangupCallInfo) {\n    const call_id = hangupCallInfo.call_id;\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].info(\'call - 挂断 - 挂断流程开始！\', call_id);\n    return new Promise((resolve, reject) => {\n      if (!call_id) {\n        _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].info(\'call - 挂断 - 参数错误！\', call_id);\n        return resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n        });\n      }\n      const session = this.getSession(call_id);\n      if (!session) {\n        _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].error(\'call - 挂断 - 挂断session不存在！\', call_id);\n        // reject(\'根据入参call_id：\' + call_id + \',无法找到对应的会话session\');\n        resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.CALL_NOT_EXIT\n        });\n        return;\n      }\n\n      // 兼容强拆的流程先去掉，因为路由配置传的值不对，导致匹配出错。一切由外部人员去管理用挂断还是强拆接口。\n      // const { caller, callee } = session;\n      // // 自己是否是该通话的主叫或者被叫，是的话才可以挂断，否的话要使用强拆\n      // const canHangup = (caller.puc_id === baseRequest.user.puc_id &&\n      //   caller.system_id === DEFAULT_SYS_ID &&\n      //   caller.number === baseRequest.user.user_id &&\n      //   caller.number_type === baseRequest.user.number_type) ||\n      //   (callee.puc_id === baseRequest.user.puc_id &&\n      //     callee.system_id === DEFAULT_SYS_ID &&\n      //     callee.number === baseRequest.user.user_id &&\n      //     callee.number_type === baseRequest.user.number_type)\n\n      // //不是自己的通话，使用强拆\n      // if (!canHangup) {\n      //   return this.forceHangupCall({ call_id })\n      // }\n\n      _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].info(\'call - 挂断 - 挂断session存在！\', call_id);\n      const baseReq = _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].getBaseReq();\n      baseReq.cmd_name = \'cc_disconnected_evt\';\n      baseReq.cmd_guid = \'\';\n      baseReq.call_id = call_id;\n      baseReq.system_id = session.callee.system_id;\n      baseReq.puc_id = session.callee.puc_id;\n      baseReq.puc_version = baseReq.version;\n      baseReq.disconnect_reason = 0;\n      _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].info(\'call - 挂断  —> 挂断信令封装完毕，准备发送！~\', call_id);\n      _protocol_http__WEBPACK_IMPORTED_MODULE_3__["default"].callPost(baseReq).then(() => {\n        _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].info(\'call - 挂断 - 挂断信令发送成功！\', call_id);\n        resolve({\n          result: 0,\n          call_id: call_id\n        });\n      }).catch(err => {\n        /* 程序异常，发送bye，启动挂断流程 */\n        _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].error(\'call - 挂断 - 挂断信令发送异常！\', call_id, err);\n        reject(err);\n        this.receiveDisconnect({\n          call_id: call_id,\n          disconnect_reason: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.SERVER_ERROR\n        });\n      });\n    });\n  }\n\n  /** 调度强拆方法 */\n  forceHangupCall(forceHangupCallInfo) {\n    const call_id = forceHangupCallInfo.call_id;\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].info(\'call - 强拆 - 强拆流程开始！\', call_id);\n    return new Promise((resolve, reject) => {\n      const session = this.getSession(call_id);\n      if (!session) {\n        _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].error(\'call - 强拆 - 强拆session不存在！\', call_id);\n        // reject(\'根据入参call_id：\' + call_id + \',无法找到对应的会话session\');\n        resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.CALL_NOT_EXIT\n        });\n        return;\n      }\n      const baseReq = _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].getBaseReq();\n      baseReq.cmd_name = \'cc_force_disconnect\';\n      baseReq.cmd_guid = \'\';\n      baseReq.call_id = session.call_id;\n      baseReq.puc_id = session.callee.puc_id;\n      baseReq.system_id = session.callee.system_id;\n      baseReq.puc_version = baseReq.version;\n      baseReq.call_mode = session.attribute.call_mode;\n      _protocol_http__WEBPACK_IMPORTED_MODULE_3__["default"].callPost(baseReq).then(res => {\n        _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].info(\'call - 强拆 - 强拆请求发送成功！\', call_id);\n        resolve({\n          result: 0,\n          call_id: call_id\n        });\n      }).catch(err => {\n        _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].error(\'call - 强拆 - 强拆请求发送失败:\', call_id, err);\n        reject(err);\n      });\n    });\n  }\n\n  /** 将创建的session信息存入缓存中 */\n  setSession(call_id, session) {\n    this._callsessions.set(call_id, session);\n  }\n  /** 根据call_id 获取缓存中的session会话信息 */\n  getSession(call_id) {\n    if (this._callsessions && call_id) {\n      if (this._callsessions.has(call_id)) {\n        return this._callsessions.get(call_id);\n      }\n    }\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].error("call_id对应的session不存在！", call_id, JSON.stringify(this._callsessions));\n    return null;\n  }\n\n  /** 关闭会话session */\n  closeCallSession(session) {\n    if (session) {\n      const call_id = session.call_id;\n      if (session.mediaRTC.peerConnection1) {\n        _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].info(\'call - 移除会话 - 关闭音频PeerConnection连接！\', call_id);\n        _protocol_webrtc__WEBPACK_IMPORTED_MODULE_4__["default"].close(session.mediaRTC.peerConnection1);\n        session.mediaRTC.peerConnection1 = null;\n      }\n      if (session.mediaRTC.peerConnection2) {\n        _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].info(\'call - 移除会话 - 关闭视频PeerConnection连接！\', call_id);\n        _protocol_webrtc__WEBPACK_IMPORTED_MODULE_4__["default"].close(session.mediaRTC.peerConnection2);\n        session.mediaRTC.peerConnection2 = null;\n      }\n      if (session.mediaRTC.localStream1 && session.attribute.call_type !== _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_TYPE.PUSH_VIDEO_CALL) {\n        /* 释放本地音频流 */\n        session.mediaRTC.localStream1.getTracks().forEach(function (track) {\n          track.stop();\n        });\n        _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].info(\'call - 移除会话 - 释放本地音频流！\', call_id);\n        session.mediaRTC.localStream1 = null;\n      }\n      if (session.mediaRTC.localStream2 && session.attribute.call_type !== _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_TYPE.PUSH_VIDEO_CALL) {\n        /* 释放本地视频流 */\n        session.mediaRTC.localStream2.getTracks().forEach(function (track) {\n          track.stop();\n        });\n        _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].info(\'call - 移除会话 - 释放本地视频流！\', call_id);\n        session.mediaRTC.localStream2 = null;\n      }\n      if (session.mediaRTC.remoteStream1) {\n        /* 释放对端音频流 */\n        session.mediaRTC.remoteStream1.getTracks().forEach(function (track) {\n          track.stop();\n        });\n        _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].info(\'call - 移除会话 - 释放对端音频流！\', call_id);\n        session.mediaRTC.remoteStream1 = null;\n      }\n      if (session.mediaRTC.remoteStream2) {\n        /* 释放对端视频流 */\n        session.mediaRTC.remoteStream2.getTracks().forEach(function (track) {\n          track.stop();\n        });\n        _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].info(\'call - 移除会话 - 释放对端视频流！\', call_id);\n        session.mediaRTC.remoteStream2 = null;\n      }\n    }\n  }\n\n  /** 销毁session */\n  disposeCallSession(session) {\n    if (session) {\n      /* 销毁session */\n      this.closeCallSession(session);\n\n      /* 设置会话状态为断开连接 */\n      session.status.callState = _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_STATUS.DISCONNECT;\n    }\n  }\n\n  /** 根据call_id删除缓存中的会话session */\n  removeCallSession(call_id) {\n    if (this._callsessions && call_id) {\n      if (this._callsessions.has(call_id)) {\n        _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].info(\'call - 移除会话 - 清除缓存中的session！\', call_id);\n        const session = this.getSession(call_id);\n        this.disposeCallSession(session);\n        this._callsessions.delete(call_id);\n      }\n    }\n  }\n  clearCallSession() {\n    var _this$_callsessions;\n    if (((_this$_callsessions = this._callsessions) === null || _this$_callsessions === void 0 ? void 0 : _this$_callsessions.size) > 0) {\n      for (let callId of this._callsessions.keys()) {\n        const session = this._callsessions.get(callId);\n        this.disposecallsession(session);\n        console.info(\'清除缓存中的session - clearCallSession\', callId);\n        this._callsessions.delete(callId);\n      }\n    }\n  }\n\n  /** 音视频流回调 */\n  onStream(session, type) {\n    if (type === _public_constant__WEBPACK_IMPORTED_MODULE_1__.MEDIA_CALLBACK_TYPE.WEBRTC_AUDIO_DST) {\n      var _session$mediaRTC2, _session$mediaRTC3;\n      this.onMediaStream(session.call_id, session === null || session === void 0 ? void 0 : (_session$mediaRTC2 = session.mediaRTC) === null || _session$mediaRTC2 === void 0 ? void 0 : _session$mediaRTC2.remoteStream1, _public_constant__WEBPACK_IMPORTED_MODULE_1__.MEDIA_CALLBACK_TYPE.WEBRTC_AUDIO_DST);\n\n      // todo-sdk 呼叫状态变更回调 孕育期 稳定后使用\n      this.onCallProcessChangeEvt({\n        call_process: \'media_stream_evt\',\n        call_id: session.call_id,\n        stream: session === null || session === void 0 ? void 0 : (_session$mediaRTC3 = session.mediaRTC) === null || _session$mediaRTC3 === void 0 ? void 0 : _session$mediaRTC3.remoteStream1,\n        type: _public_constant__WEBPACK_IMPORTED_MODULE_1__.MEDIA_CALLBACK_TYPE.WEBRTC_AUDIO_DST\n      });\n    } else if (type === _public_constant__WEBPACK_IMPORTED_MODULE_1__.MEDIA_CALLBACK_TYPE.WEBRTC_VIDEO_DST) {\n      var _session$mediaRTC4, _session$mediaRTC5;\n      this.onMediaStream(session.call_id, session === null || session === void 0 ? void 0 : (_session$mediaRTC4 = session.mediaRTC) === null || _session$mediaRTC4 === void 0 ? void 0 : _session$mediaRTC4.remoteStream2, _public_constant__WEBPACK_IMPORTED_MODULE_1__.MEDIA_CALLBACK_TYPE.WEBRTC_VIDEO_DST);\n\n      // todo-sdk 呼叫状态变更回调 孕育期 稳定后使用\n      this.onCallProcessChangeEvt({\n        call_process: \'media_stream_evt\',\n        call_id: session.call_id,\n        stream: session === null || session === void 0 ? void 0 : (_session$mediaRTC5 = session.mediaRTC) === null || _session$mediaRTC5 === void 0 ? void 0 : _session$mediaRTC5.remoteStream2,\n        type: _public_constant__WEBPACK_IMPORTED_MODULE_1__.MEDIA_CALLBACK_TYPE.WEBRTC_VIDEO_DST\n      });\n    } else if (type === _public_constant__WEBPACK_IMPORTED_MODULE_1__.MEDIA_CALLBACK_TYPE.WEBRTC_VIDEO_SRC) {\n      var _session$attribute, _session$mediaRTC7;\n      if ((session === null || session === void 0 ? void 0 : (_session$attribute = session.attribute) === null || _session$attribute === void 0 ? void 0 : _session$attribute.call_type) !== _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_TYPE.PUSH_VIDEO_CALL) {\n        var _session$mediaRTC6;\n        this.onMediaStream(session.call_id, session === null || session === void 0 ? void 0 : (_session$mediaRTC6 = session.mediaRTC) === null || _session$mediaRTC6 === void 0 ? void 0 : _session$mediaRTC6.localStream2, _public_constant__WEBPACK_IMPORTED_MODULE_1__.MEDIA_CALLBACK_TYPE.WEBRTC_VIDEO_SRC);\n      } else {\n        // this.onMediaStream(session.call_id, session?.mediaRTC?.transferVideoStream, MEDIA_CALLBACK_TYPE.WEBRTC_VIDEO_SRC);\n      }\n\n      // todo-sdk 呼叫状态变更回调 孕育期 稳定后使用\n      this.onCallProcessChangeEvt({\n        call_process: \'media_stream_evt\',\n        call_id: session.call_id,\n        stream: session === null || session === void 0 ? void 0 : (_session$mediaRTC7 = session.mediaRTC) === null || _session$mediaRTC7 === void 0 ? void 0 : _session$mediaRTC7.localStream2,\n        type: _public_constant__WEBPACK_IMPORTED_MODULE_1__.MEDIA_CALLBACK_TYPE.WEBRTC_VIDEO_SRC\n      });\n    } else {\n      _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].error(\'onStream, 传入回调函数类型为：\' + type + \',回调类型未知！\');\n    }\n  }\n\n  /** 发送cc_connected_evt的ack信令cc_connected */\n  sendConnectAck(connectEvt) {\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].info(\'call - 下呼  —> 发送接听响应 cc_connected！\', connectEvt.call_id);\n    const baseReq = _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].getBaseReq();\n    baseReq.cmd_name = \'cc_connected\';\n    baseReq.cmd_guid = \'\';\n    baseReq.call_id = connectEvt.call_id;\n    baseReq.puc_id = connectEvt.puc_id;\n    _protocol_http__WEBPACK_IMPORTED_MODULE_3__["default"].callPostAsync(baseReq);\n  }\n\n  /** 本端主呼，对端接收并点击接听按钮后触发此方法，完成webrtc流程 */\n  receiveConnect(connectInfo) {\n    var _session$attribute2, _session$attribute3;\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].info(\'call - 下呼 - 收到下呼接听信令！\', connectInfo.call_id);\n    /* 获取主呼时封装到缓存中的session */\n    const session = this.getSession(connectInfo.call_id) || {};\n    if (!session.callee) session.callee = {};\n    if (!session.status) session.status = {};\n    if (!session.mediaRTC) session.mediaRTC = {};\n    if (!session.mediaRTC.mediaOptions) session.mediaRTC.mediaOptions = {};\n    if (connectInfo.cmd_guid) {\n      session.cmd_guid = connectInfo.cmd_guid;\n    }\n    if (!session) {\n      _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].error(\'call - 下呼 - session中不存在与cc_connected_evt匹配的呼叫\', connectInfo.call_id);\n    }\n    if (!!(connectInfo.callee && connectInfo.callee.time_slot)) {\n      session.callee.time_slot = connectInfo.callee.time_slot;\n    }\n    this.sessionFac.setWebRTCConnectedParams(session, connectInfo);\n\n    /* 设置session状态 */\n    session.status.callState = _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_STATUS.FREE;\n\n    /*  音频相关呼叫处理 */\n    if ((session === null || session === void 0 ? void 0 : (_session$attribute2 = session.attribute) === null || _session$attribute2 === void 0 ? void 0 : _session$attribute2.call_mode) !== _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_MODE.VIDEO) {\n      _protocol_webrtc__WEBPACK_IMPORTED_MODULE_4__["default"].receiveAnswer(session.mediaRTC.peerConnection1, session.mediaRTC.remoteSdp1).then(() => {\n        for (const candidate of session.mediaRTC.remoteCandidates1) {\n          if ((candidate === null || candidate === void 0 ? void 0 : candidate.sdpMLineIndex) < 0) continue;\n          _protocol_webrtc__WEBPACK_IMPORTED_MODULE_4__["default"].addIceCandidate(session.mediaRTC.peerConnection1, candidate).catch(err => {\n            _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].error(\'call - 下呼 - peerConnection中添加音频candidate报错\', connectInfo.call_id, err);\n            this.receiveDisconnect({\n              call_id: connectInfo.call_id,\n              disconnect_reason: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.ADD_AUDIO_CANDIDATE_FAILED\n            });\n          });\n        }\n        if (session.mediaRTC.peerConnection2 === null) {\n          if (typeof this.onAnswerAckEvt === \'function\') {\n            this.onAnswerAckEvt(connectInfo);\n          }\n          // todo-sdk 呼叫状态变更回调 孕育期 稳定后使用\n          if (typeof this.onCallProcessChangeEvt === \'function\') {\n            this.onCallProcessChangeEvt({\n              call_process: \'answer_ack_evt\',\n              call_id: session.call_id\n            });\n          }\n        }\n      }).catch(err => {\n        _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].error(\'call - 下呼 - 接收并存放远端音频sdp信息时发生异常\', connectInfo.call_id, err);\n        this.receiveDisconnect({\n          call_id: connectInfo.call_id,\n          disconnect_reason: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.RECEIVE_AUDIO_ANSWER_FAILED\n        });\n      });\n    }\n    if ((session === null || session === void 0 ? void 0 : (_session$attribute3 = session.attribute) === null || _session$attribute3 === void 0 ? void 0 : _session$attribute3.call_mode) !== _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_MODE.AUDIO) {\n      var _connectInfo$media$vi, _connectInfo$media$vi2;\n      _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].info(\'call - 下呼 - 对端视频分辨率\', connectInfo.call_id, (_connectInfo$media$vi = connectInfo.media.video) === null || _connectInfo$media$vi === void 0 ? void 0 : _connectInfo$media$vi.video_frame_size);\n      session.mediaRTC.mediaOptions.video_frame_size = connectInfo === null || connectInfo === void 0 ? void 0 : (_connectInfo$media$vi2 = connectInfo.media.video) === null || _connectInfo$media$vi2 === void 0 ? void 0 : _connectInfo$media$vi2.video_frame_size;\n      _protocol_webrtc__WEBPACK_IMPORTED_MODULE_4__["default"].receiveAnswer(session.mediaRTC.peerConnection2, session.mediaRTC.remoteSdp2).then(() => {\n        for (const candidate of session.mediaRTC.remoteCandidates2) {\n          if ((candidate === null || candidate === void 0 ? void 0 : candidate.sdpMLineIndex) < 0) continue;\n          _protocol_webrtc__WEBPACK_IMPORTED_MODULE_4__["default"].addIceCandidate(session.mediaRTC.peerConnection2, candidate).catch(err => {\n            _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].error(\'call - 下呼 - peerConnection中添加视频candidate报错\', connectInfo.call_id, err);\n            this.receiveDisconnect({\n              call_id: connectInfo.call_id,\n              disconnect_reason: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.ADD_VIDEO_CANDIDATE_FAILED\n            });\n          });\n        }\n        if (typeof this.onAnswerAckEvt === \'function\') {\n          this.onAnswerAckEvt(connectInfo);\n        }\n        // todo-sdk 呼叫状态变更回调 孕育期 稳定后使用\n        if (typeof this.onCallProcessChangeEvt === \'function\') {\n          this.onCallProcessChangeEvt({\n            call_process: \'answer_ack_evt\',\n            call_id: session.call_id\n          });\n        }\n      }).catch(err => {\n        _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].error(\'call - 下呼 - 接收并存放远端视频sdp信息时发生异常\', connectInfo.call_id, err);\n        this.receiveDisconnect({\n          call_id: connectInfo.call_id,\n          disconnect_reason: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.RECEIVE_VIDEO_ANSWER_FAILED\n        });\n      });\n    }\n  }\n\n  /** 收到呼叫接听响应信令*/\n  receiveConnectAck(connectAck) {\n    /* 获取当前呼叫对应的session */\n    const session = this.getSession(connectAck.call_id);\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].info(\'call - 上呼 - 收到接听确认信令！\', session.call_id);\n\n    /* 变更会话状态为空闲 */\n    session.status.callState = _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_STATUS.FREE;\n    this.onAnswerAckEvt(session);\n    // todo-sdk 呼叫状态变更回调 孕育期 稳定后使用\n    this.onCallProcessChangeEvt({\n      call_process: \'answer_ack_evt\',\n      call_id: session.call_id\n    });\n  }\n\n  /** 收到挂断确认后的处理流程 */\n  receiveDisconnect(disconnectInfo, own_hangupCall = false) {\n    const call_id = disconnectInfo.call_id;\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].info(\'call - 挂断 - 收到挂断或挂断确认信令！\', call_id);\n    /* 根据call_id获取会话session */\n    let session = this.getSession(disconnectInfo.call_id);\n    if (!session) {\n      _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].error(\'call - 挂断 - 收到挂断/挂断确认信令，对应session不存在！\', call_id);\n      session = {\n        call_id: disconnectInfo.call_id\n      };\n      // 设置session状态\n      session.status = {\n        callState: _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_STATUS.DISCONNECT\n      };\n      return;\n    }\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].info(\'call - 挂断 - 收到挂断/挂断确认信令，对应session存在！\', call_id);\n\n    /* 以下场景属于正常挂断，将错误码转换为0 */\n    if (disconnectInfo.disconnect_reason === 53300709 || disconnectInfo.disconnect_reason === 8410000 || disconnectInfo.disconnect_reason === 500029 || disconnectInfo.disconnect_reason === 500028 || disconnectInfo.disconnect_reason === 53300710) {\n      disconnectInfo.disconnect_reason = 0;\n    }\n    session.disconnectReason = disconnectInfo.disconnect_reason;\n    const hangupEvt = {\n      call_id: session.call_id,\n      disconnect_reason: session.disconnectReason,\n      own_hangup_call: own_hangupCall,\n      farward_call: false\n    };\n    if (this._forwardCallIDMap.has(session.call_id)) {\n      hangupEvt.farward_call = true;\n      const callee = {\n        ...session.callee,\n        realm: disconnectInfo.realm\n      };\n      hangupEvt.forward_basedata_id = (0,_common_utils__WEBPACK_IMPORTED_MODULE_0__.genLocalGuid)(callee, \'number\');\n      this._forwardCallIDMap.delete(session.call_id);\n    }\n    this.onHangupEvt(hangupEvt);\n    if (disconnectInfo.disconnect_reason !== 0) {\n      _modules_common__WEBPACK_IMPORTED_MODULE_7__["default"].onErrorCodeNotify({\n        errorCode: disconnectInfo.disconnect_reason\n      });\n    }\n\n    // todo-sdk 呼叫状态变更回调 孕育期 稳定后使用\n    this.onCallProcessChangeEvt({\n      call_process: \'hangup_evt\',\n      call_id: session.call_id,\n      disconnect_reason: session.disconnectReason\n    });\n\n    /* 挂断移除会话session */\n    this.removeCallSession(session.call_id);\n  }\n\n  /** 收到挂断确认处理流程*/\n  receiveDisconnectAck(disconnectAck) {\n    this.receiveDisconnect(disconnectAck, true);\n  }\n\n  /** 发送cc_disconnected_evt的ack信令cc_disconnected */\n  sendDisconnectAck(disconnectEvt) {\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].info(\'call - 挂断 - 发送挂断响应 cc_disconnected！\', disconnectEvt.call_id);\n    const baseReq = _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].getBaseReq();\n    baseReq.cmd_name = \'cc_disconnected\';\n    baseReq.call_id = disconnectEvt.call_id;\n    baseReq.cmd_guid = \'\';\n    baseReq.system_id = disconnectEvt.system_id;\n    baseReq.puc_id = disconnectEvt.puc_id;\n    baseReq.puc_version = baseReq.version;\n    baseReq.disconnect_reason = disconnectEvt.disconnect_reason;\n    baseReq.record_name = disconnectEvt.record_name;\n    _protocol_http__WEBPACK_IMPORTED_MODULE_3__["default"].callPostAsync(baseReq);\n  }\n\n  /** 收到呼叫后，直接发送振铃 */\n  sendAlerting(setupCallEvt) {\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].info(\'call - 上呼 - 发送振铃请求 cc_alerting_evt！~\', setupCallEvt.call_id);\n    const baseReq = _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].getBaseReq();\n    baseReq.call_id = setupCallEvt.call_id;\n    baseReq.cmd_name = \'cc_alerting_evt\';\n    baseReq.cmd_guid = \'\';\n    baseReq.puc_version = baseReq.version;\n    baseReq.call_mode = setupCallEvt.attribute.call_mode;\n    _protocol_http__WEBPACK_IMPORTED_MODULE_3__["default"].callPostAsync(baseReq);\n  }\n\n  /** 收到上呼处理方法 */\n  receiveSetupCall(setupCallInfo) {\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].info(\'call - 上呼 setupCallInfo\', JSON.stringify(setupCallInfo));\n    const call_id = setupCallInfo.call_id;\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].info(\'call - 上呼 - 收到上呼信令！~\', call_id);\n\n    /* 根据收到的上呼信息创建会话session */\n    const session = this.sessionFac.inviteSessionBuild(setupCallInfo);\n    if (setupCallInfo.cmd_guid) {\n      session.cmd_guid = setupCallInfo.cmd_guid;\n    }\n    // 如果没有别名就号码当别名\n    if (!session.caller.number_alias && session.caller.number) {\n      session.caller.number_alias = session.caller.number;\n    }\n    if (!session.callee.number_alias && session.callee.number) {\n      session.callee.number_alias = session.callee.number;\n    }\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].info(\'call - 上呼 - session初始化完毕！\', JSON.stringify(session));\n\n    /* 一接到上呼信令，就开始获取音视频流，减小呼叫建立时长 */\n    const promise = this.sessionFac._setMediaOption(session).then(session => {\n      return this.sessionFac._setAudioStream(session);\n    }).then(session => {\n      return this.sessionFac._setVideoStream(session, this.onStream.bind(this));\n    });\n    this.promiseMap.set(session.call_id, promise);\n\n    /* 将session放入呼叫队列 */\n    this.setSession(session.call_id, session);\n\n    /* 如果呼叫是监听，直接触发接听事件 */\n    /* 20231012 经讨论，值守的来电也返回出去，添加标识由外面去判断要不要自动接听。 */\n    // if (session.status.callDirection === CALL_DIRECTION.MONITOR) {\n    //   this.answerCall({\n    //     call_id: session.call_id\n    //   })\n    // }\n\n    const caller = {\n      ...session.caller,\n      realm: setupCallInfo.realm\n    };\n    const callee = {\n      ...session.callee,\n      realm: setupCallInfo.realm\n    };\n    const incomingAttribute = {\n      ...session.attribute\n    };\n    if (incomingAttribute.ip_cross_info) {\n      delete incomingAttribute.ip_cross_info;\n    }\n    if (incomingAttribute.nat_sign) {\n      delete incomingAttribute.nat_sign;\n    }\n    this.onIncomingEvt({\n      call_id: session.call_id,\n      caller_guid: (0,_common_utils__WEBPACK_IMPORTED_MODULE_0__.genLocalGuid)(caller, \'number\'),\n      caller_number: caller.number,\n      caller_alias: caller.number_alias,\n      callee_guid: (0,_common_utils__WEBPACK_IMPORTED_MODULE_0__.genLocalGuid)(callee, \'number\'),\n      callee_alias: callee.number_alias,\n      callee_number: callee.number,\n      attribute: session.attribute,\n      listen_flag: session.status.callDirection === _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_DIRECTION.MONITOR\n    });\n\n    // todo-sdk 呼叫状态变更回调 孕育期 稳定后使用\n    this.onCallProcessChangeEvt({\n      call_process: \'incoming_evt\',\n      call_id: session.call_id,\n      caller_guid: (0,_common_utils__WEBPACK_IMPORTED_MODULE_0__.genLocalGuid)(caller, \'number\'),\n      callee_guid: (0,_common_utils__WEBPACK_IMPORTED_MODULE_0__.genLocalGuid)(callee, \'number\'),\n      attribute: session.attribute\n    });\n  }\n\n  /** 获取当前摄像头的最大分辨率 */\n  getMaxFrameSize = () => {\n    const device = _protocol_webrtc__WEBPACK_IMPORTED_MODULE_4__["default"].getVideoInputDevice();\n    if (device != null && device.getCapabilities && typeof device.getCapabilities === \'function\') {\n      const capabilities = device.getCapabilities();\n      if (!capabilities || !capabilities.width || !capabilities.height) {\n        return _public_constant__WEBPACK_IMPORTED_MODULE_1__.VIDEO_FRAME_SIZE.F1080P;\n      } else {\n        const resolution = capabilities.height.max * capabilities.width.max;\n        if (resolution >= 1080 * 1920) {\n          return _public_constant__WEBPACK_IMPORTED_MODULE_1__.VIDEO_FRAME_SIZE.F1080P;\n        } else if (resolution >= 720 * 1280) {\n          return _public_constant__WEBPACK_IMPORTED_MODULE_1__.VIDEO_FRAME_SIZE.F720P;\n        } else if (resolution >= 576 * 704) {\n          return _public_constant__WEBPACK_IMPORTED_MODULE_1__.VIDEO_FRAME_SIZE.D1;\n        } else if (resolution >= 480 * 640) {\n          return _public_constant__WEBPACK_IMPORTED_MODULE_1__.VIDEO_FRAME_SIZE.VGA;\n        } else if (resolution >= 288 * 352) {\n          return _public_constant__WEBPACK_IMPORTED_MODULE_1__.VIDEO_FRAME_SIZE.CIF;\n        } else if (resolution >= 240 * 320) {\n          return _public_constant__WEBPACK_IMPORTED_MODULE_1__.VIDEO_FRAME_SIZE.QVGA;\n        } else {\n          return _public_constant__WEBPACK_IMPORTED_MODULE_1__.VIDEO_FRAME_SIZE.QCIF;\n        }\n      }\n    } else {\n      return _public_constant__WEBPACK_IMPORTED_MODULE_1__.VIDEO_FRAME_SIZE.F1080P;\n    }\n  };\n\n  /** 将目标分辨率与摄像头采集能力对比，取小 */\n  getSuitableFrameSize(aimFrameSize) {\n    /* 获取摄像头的最大分辨率能力 */\n    const maxFrameSize = this.getMaxFrameSize();\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].debug(\'suitable frameSize\', maxFrameSize);\n    if (aimFrameSize < maxFrameSize) {\n      return aimFrameSize;\n    } else {\n      return maxFrameSize;\n    }\n  }\n\n  /** 禁麦、取消禁麦 */\n  muteMic(data) {\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].debug(\'muteMic\', JSON.stringify(data));\n    return new Promise((resolve, reject) => {\n      const session = this.getSession(data.call_id);\n      if (!session) {\n        _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].error(\'muteMic - 无法找到session: \' + data.call_id);\n        resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.CALL_NOT_EXIT\n        });\n        return;\n      }\n      if (data.is_mute === undefined) {\n        _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].error(\'is_mute is undefined\');\n        return resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n        });\n      }\n      if (typeof data.is_mute !== \'boolean\') {\n        _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].error(\'is_mute is not boolean\');\n        return resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n        });\n      }\n      if (!session.mediaRTC.localStream1) {\n        _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].error(\'muteCamera 本地媒体流为空 \');\n        resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.GET_MEDIA_FAIL\n        });\n        return;\n      }\n      _protocol_webrtc__WEBPACK_IMPORTED_MODULE_4__["default"].muteAudio(session.mediaRTC.localStream1, data.is_mute).then(() => {\n        resolve(_public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].getBaseResp(0, \'MuteMic Success!~\'));\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  /** 禁止发送本地摄像头 */\n  muteCamera(data) {\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].debug(\'muteCamera\', JSON.stringify(data));\n    return new Promise((resolve, reject) => {\n      const session = this.getSession(data.call_id);\n      if (!session) {\n        _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].error(\'muteCamera - 无法找到session: \' + data.call_id);\n        resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.CALL_NOT_EXIT\n        });\n        return;\n      }\n      if (data.is_mute === undefined) {\n        _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].error(\'is_mute is undefined\');\n        return resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n        });\n      }\n      if (typeof data.is_mute !== \'boolean\') {\n        _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].error(\'is_mute is not boolean\');\n        return resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n        });\n      }\n      if (!session.mediaRTC.localStream2) {\n        _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].error(\'muteCamera 本地媒体流为空 \');\n        resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.GET_MEDIA_FAIL\n        });\n        return;\n      }\n      _protocol_webrtc__WEBPACK_IMPORTED_MODULE_4__["default"].muteVideo(session.mediaRTC.localStream2, data.is_mute).then(() => {\n        resolve(_public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].getBaseResp(0, \'MuteCamera Success!~\'));\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  // 静音 呼叫\n  muteCall(data) {\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].debug(\'muteCall\', JSON.stringify(data));\n    return new Promise((resolve, reject) => {\n      const session = this.getSession(data.call_id);\n      if (!session) {\n        _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].error(\'muteCamera - 无法找到session: \' + data.call_id);\n        resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.CALL_NOT_EXIT\n        });\n        return;\n      }\n      if (data.is_mute === undefined) {\n        _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].error(\'is_mute is undefined\');\n        return resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n        });\n      }\n      if (typeof data.is_mute !== \'boolean\') {\n        _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].error(\'is_mute is not boolean\');\n        return resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n        });\n      }\n      if (!session.mediaRTC.remoteStream1) {\n        _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].error(\'muteCall 远端媒体流为空 \');\n        resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.GET_MEDIA_FAIL\n        });\n        return;\n      }\n      _protocol_webrtc__WEBPACK_IMPORTED_MODULE_4__["default"].muteAudio(session.mediaRTC.remoteStream1, data.is_mute).then(() => {\n        resolve(_public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].getBaseResp(0, \'muteCall Success!~\'));\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  // 禁止呼叫画面\n  prohibitCallVideo(data) {\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].debug(\'prohibitCallVideo\', JSON.stringify(data));\n    return new Promise((resolve, reject) => {\n      const session = this.getSession(data.call_id);\n      if (!session) {\n        _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].error(\'prohibitCallVideo - 无法找到session: \' + data.call_id);\n        resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.CALL_NOT_EXIT\n        });\n        return;\n      }\n      if (data.is_mute === undefined) {\n        _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].error(\'is_mute is undefined\');\n        return resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n        });\n      }\n      if (typeof data.is_mute !== \'boolean\') {\n        _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].error(\'is_mute is not boolean\');\n        return resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n        });\n      }\n      if (!session.mediaRTC.remoteStream2) {\n        _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].error(\'prohibitCallVideo 远端媒体流为空 \');\n        resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.GET_MEDIA_FAIL\n        });\n        return;\n      }\n      _protocol_webrtc__WEBPACK_IMPORTED_MODULE_4__["default"].muteVideo(session.mediaRTC.remoteStream2, data.is_mute).then(() => {\n        resolve(_public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].getBaseResp(0, \'prohibitCallVideo Success!~\'));\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  /**\n   * 自动推测语音呼叫类型\n   * @param {string} basedata_id \n   * @returns \n   */\n  _determineVoiceCallType(basedata_id) {\n    const result = {\n      call_type: undefined,\n      duplex_flag: undefined\n    };\n    const ids = (0,_common_utils__WEBPACK_IMPORTED_MODULE_0__.unPackGuid)(basedata_id);\n    if (ids && ids.number_type !== undefined) {\n      // 组呼\n      if (ids.number_type === _public_constant__WEBPACK_IMPORTED_MODULE_1__.NUMBER_TYPE.GROUP || ids.number_type === _public_constant__WEBPACK_IMPORTED_MODULE_1__.NUMBER_TYPE.DYNAMIC_GROUP || ids.number_type === _public_constant__WEBPACK_IMPORTED_MODULE_1__.NUMBER_TYPE.ROIP_GROUP || ids.number_type === _public_constant__WEBPACK_IMPORTED_MODULE_1__.NUMBER_TYPE.SYS_PATCH) {\n        result.call_type = _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_TYPE.GROUP;\n        //组呼 就是半双工\n        result.duplex_flag = 0;\n      }\n\n      // 调度员互通\n      if (ids.number_type === _public_constant__WEBPACK_IMPORTED_MODULE_1__.NUMBER_TYPE.DC || ids.number_type === _public_constant__WEBPACK_IMPORTED_MODULE_1__.NUMBER_TYPE.DISPATCHER) {\n        result.call_type = _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_TYPE.INTERCOM;\n      }\n\n      // 个呼\n      if (ids.number_type === _public_constant__WEBPACK_IMPORTED_MODULE_1__.NUMBER_TYPE.INDIVIDUAL || ids.number_type === _public_constant__WEBPACK_IMPORTED_MODULE_1__.NUMBER_TYPE.ROIP_INDIVIDUAL) {\n        result.call_type === _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_TYPE.INDIVIDUAL;\n      }\n      // 会议\n      if (ids.number_type === _public_constant__WEBPACK_IMPORTED_MODULE_1__.NUMBER_TYPE.CONFERENCE) {\n        result.call_type = _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_TYPE.CONFERENCE_CALL_WITH_VOICE;\n        //会议 就是全双工\n        result.duplex_flag = 1;\n      }\n      //群组\n      if (ids.number_type === _public_constant__WEBPACK_IMPORTED_MODULE_1__.NUMBER_TYPE.CROSS_PATCH) {\n        result.call_type = _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_TYPE.CROSSPATCH;\n        result.duplex_flag = 0;\n      }\n    }\n    return result;\n  }\n  /**\n   * 自动推测视频呼叫类型\n   * @param {string} basedata_id \n   * @returns \n   */\n  _determineVideoCallType(basedata_id) {\n    const result = {\n      call_type: undefined,\n      duplex_flag: undefined\n    };\n    const ids = (0,_common_utils__WEBPACK_IMPORTED_MODULE_0__.unPackGuid)(basedata_id);\n    if (ids && ids.number_type !== undefined) {\n      // 组呼\n      if (ids.number_type === _public_constant__WEBPACK_IMPORTED_MODULE_1__.NUMBER_TYPE.GROUP || ids.number_type === _public_constant__WEBPACK_IMPORTED_MODULE_1__.NUMBER_TYPE.DYNAMIC_GROUP || ids.number_type === _public_constant__WEBPACK_IMPORTED_MODULE_1__.NUMBER_TYPE.ROIP_GROUP) {\n        result.call_type = _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_TYPE.GROUP_VIDEO_AND_VOC;\n        //组呼 就是半双工\n        result.duplex_flag = 0;\n      }\n      // 调度员互通\n      if (ids.number_type === _public_constant__WEBPACK_IMPORTED_MODULE_1__.NUMBER_TYPE.DC || ids.number_type === _public_constant__WEBPACK_IMPORTED_MODULE_1__.NUMBER_TYPE.DISPATCHER) {\n        result.call_type = _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_TYPE.INTERCOM_VIDEO_AND_VOC;\n      }\n\n      // 个呼\n      if (ids.number_type === _public_constant__WEBPACK_IMPORTED_MODULE_1__.NUMBER_TYPE.INDIVIDUAL || ids.number_type === _public_constant__WEBPACK_IMPORTED_MODULE_1__.NUMBER_TYPE.ROIP_INDIVIDUAL) {\n        result.call_type === _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_TYPE.INDIVIDUAL_VIDEO_AND_VOC;\n      }\n      // 会议\n      if (ids.number_type === _public_constant__WEBPACK_IMPORTED_MODULE_1__.NUMBER_TYPE.CONFERENCE) {\n        result.call_type = _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_TYPE.CONFERENCE_CALL_WITH_VIDEO_AND_VOICE;\n        //会议 就是全双工\n        result.duplex_flag = 1;\n      }\n      //群组没有视频通话\n      // if (ids.number_type === NUMBER_TYPE.CROSS_PATCH) {\n      //   result.call_type = CALL_TYPE.CROSSPATCH\n      //   result.duplex_flag = 0\n      // }\n    }\n\n    return result;\n  }\n  /**\n   * 外呼，即拨打公网电话\n   * @param {object} data \n   * @param {String} data.number 普通电话号码\n   */\n  makeTelCall(data) {\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].debug(\'makeTelCall start,number is\', JSON.stringify(data));\n    if (!data || !data.number) {\n      // 什么鬼，号码都不传进来？\n      _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].warn(\'makeTelCall interrupt\');\n      return Promise.resolve({\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n      });\n    }\n    //找找外呼系统吧\n    const sysList = _baseData__WEBPACK_IMPORTED_MODULE_8__["default"].findSystemByType(_public_constant__WEBPACK_IMPORTED_MODULE_1__.SYSTEM_TYPE.PSTN);\n    if ((sysList === null || sysList === void 0 ? void 0 : sysList.length) <= 0) {\n      // 没有配置pstn或者用户没有pstn的权限\n      _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].warn(\'makeTelCall interrupt,sys not found\');\n      return Promise.resolve({\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.SYSTEM_NOT_FOUND\n      });\n    }\n    //不管有多少我取一个就好，\n    const sys = sysList[0];\n    /**\n     * @type {import(\'../common/utils\').Pack}\n     */\n\n    const basedataPack = {\n      puc_id: sys.puc_id,\n      system_id: sys.system_id,\n      number_type: _public_constant__WEBPACK_IMPORTED_MODULE_1__.NUMBER_TYPE.EXTERNAL,\n      number: data.number\n    };\n    const basedata_id = (0,_common_utils__WEBPACK_IMPORTED_MODULE_0__.genLocalGuid)(basedataPack, \'number\');\n    const call_info = {\n      callee_guid: basedata_id,\n      attribute: {\n        call_type: _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_TYPE.EXTERNAL,\n        call_mode: _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_MODE.AUDIO,\n        duplex_flag: 1\n      }\n      // video_frame_size: this.getMaxFrameSize()\n    };\n\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].debug(\'makePhoneCall call_info\', call_info);\n    return this.makeCall(call_info);\n  }\n  /**\n   * 语音通话，全双工\n   * @param {object} data \n   * @param {string} data.basedata_id 呼叫对象的基础数据id\n   * @param {string} data.callee_alias 被叫别名\n   * @param {number} [data.duplex_flag] 双工配置 \n   * @param {number} data.hook_flag 0：自动接听，1：手动接听，不传默认是手动接听呼叫\n   * @returns \n   */\n  makeVoiceCall(data) {\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].debug(\'makeVoiceCall start,basedata_id is\', JSON.stringify(data));\n    if (!data || !data.basedata_id) {\n      _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].warn(\'makeVoiceCall interrupt\');\n      return Promise.resolve({\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n      });\n    }\n    //给默认值\n    if (data.duplex_flag === undefined) {\n      data.duplex_flag = 1;\n    }\n    let result = this._determineVoiceCallType(data.basedata_id);\n    const call_info = {\n      callee_guid: data.basedata_id,\n      callee_alias: data.callee_alias || "",\n      attribute: {\n        call_type: result.call_type === undefined ? _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_TYPE.INDIVIDUAL : result.call_type,\n        call_mode: _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_MODE.AUDIO,\n        duplex_flag: result.duplex_flag === undefined ? data.duplex_flag : result.duplex_flag,\n        hook_flag: data.hook_flag === undefined ? 1 : data.hook_flag\n      }\n    };\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].debug(\'makeVoiceCall call_info\', JSON.stringify(call_info));\n    return this.makeCall(call_info);\n  }\n  /**\n   * 视频个呼通话，全双工\n   * @param {object} data \n   * @param {string} data.basedata_id 呼叫对象的基础数据id\n   * @param {string} data.callee_alias 被叫别名\n   * @param {number} data.video_frame_size   视频分辨率枚举 \n   * @param {number} data.hook_flag 0：自动接听，1：手动接听，不传默认是手动接听呼叫\n   * \n   * @returns \n   */\n  makeVideoCall(data) {\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].debug(\'makeVideoCall start,basedata_id is\', JSON.stringify(data));\n    if (!data || !data.basedata_id) {\n      _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].warn(\'makeVideoCall interrupt\');\n      return Promise.resolve({\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n      });\n    }\n    const result = this._determineVideoCallType(data.basedata_id);\n    const call_info = {\n      callee_guid: data.basedata_id,\n      callee_alias: data.callee_alias || "",\n      attribute: {\n        call_type: result.call_type === undefined ? _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_TYPE.INDIVIDUAL_VIDEO_AND_VOC : result.call_type,\n        call_mode: _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_MODE.AUDIO_VIDEO,\n        duplex_flag: result.duplex_flag === undefined ? 1 : result.duplex_flag,\n        hook_flag: data.hook_flag === undefined ? 1 : data.hook_flag\n      },\n      video_frame_size: data.video_frame_size !== undefined ? data.video_frame_size : this.getMaxFrameSize()\n    };\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].debug(\'makeVideoCall call_info\', JSON.stringify(call_info));\n    return this.makeCall(call_info);\n  }\n  /**\n   * 语音通话，全双工\n   * @param {object} data \n   * @param {string} data.basedata_id 呼叫对象的基础数据id\n   * @param {string} data.callee_alias 被叫别名\n   * @param {number} data.hook_flag 0：自动接听，1：手动接听，不传默认是手动接听呼叫\n   * @returns \n   */\n  makeGroupVoiceCall(data) {\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].debug(\'makeGroupVoiceCall start,basedata_id is\', JSON.stringify(data));\n    if (!data || !data.basedata_id) {\n      // 什么鬼，号码都不传进来？\n      _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].warn(\'makeGroupVoiceCall interrupt\');\n      return Promise.resolve({\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n      });\n    }\n    const call_info = {\n      callee_guid: data.basedata_id,\n      callee_alias: data.callee_alias || "",\n      attribute: {\n        call_type: _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_TYPE.GROUP,\n        call_mode: _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_MODE.AUDIO,\n        duplex_flag: 0,\n        hook_flag: data.hook_flag === undefined ? 1 : data.hook_flag\n      }\n      // video_frame_size: this.getMaxFrameSize()\n    };\n\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].debug(\'makeGroupVoiceCall call_info\', JSON.stringify(call_info));\n    return this.makeCall(call_info);\n  }\n  /**\n   * 组内视频通话，全双工\n   * @param {object} data \n   * @param {string} data.basedata_id 呼叫对象的基础数据id\n   * @param {string} data.callee_alias 被叫别名\n   * @param {number} data.video_frame_size   视频分辨率枚举 \n   * @param {number} data.hook_flag 0：自动接听，1：手动接听，不传默认是手动接听呼叫\n   * @returns \n   */\n  makeGroupVideoCall(data) {\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].debug(\'makeGroupVideoCall start,basedata_id is\', JSON.stringify(data));\n    if (!data || !data.basedata_id) {\n      // 什么鬼，号码都不传进来？\n      _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].warn(\'makeGroupVideoCall interrupt\');\n      return Promise.resolve({\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n      });\n    }\n    const call_info = {\n      callee_guid: data.basedata_id,\n      callee_alias: data.callee_alias || "",\n      attribute: {\n        call_type: _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_TYPE.GROUP_VIDEO_AND_VOC,\n        call_mode: _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_MODE.AUDIO_VIDEO,\n        duplex_flag: 0,\n        hook_flag: data.hook_flag === undefined ? 1 : data.hook_flag\n      },\n      video_frame_size: data.video_frame_size !== undefined ? data.video_frame_size : this.getMaxFrameSize()\n    };\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].debug(\'makeGroupVideoCall call_info\', JSON.stringify(call_info));\n    return this.makeCall(call_info);\n  }\n  /**\n   * 语音呼叫调度员\n   * @param {object} data \n   * @param {string} data.basedata_id 呼叫对象的基础数据id\n   * @param {string} data.callee_alias 被叫别名\n   * @param {number} [data.duplex_flag] 双工配置 \n   * @param {number} data.hook_flag 0：自动接听，1：手动接听，不传默认是手动接听呼叫\n   */\n  makeDispatcherVoiceCall(data) {\n    var _unPackGuid;\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].debug(\'makeDispatcherVoiceCall start,basedata_id is\', JSON.stringify(data));\n    if (!data || !data.basedata_id) {\n      // 什么鬼，号码都不传进来？\n      _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].warn(\'makeDispatcherVoiceCall interrupt\');\n      return Promise.resolve({\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n      });\n    }\n    const number_type = (_unPackGuid = (0,_common_utils__WEBPACK_IMPORTED_MODULE_0__.unPackGuid)(data.basedata_id)) === null || _unPackGuid === void 0 ? void 0 : _unPackGuid.number_type;\n    if (number_type !== _public_constant__WEBPACK_IMPORTED_MODULE_1__.NUMBER_TYPE.DISPATCHER && number_type !== _public_constant__WEBPACK_IMPORTED_MODULE_1__.NUMBER_TYPE.DC) {\n      _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].warn(\'makeDispatcherVoiceCall interrupt\');\n      return Promise.resolve({\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.NUMBER_TYPE_NOR_MATCH\n      });\n    }\n    const call_info = {\n      callee_guid: data.basedata_id,\n      callee_alias: data.callee_alias || "",\n      attribute: {\n        call_type: _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_TYPE.INTERCOM,\n        call_mode: _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_MODE.AUDIO,\n        duplex_flag: data.duplex_flag === undefined ? 1 : data.duplex_flag,\n        hook_flag: data.hook_flag === undefined ? 1 : data.hook_flag\n      }\n      // video_frame_size: this.getMaxFrameSize()\n    };\n\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].debug(\'makeDispatcherVoiceCall call_info\', JSON.stringify(call_info));\n    return this.makeCall(call_info);\n  }\n  /**\n   * 视频呼叫调度员\n   * @param {object} data \n   * @param {string} data.basedata_id 呼叫对象的基础数据id\n   * @param {string} data.callee_alias 被叫别名\n   * @param {number} data.video_frame_size   视频分辨率枚举 \n   * @param {number} data.hook_flag 0：自动接听，1：手动接听，不传默认是手动接听呼叫\n   */\n  makeDispatcherVideoCall(data) {\n    var _unPackGuid2;\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].debug(\'makeDispatcherVideoCall start,basedata_id is\', JSON.stringify(data));\n    if (!data || !data.basedata_id) {\n      // 什么鬼，号码都不传进来？\n      _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].warn(\'makeDispatcherVideoCall interrupt\');\n      return Promise.resolve({\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n      });\n    }\n    const number_type = (_unPackGuid2 = (0,_common_utils__WEBPACK_IMPORTED_MODULE_0__.unPackGuid)(data.basedata_id)) === null || _unPackGuid2 === void 0 ? void 0 : _unPackGuid2.number_type;\n    if (number_type !== _public_constant__WEBPACK_IMPORTED_MODULE_1__.NUMBER_TYPE.DISPATCHER && number_type !== _public_constant__WEBPACK_IMPORTED_MODULE_1__.NUMBER_TYPE.DC) {\n      _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].warn(\'makeDispatcherVideoCall interrupt\');\n      return Promise.resolve({\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.NUMBER_TYPE_NOR_MATCH\n      });\n    }\n    const call_info = {\n      callee_guid: data.basedata_id,\n      callee_alias: data.callee_alias || "",\n      attribute: {\n        call_type: _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_TYPE.INTERCOM_VIDEO_AND_VOC,\n        call_mode: _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_MODE.AUDIO_VIDEO,\n        duplex_flag: 1,\n        hook_flag: data.hook_flag === undefined ? 1 : data.hook_flag\n      },\n      video_frame_size: data.video_frame_size !== undefined ? data.video_frame_size : this.getMaxFrameSize()\n    };\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].debug(\'makeDispatcherVideoCall call_info\', JSON.stringify(call_info));\n    return this.makeCall(call_info);\n  }\n  /**\n   * 语音会议呼叫\n   * @param {object} data \n   * @param {string} data.basedata_id 呼叫对象的基础数据id\n   * @param {string} data.callee_alias 被叫别名\n   * @param {number} data.hook_flag 0：自动接听，1：手动接听，不传默认是手动接听呼叫\n   */\n  makeConferenceVoiceCall(data) {\n    var _unPackGuid3;\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].debug(\'makeConferenceVoiceCall start,basedata_id is\', JSON.stringify(data));\n    if (!data || !data.basedata_id) {\n      // 什么鬼，号码都不传进来？\n      _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].warn(\'makeConferenceVoiceCall interrupt\');\n      return Promise.resolve({\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n      });\n    }\n    if (((_unPackGuid3 = (0,_common_utils__WEBPACK_IMPORTED_MODULE_0__.unPackGuid)(data.basedata_id)) === null || _unPackGuid3 === void 0 ? void 0 : _unPackGuid3.number_type) !== _public_constant__WEBPACK_IMPORTED_MODULE_1__.NUMBER_TYPE.CONFERENCE) {\n      _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].warn(\'makeConferenceVoiceCall interrupt\');\n      return Promise.resolve({\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.NUMBER_TYPE_NOR_MATCH\n      });\n    }\n    const call_info = {\n      callee_guid: data.basedata_id,\n      callee_alias: data.callee_alias || "",\n      attribute: {\n        call_type: _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_TYPE.CONFERENCE_CALL_WITH_VOICE,\n        call_mode: _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_MODE.AUDIO,\n        duplex_flag: 1,\n        hook_flag: data.hook_flag === undefined ? 1 : data.hook_flag\n      }\n      // video_frame_size: this.getMaxFrameSize()\n    };\n\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].debug(\'makeDispatcherVideoCall call_info\', JSON.stringify(call_info));\n    return this.makeCall(call_info);\n  }\n  /**\n   * 视频会议呼叫\n   * @param {object} data \n   * @param {string} data.basedata_id 呼叫对象的基础数据id\n   * @param {string} data.callee_alias 被叫别名\n   * @param {number} data.video_frame_size   视频分辨率枚举 \n   * @param {number} data.hook_flag 0：自动接听，1：手动接听，不传默认是手动接听呼叫\n   */\n  makeConferenceVideoCall(data) {\n    var _unPackGuid4;\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].debug(\'makeConferenceVideoCall start,basedata_id is\', JSON.stringify(data));\n    if (!data || !data.basedata_id) {\n      // 什么鬼，号码都不传进来？\n      _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].warn(\'makeConferenceVideoCall interrupt\');\n      return Promise.resolve({\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n      });\n    }\n    if (((_unPackGuid4 = (0,_common_utils__WEBPACK_IMPORTED_MODULE_0__.unPackGuid)(data.basedata_id)) === null || _unPackGuid4 === void 0 ? void 0 : _unPackGuid4.number_type) !== _public_constant__WEBPACK_IMPORTED_MODULE_1__.NUMBER_TYPE.CONFERENCE) {\n      _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].warn(\'makeConferenceVideoCall interrupt\');\n      return Promise.resolve({\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.NUMBER_TYPE_NOR_MATCH\n      });\n    }\n    const call_info = {\n      callee_guid: data.basedata_id,\n      callee_alias: data.callee_alias || "",\n      attribute: {\n        call_type: _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_TYPE.CONFERENCE_CALL_WITH_VIDEO_AND_VOICE,\n        call_mode: _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_MODE.AUDIO_VIDEO,\n        duplex_flag: 1,\n        hook_flag: data.hook_flag === undefined ? 1 : data.hook_flag\n      },\n      video_frame_size: data.video_frame_size !== undefined ? data.video_frame_size : this.getMaxFrameSize()\n    };\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].debug(\'makeConferenceVideoCall call_info\', JSON.stringify(call_info));\n    return this.makeCall(call_info);\n  }\n\n  /**\n  * 语音群组呼叫\n  * @param {object} data \n  * @param {string} data.basedata_id 呼叫对象的基础数据id\n  * @param {string} data.callee_alias 被叫别名\n  * @param {number} data.hook_flag 0：自动接听，1：手动接听，不传默认是手动接听呼叫\n  */\n  makeCrosspatchVoiceCall(data) {\n    var _unPackGuid5;\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].debug(\'makeCrosspatchVoiceCall start,basedata_id is\', JSON.stringify(data));\n    if (!data || !data.basedata_id) {\n      // 什么鬼，号码都不传进来？\n      _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].warn(\'makeCrosspatchVoiceCall interrupt\');\n      return Promise.resolve({\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n      });\n    }\n    if (((_unPackGuid5 = (0,_common_utils__WEBPACK_IMPORTED_MODULE_0__.unPackGuid)(data.basedata_id)) === null || _unPackGuid5 === void 0 ? void 0 : _unPackGuid5.number_type) !== _public_constant__WEBPACK_IMPORTED_MODULE_1__.NUMBER_TYPE.CROSS_PATCH) {\n      _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].warn(\'makeCrosspatchVoiceCall interrupt\');\n      return Promise.resolve({\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.NUMBER_TYPE_NOR_MATCH\n      });\n    }\n    const call_info = {\n      callee_guid: data.basedata_id,\n      callee_alias: data.callee_alias || "",\n      attribute: {\n        call_type: _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_TYPE.CROSSPATCH,\n        call_mode: _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_MODE.AUDIO,\n        duplex_flag: 0,\n        hook_flag: data.hook_flag === undefined ? 1 : data.hook_flag\n      }\n      // video_frame_size: this.getMaxFrameSize()\n    };\n\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].debug(\'makeCrosspatchVoiceCall call_info\', JSON.stringify(call_info));\n    return this.makeCall(call_info);\n  }\n  //   /**\n  //  * 视频群组呼叫   群组没有视频的呼叫\n  //  * @param {object} data \n  //  * @param {string} data.basedata_id 呼叫对象的基础数据id\n  //  */\n  //   makeCrosspatchVideoCall (data) {\n  //     log.debug(\'makeCrosspatchVideoCall start,basedata_id is\', JSON.stringify(data));\n  //     if (!data || !data.basedata_id) {\n  //       // 什么鬼，号码都不传进来？\n  //       log.warn(\'makeCrosspatchVideoCall interrupt\');\n  //       return Promise.resolve({ result: ERROR_CODE.PARAM_INVALID })\n  //     }\n  //     if (unPackGuid(data.basedata_id)?.number_type !== NUMBER_TYPE.CROSS_PATCH) {\n  //       log.warn(\'makeCrosspatchVideoCall interrupt\');\n  //       return Promise.resolve({ result: ERROR_CODE.NUMBER_TYPE_NOR_MATCH })\n  //     }\n  //     const call_info = {\n  //       callee_guid: data.basedata_id,\n  //       attribute: {\n  //         call_type: CALL_TYPE.CROSSPATCH,\n  //         call_mode: CALL_MODE.AUDIO_VIDEO,\n  //         duplex_flag: 0,\n  //       },\n  //       // video_frame_size: this.getMaxFrameSize()\n  //     }\n  //     log.debug(\'makeCrosspatchVideoCall call_info\', call_info);\n  //     this.makeCall(call_info)\n  //   }\n\n  /**\n   * 视频上拉\n   * @param {object} data \n   * @param {string} data.basedata_id 呼叫对象的基础数据id\n   * @param {string} data.callee_alias 被叫别名\n   * @param {number} data.hook_flag 0：自动接听，1：手动接听，不传默认是手动接听呼叫\n   * @param {number} data.video_frame_size   视频分辨率枚举 \n   */\n  pullVideo(data) {\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].debug(\'pullVideo start,basedata_id is\', JSON.stringify(data));\n    if (!data || !data.basedata_id) {\n      // 什么鬼，号码都不传进来？\n      _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].warn(\'pullVideo interrupt\');\n      return Promise.resolve({\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n      });\n    }\n    const call_info = {\n      callee_guid: data.basedata_id,\n      callee_alias: data.callee_alias || "",\n      attribute: {\n        call_type: _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_TYPE.PULL_VIDEO_CALL,\n        call_mode: _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_MODE.VIDEO,\n        duplex_flag: 0,\n        camera_flag: 1,\n        hook_flag: data.hook_flag === undefined ? 1 : data.hook_flag\n      },\n      video_frame_size: data.video_frame_size !== undefined ? data.video_frame_size : this.getMaxFrameSize()\n    };\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].debug(\'pullVideo call_info\', JSON.stringify(call_info));\n    return this.makeCall(call_info);\n  }\n  /**\n  * 视频推送\n  * @param {object} data \n  * @param {string} data.basedata_id 呼叫对象\n  * @param {string} data.callee_alias 被叫别名\n  * @param {MediaStream} data.stream 视频文件的媒体流\n  * @param {number} data.video_frame_size   视频分辨率枚举 \n  */\n  pushVideoFile(data) {\n    if (!data || !data.basedata_id || !data.stream) {\n      _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].warn(\'pushVideoFile interrupt\', JSON.stringify(data));\n      return Promise.resolve({\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n      });\n    }\n    const call_info = {\n      callee_guid: data.basedata_id,\n      callee_alias: data.callee_alias || "",\n      attribute: {\n        call_type: _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_TYPE.PUSH_VIDEO_CALL,\n        call_mode: _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_MODE.AUDIO_VIDEO,\n        duplex_flag: 0\n      },\n      transferAudioStream: new MediaStream(data.stream.getAudioTracks()),\n      transferVideoStream: new MediaStream(data.stream.getVideoTracks()),\n      video_frame_size: data.video_frame_size !== undefined ? data.video_frame_size : this.getMaxFrameSize()\n    };\n    return this.makeCall(call_info);\n  }\n  /**\n   * 视频转发\n   * @param {object} data \n   * @param {string} data.basedata_id 转发对象的basedata_id\n   * @param {string} data.callee_alias 被叫别名\n   * @param {string} data.call_id 要转发的呼叫\n   * @param {number} data.action // 0：开始转发 1：停止转发\n   */\n  forwardVideoCall(data) {\n    if (!data || !data.basedata_id || !data.call_id || data.action === undefined) {\n      _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].warn(\'transferVideoCall interrupt\', JSON.stringify(data));\n      return Promise.resolve({\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.PARAM_INVALID\n      });\n    }\n    const session = this.getSession(data.call_id);\n    // 没找到这个呼叫，直接返回吧\n    if (!session) {\n      return Promise.resolve({\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.CALL_NOT_EXIT\n      });\n    }\n    //如果是视频上拉直接服务端转发流\n    if (session.attribute.call_type === _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_TYPE.PULL_VIDEO_CALL) {\n      return new Promise((resolve, reject) => {\n        const ids = (0,_common_utils__WEBPACK_IMPORTED_MODULE_0__.unPackGuid)(data.basedata_id);\n        const param = {\n          call_id: data.call_id,\n          cmd_name: \'cc_video_forward\',\n          cmd_guid: "",\n          user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].user.user_id,\n          realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].user.realm,\n          puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].user.puc_id,\n          puc_version: \'10\',\n          product_name: \'PUC\',\n          forward_opt: data.action,\n          // 0：开始转发 1：停止转发\n          forward_src: 1,\n          forward: {\n            puc_id: ids.puc_id,\n            system_id: ids.system_id,\n            number: ids.what_id,\n            number_type: ids.number_type,\n            time_slot: ids.time_slot || \'\'\n          }\n        };\n        if (data.action === 0) {\n          let forwardBasedataList = [];\n          if (this._pullVideoForwardMap.has(data.call_id)) {\n            forwardBasedataList = this._pullVideoForwardMap.get(data.call_id);\n            forwardBasedataList.push(data.basedata_id);\n          } else {\n            forwardBasedataList.push(data.basedata_id);\n            this._pullVideoForwardMap.set(data.call_id, forwardBasedataList);\n          }\n        }\n        _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].debug(\'cc_video_forward param\', JSON.stringify(param));\n        _protocol_http__WEBPACK_IMPORTED_MODULE_3__["default"].callPost(param).then(resp => {\n          _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].debug(\'cc_video_forward resp\', JSON.stringify(resp));\n          resolve({\n            result: 0,\n            forward_call_id: param.call_id\n          });\n        }).catch(err => {\n          reject(err);\n        });\n      });\n    } else {\n      //要挂断转发的呼叫\n      if (data.action === 1) {\n        const ids = (0,_common_utils__WEBPACK_IMPORTED_MODULE_0__.unPackGuid)(data.basedata_id);\n        let forward_call_id;\n        //找出来被叫信息与basedata_id信息一样且呼叫类型是视频转发的call_id\n        this._callsessions.forEach((value, key) => {\n          if (value.attribute.call_type === _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_TYPE.PUSH_VIDEO_CALL && value.callee.number === ids.what_id && value.callee.number_type === ids.number_type && value.callee.system_id === ids.system_id && value.callee.puc_id === ids.puc_id && (0,_common_utils__WEBPACK_IMPORTED_MODULE_0__.isEqual)(value.callee.time_slot, ids.time_slot)) {\n            forward_call_id = key;\n          }\n        });\n        //找出来了就挂断嘛\n        if (forward_call_id) {\n          return this.hangupCall({\n            call_id: forward_call_id\n          });\n        } else {\n          return Promise.resolve({\n            result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.CALL_NOT_EXIT\n          });\n        }\n      } else {\n        //要转发一个非视频上拉的呼叫\n        let aimFramesize = session.mediaRTC.mediaOptions.video_frame_size;\n        if (aimFramesize === -1) {\n          aimFramesize = this.getMaxFrameSize();\n        }\n        const forward_call_id = (0,_common_utils__WEBPACK_IMPORTED_MODULE_0__.guid)();\n        this._forwardCallIDMap.set(forward_call_id, \'1\');\n        let forwardCallList = [];\n        if (this._forwardMap.has(data.call_id)) {\n          forwardCallList = this._forwardMap.get(data.call_id);\n          forwardCallList.push(forward_call_id);\n        } else {\n          forwardCallList.push(forward_call_id);\n          this._forwardMap.set(data.call_id, forwardCallList);\n        }\n        const call_info = {\n          call_id: forward_call_id,\n          callee_guid: data.basedata_id,\n          callee_alias: data.callee_alias || "",\n          attribute: {\n            call_type: _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_TYPE.PUSH_VIDEO_CALL,\n            call_mode: _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_MODE.VIDEO,\n            duplex_flag: 0\n          },\n          transferVideoStream: session.mediaRTC.remoteStream2,\n          video_frame_size: aimFramesize\n        };\n        return this.makeCall(call_info);\n      }\n    }\n  }\n\n  //接收视频转发字段\n  receiveForwardAck(jsonData) {\n    if (jsonData.forward_opt === 0 && jsonData.result === 0) {\n      // 开发转发 且转发成功走 接通 回调。 其他的都走 挂断回调\n      const session = this.getSession(jsonData.call_id);\n      // 没找到这个呼叫，直接返回吧\n      if (!session) {\n        _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].debug("receiveForwardAck call no exit");\n        return;\n      }\n      const caller = {\n        ...session.caller,\n        realm: session.realm\n      };\n      const callee = {\n        ...jsonData.forward,\n        realm: jsonData.realm\n      };\n      const answerAckInfo = {\n        call_id: jsonData.call_id,\n        caller_guid: (0,_common_utils__WEBPACK_IMPORTED_MODULE_0__.genLocalGuid)(caller, \'number\'),\n        caller_number: caller.number,\n        caller_alias: caller.number_alias,\n        callee_guid: (0,_common_utils__WEBPACK_IMPORTED_MODULE_0__.genLocalGuid)(callee, \'number\'),\n        callee_alias: callee.number_alias,\n        callee_number: callee.number,\n        attribute: {\n          ...session.attribute\n        },\n        remote_receive: true,\n        farward_call: true\n      };\n      answerAckInfo.forward_basedata_id = answerAckInfo.callee_guid;\n      _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].debug(\'call - 回调 - 接听回调被触发\', JSON.stringify(answerAckInfo));\n      this.onConnecteds.forEach(func => {\n        this._safeOnCallback(func, answerAckInfo);\n      });\n    } else {\n      // if (jsonData.forward_opt === 0 && jsonData.result === 1) {\n      //   //  正常转发过程中被终端挂断\n      // }\n      const forwardObj = {\n        ...jsonData.forward,\n        realm: jsonData.realm\n      };\n      const forwardBasedataId = (0,_common_utils__WEBPACK_IMPORTED_MODULE_0__.genLocalGuid)(forwardObj, \'number\');\n      // debugger;\n      if (!this._pullVideoForwardMap.has(jsonData.call_id)) {\n        _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].debug("receiveForwardAck already processed ");\n        return;\n      }\n      const basedataList = this._pullVideoForwardMap.get(jsonData.call_id);\n      if (basedataList === null || basedataList === undefined) {\n        _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].debug("receiveForwardAck already processed1 ");\n        return;\n      }\n      const index = basedataList.indexOf(forwardBasedataId);\n      if (index === -1) {\n        // 已经被删除了\n        _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].debug("receiveForwardAck already processed2 ");\n        return;\n      }\n      basedataList.splice(index, 1);\n      if (basedataList.length === 0) {\n        this._pullVideoForwardMap.delete(jsonData.call_id);\n      }\n      this.onHangupEvt({\n        call_id: jsonData.call_id,\n        disconnect_reason: jsonData.reason === 53300862 ? 0 : jsonData.reason,\n        own_hangup_call: jsonData.reason === 53300862,\n        farward_call: true,\n        forward_basedata_id: forwardBasedataId\n      });\n    }\n  }\n\n  /**\n   * 会议禁言和恢复\n   * @param {object} speak_setting 会议\n   * @param {string} speak_setting.conference_call_id 会议的call id\n   * @param {string} speak_setting.conference_basedata_id 会议basedata_id\n   * @param {object} speak_setting.member_setting \n   * @param {string} speak_setting.member_setting.member_basedata_id 会议成员 basedata_id\n   * @param {number} speak_setting.member_setting.forbid   操作类型  1：禁言开始， 0：禁言停止\n   * @return {Promise.<SpeakSettingResult>}\n   */\n  conferenceMemberSpeakSet(speak_setting) {\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].debug("conferenceMemberSpeakSet", JSON.stringify(speak_setting));\n    return new Promise((resolve, reject) => {\n      var _speak_setting$member, _speak_setting$member2;\n      const baseReq = _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].getBaseReq();\n      const {\n        what_id,\n        puc_id\n      } = (0,_common_utils__WEBPACK_IMPORTED_MODULE_0__.unPackGuid)(speak_setting.conference_basedata_id);\n      const memberInfo = (0,_common_utils__WEBPACK_IMPORTED_MODULE_0__.unPackGuid)(speak_setting === null || speak_setting === void 0 ? void 0 : (_speak_setting$member = speak_setting.member_setting) === null || _speak_setting$member === void 0 ? void 0 : _speak_setting$member.member_basedata_id);\n      baseReq.call_id = speak_setting.conference_call_id;\n      baseReq.cmd_name = \'cc_member_speak_set\';\n      baseReq.cmd_guid = speak_setting.conference_call_id;\n      baseReq.number = what_id;\n      baseReq.number_type = 11;\n      baseReq.forbid = speak_setting !== null && speak_setting !== void 0 && (_speak_setting$member2 = speak_setting.member_setting) !== null && _speak_setting$member2 !== void 0 && _speak_setting$member2.forbid ? 1 : 0;\n      baseReq.conference = {\n        puc_id,\n        number: what_id,\n        // 会议号码\n        system_id: "000",\n        number_type: 11\n      };\n      baseReq.member = {\n        puc_id: memberInfo.puc_id,\n        number: memberInfo.what_id,\n        system_id: memberInfo.system_id,\n        number_type: memberInfo.number_type\n      };\n      _protocol_http__WEBPACK_IMPORTED_MODULE_3__["default"].postSync(baseReq).then(resp => {\n        _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].debug("conferenceMemberSpeakSet", JSON.stringify(resp));\n        /**\n         * @type {SpeakSettingResult}\n         */\n        const speakSettingResult = {\n          forbid: resp.forbid,\n          result: resp.result\n        };\n        resolve(speakSettingResult);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  /**环境监视切换摄像头切换摄像头变更\n   * @param {object} data \n   * @param {string} data.call_id \n   * @param {number} data.target_camera  0为后置，1为前置\n   */\n  changeCamera(data) {\n    _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].debug("changeCamera", JSON.stringify(data));\n    return new Promise((resolve, reject) => {\n      const session = this.getSession(data.call_id);\n      // 没找到这个呼叫，直接返回吧\n      if (!session) {\n        return resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.CALL_NOT_EXIT\n        });\n      }\n      const param = {\n        cmd_name: \'system_ctrl_msg\',\n        sub_cmd_name: \'change_camera\',\n        call_id: session.call_id,\n        cmd_guid: (0,_common_utils__WEBPACK_IMPORTED_MODULE_0__.guid)(),\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].user.realm,\n        system_id: session.callee.system_id,\n        target_camera: data.target_camera\n      };\n      _protocol_http__WEBPACK_IMPORTED_MODULE_3__["default"].postSync(param).then(resp => {\n        _common_log__WEBPACK_IMPORTED_MODULE_2__["default"].debug("changeCamera", JSON.stringify(resp));\n        const changeResult = {\n          result: resp.result || resp.common.result,\n          call_id: param.call_id\n        };\n        resolve(changeResult);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n  getCallStream(call_id) {\n    const session = this.getSession(call_id);\n    return session.mediaRTC.localStream2;\n  }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new Call());\n\n//# sourceURL=webpack://lemon/./lemon/modules/call.js?'
          );

          /***/
        },

      /***/ "./lemon/modules/channel.js":
        /*!**********************************!*\
  !*** ./lemon/modules/channel.js ***!
  \**********************************/
        /***/ (
          __unused_webpack_module,
          __webpack_exports__,
          __webpack_require__
        ) => {
          "use strict";
          eval(
            '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _common_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/utils */ "./lemon/common/utils.js");\n/* harmony import */ var _common_log__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/log */ "./lemon/common/log.js");\n/* harmony import */ var _protocol_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../protocol/http */ "./lemon/protocol/http.js");\n/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./common */ "./lemon/modules/common.js");\n/* harmony import */ var _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../public/baseRequest */ "./lemon/public/baseRequest.js");\n/* harmony import */ var _baseData__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./baseData */ "./lemon/modules/baseData.js");\n\n\n\n\n\n\n\n/* 根据系统id获取基站列表 */\nconst CMD_CM_TSCINFO_LIST_REQ = \'cm_tscinfo_list_req\';\n\n/* 订阅基站信道信息 */\nconst CMD_CM_CHANNEL_LIST_SUB = \'cm_channel_list_sub\';\n\n/* 取消订阅基站信道信息 */\nconst CMD_CM_CHANNEL_LIST_STOP_SUB = \'cm_channel_list_stop_sub\';\n\n/* 订阅异常 */\nconst SUBSCRIBE_ERROR = \'300\';\n\n/* 取消订阅异常 */\nconst UNSUBSCRIBE_ERROR = \'301\';\nclass channel {\n  constructor() {\n    /* 刷新基站下信道信息 */\n    this.refreshChannelMap = new Map();\n\n    /* 更新基站下信道信息(不包含删除, 删除时会触发全部刷新) */\n    this.updateChannelMap = new Map();\n\n    /* 刷新系统下基站信息 */\n    this.refreshStationMap = new Map();\n\n    /* 更新系统下基站信息 */\n    this.updateStationMap = new Map();\n\n    /* 更新信道话权信息 */\n    this.updateChannelSpeakerMap = new Map();\n  }\n\n  /**\n   * 回调处理通用逻辑\n   * @param func\n   * @param param\n   * @private\n   */\n  _safeOnCallback(func, param) {\n    try {\n      func(param);\n    } catch (error) {\n      _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].error(error);\n    }\n  }\n\n  /**\n   * 获取支持基站信道的系统列表\n   */\n  getStationSystemList() {\n    let list = [];\n    for (let system of _baseData__WEBPACK_IMPORTED_MODULE_5__["default"].systemMap.values()) {\n      if (system.system_type === 2 || system.system_type === 3) {\n        list.push({\n          system_id: system.system_id,\n          system_alias: system.system_alias\n        });\n      }\n    }\n    return list;\n  }\n\n  /**\n   * 获取指定系统下的基站列表\n   * @param system_id 系统id\n   * @return {Promise<unknown>}\n   */\n  getStationListBySystemId(system_id) {\n    let param = {\n      cmd_guid: _common__WEBPACK_IMPORTED_MODULE_3__["default"].guid(),\n      cmd_name: CMD_CM_TSCINFO_LIST_REQ,\n      sub_cmd_name: CMD_CM_TSCINFO_LIST_REQ,\n      product_name: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.product_name,\n      version: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.version,\n      puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].getBaseReq().user_puc_id,\n      user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.user_id,\n      realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.realm,\n      system_id: system_id\n    };\n    let list = [];\n    return new Promise((resolve, reject) => {\n      _protocol_http__WEBPACK_IMPORTED_MODULE_2__["default"].postSync(param).then(resp => {\n        if (resp.tscinfo_list) {\n          resp.tscinfo_list.forEach(info => {\n            let station = {\n              is_sub: info.is_sub,\n              station_alias: info.tsc_alias,\n              station_id: info.tsc_id,\n              station_state: info.tsc_state\n            };\n            list.push(station);\n          });\n          resolve(list);\n        }\n        resolve(list);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  /**\n   * 订阅基站下信道信息\n   * @param system_id 系统id\n   * @param station_id 基站id\n   */\n  subscribeStation(system_id, station_id) {\n    const param = {\n      cmd_guid: _common__WEBPACK_IMPORTED_MODULE_3__["default"].guid(),\n      cmd_name: CMD_CM_CHANNEL_LIST_SUB,\n      sub_cmd_name: CMD_CM_CHANNEL_LIST_SUB,\n      product_name: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.product_name,\n      version: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.version,\n      puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].getBaseReq().user_puc_id,\n      user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.user_id,\n      realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.realm,\n      system_id: system_id,\n      tsc_id: station_id\n    };\n    return new Promise((resolve, reject) => {\n      _protocol_http__WEBPACK_IMPORTED_MODULE_2__["default"].postSync(param).then(resp => {\n        resolve({\n          error_code: resp.result,\n          error_msg: \'\'\n        });\n      }).catch(err => {\n        reject({\n          error_code: SUBSCRIBE_ERROR,\n          error_msg: err\n        });\n      });\n    });\n  }\n\n  /**\n   * 订阅基站下信道信息\n   * @param system_id 系统id\n   * @param station_id 基站id\n   */\n  unsubscribeStation(system_id, station_id) {\n    const param = {\n      cmd_guid: _common__WEBPACK_IMPORTED_MODULE_3__["default"].guid(),\n      cmd_name: CMD_CM_CHANNEL_LIST_STOP_SUB,\n      sub_cmd_name: CMD_CM_CHANNEL_LIST_STOP_SUB,\n      product_name: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.product_name,\n      version: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.version,\n      puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].getBaseReq().user_puc_id,\n      user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.user_id,\n      realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.realm,\n      system_id: system_id,\n      tsc_id: station_id\n    };\n    return new Promise((resolve, reject) => {\n      _protocol_http__WEBPACK_IMPORTED_MODULE_2__["default"].postSync(param).then(resp => {\n        resolve({\n          error_code: resp.result,\n          error_msg: \'\'\n        });\n      }).catch(err => {\n        reject({\n          error_code: UNSUBSCRIBE_ERROR,\n          error_msg: err\n        });\n      });\n    });\n  }\n\n  /**\n   * 订阅刷新基站下信道\n   * @param callback\n   * @returns {string|boolean}\n   */\n  addRefreshChannelListener(callback) {\n    if (!callback) {\n      _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].error(\'SDK channel addRefreshChannelListener error.\');\n      return false;\n    }\n    const callbackId = _common__WEBPACK_IMPORTED_MODULE_3__["default"].guid();\n    this.refreshChannelMap.set(callbackId, callback);\n    return callbackId;\n  }\n\n  /**\n   * 刷新基站下全部信道信息回调\n   * @param data\n   */\n  onRefreshChannelEvent(data) {\n    this.refreshChannelMap.forEach(func => {\n      let info = {\n        system_id: data.system_id,\n        station_id: data.tsc_id,\n        channel_list: data.chinfo_list || []\n      };\n      this._safeOnCallback(func, info);\n    });\n  }\n\n  /**\n   * 删除refreshChannel订阅\n   * @param callbackId 标识符\n   */\n  removeRefreshChannelListener(callbackId) {\n    if (this.refreshChannelMap.has(callbackId)) {\n      this.refreshChannelMap.delete(callbackId);\n    }\n  }\n\n  /**\n   * 订阅更新基站下信道\n   * @param callback\n   * @returns {string|boolean}\n   */\n  addUpdateChannelListener(callback) {\n    if (!callback) {\n      _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].error(\'SDK channel addUpdateChannelListener error.\');\n      return false;\n    }\n    const callbackId = _common__WEBPACK_IMPORTED_MODULE_3__["default"].guid();\n    this.updateChannelMap.set(callbackId, callback);\n    return callbackId;\n  }\n\n  /**\n   * 更新基站下信道信息回调\n   * @desc 不包含删除信息, 删除信道会触发全部刷新事件\n   * @param data\n   */\n  onUpdateChannelEvent(data) {\n    this.updateChannelMap.forEach(func => {\n      this._safeOnCallback(func, data);\n    });\n  }\n\n  /**\n   * 删除updateChannel订阅\n   * @param callbackId 标识符\n   */\n  removeUpdateChannelListener(callbackId) {\n    if (this.updateChannelMap.has(callbackId)) {\n      this.updateChannelMap.delete(callbackId);\n    }\n  }\n\n  /**\n   * 订阅刷新基站信息\n   * @param callback\n   * @returns {string|boolean}\n   */\n  addRefreshStationListener(callback) {\n    if (!callback) {\n      _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].error(\'SDK channel addRefreshStationListener error.\');\n      return false;\n    }\n    const callbackId = _common__WEBPACK_IMPORTED_MODULE_3__["default"].guid();\n    this.refreshStationMap.set(callbackId, callback);\n    return callbackId;\n  }\n\n  /**\n   * 刷新基站信息回调\n   * @param data\n   */\n  onRefreshStationEvent(data) {\n    this.refreshStationMap.forEach(func => {\n      this._safeOnCallback(func, data);\n    });\n  }\n\n  /**\n   * 删除refreshStation订阅\n   * @param callbackId 标识符\n   */\n  removeRefreshStationListener(callbackId) {\n    if (this.refreshStationMap.has(callbackId)) {\n      this.refreshStationMap.delete(callbackId);\n    }\n  }\n\n  /**\n   * 订阅更新系统下基站信息\n   * @param callback\n   * @returns {string|boolean}\n   */\n  addUpdateStationListener(callback) {\n    if (!callback) {\n      _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].error(\'SDK channel addUpdateStationListener error.\');\n      return false;\n    }\n    const callbackId = _common__WEBPACK_IMPORTED_MODULE_3__["default"].guid();\n    this.updateStationMap.set(callbackId, callback);\n    return callbackId;\n  }\n\n  /**\n   * 更新系统下基站信息回调\n   * @param data\n   */\n  onUpdateStationEvent(data) {\n    this.updateStationMap.forEach(func => {\n      this._safeOnCallback(func, data);\n    });\n  }\n\n  /**\n   * 删除updateStation订阅\n   * @param callbackId 标识符\n   */\n  removeUpdateStationListener(callbackId) {\n    if (this.updateStationMap.has(callbackId)) {\n      this.updateStationMap.delete(callbackId);\n    }\n  }\n\n  /**\n   * 订阅更新信道话权信息\n   * @param callback\n   * @returns {string|boolean}\n   */\n  addUpdateChannelSpeakerListener(callback) {\n    if (!callback) {\n      _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].error(\'SDK channel addUpdateChannelSpeakerListener error.\');\n      return false;\n    }\n    const callbackId = _common__WEBPACK_IMPORTED_MODULE_3__["default"].guid();\n    this.updateChannelSpeakerMap.set(callbackId, callback);\n    return callbackId;\n  }\n\n  /**\n   * 更新信道话权信息回调\n   * @param data\n   */\n  onUpdateChannelSpeakerEvent(data) {\n    this.updateChannelSpeakerMap.forEach(func => {\n      this._safeOnCallback(func, data);\n    });\n  }\n\n  /**\n   * 删除updateChannelSpeaker订阅\n   * @param callbackId 标识符\n   */\n  removeUpdateChannelSpeakerListener(callbackId) {\n    if (this.updateChannelSpeakerMap.has(callbackId)) {\n      this.updateChannelSpeakerMap.delete(callbackId);\n    }\n  }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new channel());\n\n//# sourceURL=webpack://lemon/./lemon/modules/channel.js?'
          );

          /***/
        },

      /***/ "./lemon/modules/common.js":
        /*!*********************************!*\
  !*** ./lemon/modules/common.js ***!
  \*********************************/
        /***/ (
          __unused_webpack_module,
          __webpack_exports__,
          __webpack_require__
        ) => {
          "use strict";
          eval(
            '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _common_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/utils */ "./lemon/common/utils.js");\n/* harmony import */ var _common_log__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/log */ "./lemon/common/log.js");\n\n\nclass Common {\n  constructor() {\n    /* 话权通知事件回调列表 */\n    this.onErrorCodes = new Map();\n  }\n\n  /** 回调处理通用逻辑 */\n  _safeOnCallback(func, param) {\n    try {\n      func(param);\n    } catch (error) {\n      _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].error(error);\n    }\n  }\n\n  /** 添加话权通知回调 */\n  addErrorCodeNotify(callback) {\n    if (!callback) {\n      _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].error(\'common - 回调 - 错误码通知回调添加失败，事件回调函数为空！\');\n      return false;\n    }\n    const callbackId = (0,_common_utils__WEBPACK_IMPORTED_MODULE_0__.guid)();\n    this.onErrorCodes.set(callbackId, callback);\n    return callbackId;\n  }\n\n  /** 触发话权通知回调 */\n  onErrorCodeNotify(grantInfo) {\n    _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].info(\'common - 回调 - 错误码通知回调被触发\', JSON.stringify(grantInfo));\n    this.onErrorCodes.forEach(func => {\n      this._safeOnCallback(func, grantInfo);\n    });\n  }\n\n  /** 根据callbackId移除话权通知回调 */\n  removeErrorCodeNotify(callbackId) {\n    if (this.onErrorCodes.has(callbackId)) {\n      this.onErrorCodes.delete(callbackId);\n      _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].info(\'common - 回调 - 移除错误码通知回调成功，callbackId = \', callbackId);\n      return;\n    }\n    _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].error(\'common - 回调 - 需要移除的错误码通知回调未找到！\');\n  }\n  /**\n  * 生成guid(写在这里主要是puc有用common调用guid，)\n  * @returns \n  */\n  guid() {\n    return \'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\'.replace(/[xy]/g, function (c) {\n      const r = Math.random() * 16 | 0;\n      const v = c === \'x\' ? r : r & 0x3 | 0x8;\n      return v.toString(16);\n    });\n  }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new Common());\n\n//# sourceURL=webpack://lemon/./lemon/modules/common.js?'
          );

          /***/
        },

      /***/ "./lemon/modules/floor.js":
        /*!********************************!*\
  !*** ./lemon/modules/floor.js ***!
  \********************************/
        /***/ (
          __unused_webpack_module,
          __webpack_exports__,
          __webpack_require__
        ) => {
          "use strict";
          eval(
            '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _common_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../common/utils */ "./lemon/common/utils.js");\n/* harmony import */ var _public_constant__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../public/constant */ "./lemon/public/constant.js");\n/* harmony import */ var _call__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./call */ "./lemon/modules/call.js");\n/* harmony import */ var _common_log__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/log */ "./lemon/common/log.js");\n/* harmony import */ var _protocol_http__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocol/http */ "./lemon/protocol/http.js");\n/* harmony import */ var _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../public/baseRequest */ "./lemon/public/baseRequest.js");\n\n\n\n\n\n\n\nclass Floor {\n  constructor() {\n    /* 话权通知事件回调列表 */\n    this.onGrants = new Map();\n  }\n\n  /** 回调处理通用逻辑 */\n  _safeOnCallback(func, param) {\n    try {\n      func(param);\n    } catch (error) {\n      _common_log__WEBPACK_IMPORTED_MODULE_3__["default"].error(error);\n    }\n  }\n\n  /** 添加话权通知回调 */\n  addGrantEvt(callback) {\n    if (!callback) {\n      _common_log__WEBPACK_IMPORTED_MODULE_3__["default"].error(\'floor - 回调 - 话权通知回调添加失败，事件回调函数为空！\');\n      return false;\n    }\n    const callbackId = (0,_common_utils__WEBPACK_IMPORTED_MODULE_0__.guid)();\n    this.onGrants.set(callbackId, callback);\n    return callbackId;\n  }\n\n  /** 触发话权通知回调 */\n  onGrantEvt(grantInfo) {\n    _common_log__WEBPACK_IMPORTED_MODULE_3__["default"].info(\'floor - 回调 - 话权通知回调被触发\', JSON.stringify(grantInfo));\n    this.onGrants.forEach(func => {\n      this._safeOnCallback(func, grantInfo);\n    });\n  }\n\n  /** 根据callbackId移除话权通知回调 */\n  removeGrantEvt(callbackId) {\n    if (this.onGrants.has(callbackId)) {\n      this.onGrants.delete(callbackId);\n      _common_log__WEBPACK_IMPORTED_MODULE_3__["default"].info(\'floor - 回调 - 移除话权通知回调成功，callbackId = \', callbackId);\n      return;\n    }\n    _common_log__WEBPACK_IMPORTED_MODULE_3__["default"].error(\'floor - 回调 - 需要移除的话权通知回调未找到！\');\n  }\n  applySpeak(applySpeakInfoInfo) {\n    const call_id = applySpeakInfoInfo.call_id;\n    _common_log__WEBPACK_IMPORTED_MODULE_3__["default"].info(\'floor - 话权申请 - 话权申请流程开始！\', call_id);\n    return new Promise((resolve, reject) => {\n      const session = _call__WEBPACK_IMPORTED_MODULE_2__["default"].getSession(call_id);\n      if (!session) {\n        _common_log__WEBPACK_IMPORTED_MODULE_3__["default"].error(\'floor - 话权申请 — 话权申请失败，无法找到对应的session！\', call_id);\n        // reject(\'申请话权时通过call_id:\' + call_id + \', 无法找到对应的会话session\');\n        resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.CALL_NOT_EXIT\n        });\n        return;\n      }\n      if (session.attribute.duplex_flag === 1) {\n        _common_log__WEBPACK_IMPORTED_MODULE_3__["default"].error(\'floor - 话权申请 - 全双工不允许申请话权！\', call_id);\n        // reject(\'全双工不允许申请话权!\');\n        resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.FLOOR_NO_ALLOW_APPLY\n        });\n        return;\n      }\n      let oldCallState = null;\n      if (session.status.callState === _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_STATUS.FREE || session.status.callState === _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_STATUS.TALKING) {\n        oldCallState = session.status.callState;\n        session.status.callState = _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_STATUS.DEMANDING;\n      } else {\n        _common_log__WEBPACK_IMPORTED_MODULE_3__["default"].error(\'floor - 话权申请 - 当前状态为:\' + session.status.callState + \',不允许获取话权\', call_id);\n        // reject(\'当前状态为:\' + session.status.callState + \',不允许获取话权\');\n        resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.FLOOR_STATUS_NO_APPLY\n        });\n        return;\n      }\n      const baseReq = _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].getBaseReq();\n      baseReq.puc_version = baseReq.version;\n      baseReq.cmd_name = \'cc_tx_demand\';\n      baseReq.call_id = session.call_id;\n      baseReq.cmd_guid = \'\';\n      baseReq.puc_id = session.callee.puc_id;\n      baseReq.system_id = session.callee.system_id;\n      baseReq.ptt_priority = 0;\n      _protocol_http__WEBPACK_IMPORTED_MODULE_4__["default"].callPost(baseReq).then(res => {\n        _common_log__WEBPACK_IMPORTED_MODULE_3__["default"].info(\'floor - 话权申请 - 话权申请请求成功:\', call_id);\n        const ret = res.result || 0;\n        resolve({\n          result: ret\n        });\n      }).catch(err => {\n        _common_log__WEBPACK_IMPORTED_MODULE_3__["default"].error(\'floor - 话权申请 - 话权申请请求失败:\', call_id, err);\n        /* 发送失败恢复状态 */\n        if (session.status.callState === _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_STATUS.CEASING || session.status.callState === _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_STATUS.DEMANDING) {\n          if (oldCallState) {\n            session.status.callState = oldCallState;\n          }\n        }\n        reject(err);\n      });\n    });\n  }\n  releaseSpeak(releaseSpeakInfo) {\n    const call_id = releaseSpeakInfo.call_id;\n    _common_log__WEBPACK_IMPORTED_MODULE_3__["default"].info(\'floor - 话权释放 - 话权释放流程开始！\', call_id);\n    return new Promise((resolve, reject) => {\n      const session = _call__WEBPACK_IMPORTED_MODULE_2__["default"].getSession(call_id);\n      if (!session) {\n        _common_log__WEBPACK_IMPORTED_MODULE_3__["default"].error(\'floor - 话权释放 - 话权释放失败，无法找到对应的session！\', call_id);\n        // reject(\'无法根据call_id: \' + call_id + " 找到对应的会话Session");\n        resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.CALL_NOT_EXIT\n        });\n        return;\n      }\n      // 1. 检查释放话权的合法性\n      if (session.attribute.duplex_flag === 1) {\n        _common_log__WEBPACK_IMPORTED_MODULE_3__["default"].error(\'floor - 话权释放 - 全双工不允许释放话权！\', call_id);\n        // reject(\'全双工通话不允许释放话权！\')\n        resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.FLOOR_NO_ALLOW_RELEASE\n        });\n        return;\n      }\n      let oldCallState = null;\n      if (session.status.callState === _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_STATUS.TX) {\n        oldCallState = session.status.callState;\n        session.status.callState = _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_STATUS.CEASING;\n      } else {\n        _common_log__WEBPACK_IMPORTED_MODULE_3__["default"].error(\'floor - 话权释放 - 当前状态为:\' + session.status.callState + \',不允许释放话权\', call_id);\n        // reject(\'当前通话状态为: \' + session.status.callState + "，不允许释放话权");\n        resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.FLOOR_STATUS_NO_RELEASE\n        });\n        return;\n      }\n      const baseReq = _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].getBaseReq();\n      baseReq.puc_version = baseReq.version;\n      baseReq.cmd_name = \'cc_tx_cease\';\n      baseReq.cmd_guid = \'\';\n      baseReq.call_id = session.call_id;\n      baseReq.puc_id = session.callee.puc_id;\n      baseReq.system_id = session.callee.system_id;\n      _protocol_http__WEBPACK_IMPORTED_MODULE_4__["default"].callPost(baseReq).then(res => {\n        _common_log__WEBPACK_IMPORTED_MODULE_3__["default"].info(\'floor - 话权释放 - 话权释放请求成功:\', call_id);\n        const ret = res.result || 0;\n        resolve({\n          result: ret\n        });\n      }).catch(err => {\n        _common_log__WEBPACK_IMPORTED_MODULE_3__["default"].error(\'floor - 话权释放 - 话权释放请求失败:\', call_id, err);\n        // 发送失败恢复状态\n        if (session.status.callState === _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_STATUS.CEASING || session.status.callState === _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_STATUS.DEMANDING) {\n          if (oldCallState) {\n            session.status.callState = oldCallState;\n          }\n        }\n        reject(err);\n      });\n    });\n  }\n  forceApplySpeak(forceApplySpeakInfo) {\n    const call_id = forceApplySpeakInfo.call_id;\n    _common_log__WEBPACK_IMPORTED_MODULE_3__["default"].info(\'floor - 强插 - 强插流程开始！\', call_id);\n    return new Promise((resolve, reject) => {\n      const session = _call__WEBPACK_IMPORTED_MODULE_2__["default"].getSession(call_id);\n      if (!session) {\n        _common_log__WEBPACK_IMPORTED_MODULE_3__["default"].error(\'force floor - 强插 - 强插session不存在！\', call_id);\n        // reject(\'强插时通过call_id:\' + call_id + \', 无法找到对应的会话session\')\n        resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.CALL_NOT_EXIT\n        });\n        return;\n      }\n      _common_log__WEBPACK_IMPORTED_MODULE_3__["default"].debug("forceApplySpeak", JSON.stringify(session));\n      if (session.attribute.call_type === 0 || session.attribute.call_type === 11) {\n        _common_log__WEBPACK_IMPORTED_MODULE_3__["default"].error("单呼不允许强插话权, single call no allow forceApplySpeak");\n        resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.FORCE_FLOOR_NO_ALLOW_APPLY\n        });\n        return;\n      }\n      if (session.attribute.call_type === 19) {\n        _common_log__WEBPACK_IMPORTED_MODULE_3__["default"].error("视频上拉不允许强插话权, pull call no allow forceApplySpeak");\n        resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.FORCE_FLOOR_NO_ALLOW_APPLY\n        });\n        return;\n      }\n      if (session.attribute.duplex_flag === 1) {\n        _common_log__WEBPACK_IMPORTED_MODULE_3__["default"].error(\'floor - 强插 - 全双工不允许强插！\', call_id);\n        // reject(\'强插：全双工不允许申请话权!\');\n        resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.FORCE_FLOOR_NO_ALLOW_APPLY\n        });\n        return;\n      }\n      let oldCallState = null;\n      if (session.status.callState === _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_STATUS.TALKING || session.status.callState === _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_STATUS.FREE) {\n        oldCallState = session.status.callState;\n        session.status.callState = _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_STATUS.DEMANDING;\n      } else {\n        _common_log__WEBPACK_IMPORTED_MODULE_3__["default"].error(\'floor - 强插 - 当前状态为:\' + session.status.callState + \',不允许强插\', call_id);\n        // reject(\'当前状态为:\' + session.status.callState + \',不允许获取话权\')\n        resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.FLOOR_STATUS_NO_APPLY\n        });\n        return;\n      }\n      const baseReq = _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].getBaseReq();\n      baseReq.call_id = session.call_id;\n      baseReq.ptt_priority = 3;\n      baseReq.puc_version = baseReq.version;\n      baseReq.cmd_name = \'cc_tx_demand\';\n      baseReq.cmd_guid = \'\';\n      baseReq.puc_id = session.callee.puc_id;\n      baseReq.system_id = session.callee.system_id;\n\n      /*\n          以下属性（alias、speaker）没有的时候话权也可以申请成功\n          但是话权返回特别慢\n          问了服务端一大圈人\n          没人知道什么原因\n          所以这里就暂时添加上了\n          爱咋咋地吧\n      */\n      baseReq.alias = baseReq.dispatcher_name;\n      baseReq.speaker = {\n        onlineField: null,\n        number: baseReq.user_id,\n        number_type: baseReq.number_type,\n        puc_id: baseReq.puc_id,\n        system_id: baseReq.system_id,\n        OS: null,\n        number_name: null,\n        online: null,\n        time_slot: null\n      };\n      _protocol_http__WEBPACK_IMPORTED_MODULE_4__["default"].callPost(baseReq).then(res => {\n        _common_log__WEBPACK_IMPORTED_MODULE_3__["default"].info(\'floor - 强插 - 强插请求发送成功！\', call_id);\n        const ret = res.result || 0;\n        resolve({\n          result: ret\n        });\n      }).catch(err => {\n        _common_log__WEBPACK_IMPORTED_MODULE_3__["default"].error(\'floor - 强插 - 强插请求发送失败:\', call_id, err);\n        if (session.status.callState === _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_STATUS.CEASING || session.status.callState === _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_STATUS.DEMANDING) {\n          if (oldCallState) {\n            session.status.callState = oldCallState;\n          }\n        }\n        reject(err);\n      });\n    });\n  }\n  forceHangupCall(forceHangupCallInfo) {\n    const call_id = forceHangupCallInfo.call_id;\n    _common_log__WEBPACK_IMPORTED_MODULE_3__["default"].info(\'floor - 强拆 - 强拆流程开始！\', call_id);\n    return new Promise((resolve, reject) => {\n      const session = _call__WEBPACK_IMPORTED_MODULE_2__["default"].getSession(call_id);\n      if (!session) {\n        _common_log__WEBPACK_IMPORTED_MODULE_3__["default"].error(\'floor - 强拆 - 强拆session不存在！\', call_id);\n        // reject(\'根据入参call_id：\' + call_id + \',无法找到对应的会话session\');\n        resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_1__.ERROR_CODE.CALL_NOT_EXIT\n        });\n        return;\n      }\n      const baseReq = _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].getBaseReq();\n      baseReq.cmd_name = \'cc_force_disconnect\';\n      baseReq.cmd_guid = \'\';\n      baseReq.call_id = session.call_id;\n      baseReq.puc_id = session.callee.puc_id;\n      baseReq.system_id = session.callee.system_id;\n      baseReq.puc_version = baseReq.version;\n      baseReq.call_mode = session.attribute.call_mode;\n      _protocol_http__WEBPACK_IMPORTED_MODULE_4__["default"].callPost(baseReq).then(res => {\n        _common_log__WEBPACK_IMPORTED_MODULE_3__["default"].info(\'floor - 强拆 - 强拆请求发送成功！\', call_id);\n        // resolve(res);\n        const ret = res.result || 0;\n        resolve({\n          result: ret\n        });\n      }).catch(err => {\n        _common_log__WEBPACK_IMPORTED_MODULE_3__["default"].error(\'floor - 强拆 - 强拆请求发送失败:\', call_id, err);\n        reject(err);\n      });\n    });\n  }\n\n  /** 话权变更通知 */\n  receiveGranted(grantedInfo) {\n    var _grantedInfo$multi_al;\n    _common_log__WEBPACK_IMPORTED_MODULE_3__["default"].debug("receiveGranted", JSON.stringify(grantedInfo));\n    const call_id = grantedInfo.call_id;\n    _common_log__WEBPACK_IMPORTED_MODULE_3__["default"].info(\'floor - 话权通知 - 收到话权消息！\', call_id);\n    const session = _call__WEBPACK_IMPORTED_MODULE_2__["default"].getSession(call_id) || {};\n    if (!session.status) session.status = {};\n    if (grantedInfo.grant_status === _public_constant__WEBPACK_IMPORTED_MODULE_1__.GRANT_STATUS.GRANTED) {\n      _common_log__WEBPACK_IMPORTED_MODULE_3__["default"].info(\'floor - 话权通知 - 收到当前调度话权\', call_id);\n      session.status.speaker = {\n        number: grantedInfo.speaker_number,\n        alias: grantedInfo.multi_alias\n      };\n      session.status.callState = _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_STATUS.TX;\n    } else if (grantedInfo.grant_status === _public_constant__WEBPACK_IMPORTED_MODULE_1__.GRANT_STATUS.GRANT_TO_ANOTHER_USER) {\n      _common_log__WEBPACK_IMPORTED_MODULE_3__["default"].info(\'floor - 话权通知 - 收到他人话权\', call_id);\n      session.status.speaker = {\n        number: grantedInfo.speaker_number,\n        alias: grantedInfo.multi_alias\n      };\n      session.status.callState = _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_STATUS.TALKING;\n    } else {\n      _common_log__WEBPACK_IMPORTED_MODULE_3__["default"].debug(\'floor - 话权通知 - 收到话权空闲\', call_id);\n      /* 话权空闲 */\n      session.status.callState = _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_STATUS.FREE;\n    }\n    const speakerArray = [];\n    (_grantedInfo$multi_al = grantedInfo.multi_alias) === null || _grantedInfo$multi_al === void 0 ? void 0 : _grantedInfo$multi_al.forEach((item, index) => {\n      speakerArray.push({\n        number: grantedInfo.multi_speaker ? grantedInfo.multi_speaker[index] : grantedInfo.speaker_number,\n        alias: item\n      });\n    });\n    session.status.speaker = {\n      number: grantedInfo.speaker_number,\n      alias: grantedInfo.multi_alias\n    };\n    // TODO 多话权流程后续梳理\n    // session.status.multi_floor_flag = grantedInfo.multi_floor_flag;\n    // session.status.multi_speaker = grantedInfo.multi_speaker;\n    // session.status.multi_alias = grantedInfo.multi_alias;\n\n    /* 触发状态变更回调 */\n    this.onGrantEvt({\n      result: 0,\n      call_id: call_id,\n      grant_status: session.status.callState,\n      speaker: session.status.speaker,\n      speaker: speakerArray\n    });\n  }\n\n  /** 话权拒绝通知 */\n  receiveTxDeny(denyInfo) {\n    var _denyInfo$RejectCause;\n    _common_log__WEBPACK_IMPORTED_MODULE_3__["default"].debug("receiveTxDeny", JSON.stringify(denyInfo));\n    const call_id = denyInfo.call_id;\n    _common_log__WEBPACK_IMPORTED_MODULE_3__["default"].debug(\'floor - 话权拒绝 - 收到话权拒绝消息！\', call_id);\n    const session = _call__WEBPACK_IMPORTED_MODULE_2__["default"].getSession(call_id);\n    if (denyInfo.flrusrty === _public_constant__WEBPACK_IMPORTED_MODULE_1__.GRANT_STATUS.GRANTED) {\n      _common_log__WEBPACK_IMPORTED_MODULE_3__["default"].debug(\'floor - 话权拒绝 - 收到当前调度话权！\', call_id);\n      session.status.callState = _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_STATUS.TX;\n    } else if (denyInfo.flrusrty === _public_constant__WEBPACK_IMPORTED_MODULE_1__.GRANT_STATUS.GRANT_TO_ANOTHER_USER) {\n      _common_log__WEBPACK_IMPORTED_MODULE_3__["default"].debug(\'floor - 话权拒绝 - 收到他人话权！\', call_id);\n      session.status.callState = _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_STATUS.TALKING;\n    } else {\n      _common_log__WEBPACK_IMPORTED_MODULE_3__["default"].debug(\'floor - 话权拒绝 - 收到话权空闲！\', call_id);\n      session.status.callState = _public_constant__WEBPACK_IMPORTED_MODULE_1__.CALL_STATUS.FREE;\n    }\n    /* 触发状态变更回调 */\n    this.onGrantEvt({\n      result: ((_denyInfo$RejectCause = denyInfo.RejectCause) === null || _denyInfo$RejectCause === void 0 ? void 0 : _denyInfo$RejectCause.CauseEnum) || 0,\n      call_id: call_id,\n      grant_status: session.status.callState,\n      speaker: session.status.speaker\n    });\n  }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new Floor());\n\n//# sourceURL=webpack://lemon/./lemon/modules/floor.js?'
          );

          /***/
        },

      /***/ "./lemon/modules/gis.js":
        /*!******************************!*\
  !*** ./lemon/modules/gis.js ***!
  \******************************/
        /***/ (
          __unused_webpack_module,
          __webpack_exports__,
          __webpack_require__
        ) => {
          "use strict";
          eval(
            '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _common_log__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/log */ "./lemon/common/log.js");\n/* harmony import */ var _protocol_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../protocol/http */ "./lemon/protocol/http.js");\n/* harmony import */ var _public_constant__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../public/constant */ "./lemon/public/constant.js");\n/* harmony import */ var _common_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/utils */ "./lemon/common/utils.js");\n/* harmony import */ var _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../public/baseRequest */ "./lemon/public/baseRequest.js");\n/* harmony import */ var _protocol_websocket__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../protocol/websocket */ "./lemon/protocol/websocket.js");\n/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./common */ "./lemon/modules/common.js");\n/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! dayjs */ "./node_modules/dayjs/dayjs.min.js");\n/* harmony import */ var dayjs__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(dayjs__WEBPACK_IMPORTED_MODULE_7__);\n\n\n\n\n\n\n\n\n\n/**\n * GPS数据 上报事件\n * @const\n * @type {string}\n */\nvar CMD_GET_GPS_REPORT = \'get_gps_report_evt\';\n/**\n * 订阅状态 上报事件\n * @const\n * @type {string}\n */\nvar CMD_GET_CYCLE_REPORT_STATE = \'get_cycle_report_state_evt\';\n/**\n * 该设备全部取消订阅通知 上报事件\n * @const\n * @type {string}\n */\nvar CMD_ALL_STOP_GPS_INFO_REPORT_SYN = \'gps_stop_gps_info_report_syn\';\n/**\n * 某调度员取消订阅通知 上报事件\n * @const\n * @type {string}\n */\nvar CMD_GPS_CANCEL_DISPATCHER_SUB_SYN = \'gps_cancel_dispatcher_sub_syn\';\n/**\n * 历史轨迹查询cmd\n * @const\n * @type {string}\n */\nvar CMD_GPS_RECORD_QUERY = \'gps_record_query\';\nconst DATA_FORMAT = \'YYYY-MM-DDTHH:mm:ss[Z]\';\n/**\n * 通用返回对象\n * @typedef {object} RetReslut\n * @property  {number} result 响应码，0成功，其他失败\n */\n\n/**\n * GPS上报数据\n * @typedef {object} GpsData\n * @property  {string} basedata_id 能根据这个信息定位到设备、组、群组等identifier\n * @property  {string} long_we  经度标识 取值：E：东经 W：西经\n * @property  {number} longitude 经度\n * @property  {string} lat_ns 纬度标识 取值：S：南纬 N：北纬\n * @property  {number} latitude 纬度\n * @property  {number} speed 速度 单位是海里/小时\n * @property  {number} direction 方向(360度)\n * @property  {string} receive_time  接收时间(UTC 时间)\n * @property  {string} electricity  电量等级      \n * @property  {number} current_interval_time  当前的上拉周期（秒）\n * @property  {string} device_alias  上报设备名称\n * @property  {string} device_staff_name  上报设备实名制名称 (PDT 系统才有)\n * @property  {string} device_number  上报设备号码\n */\n\n/**\n * GPS上报对象\n * @typedef {object} GpsReportInfo\n * @property  {string} user_id 用户账号\n * @property  {Array.<GpsData>} gps_list 上报GPS数据列表 \n */\n\n/**\n * 单次上拉的 GPS信息对象\n * @typedef {object} GpsInfo\n * @property  {number} result 响应码，0成功，其他失败\n * @property  {string} user_id 用户账号\n * @property  {GpsData} gps_data GPS数据\n */\n\n/**\n * 订阅参数对象\n * @typedef {object} Subscriber\n * @property  {string} basedata_id  基础数据对象id，必填项\n * @property  {number} interval_time    订阅间隔时间(s)，必填项\n * @property  {number} distance  订阅距离，选填项 default  0\n * @property  {number} speed  订阅速度，选填项 default  0\n * @property  {number} sub_type  订阅类型，选填。 1：标识只启用按距离上传  2： 标识只启用按时间上传   3：标识启用按时间与距离上传  4： 标识启用按时间或距离上传\n */\n\n/**\n * 取消订阅参数对象\n * @typedef {object} UnSubscriber\n * @property  {string} basedata_id  基础数据对象id\n */\n\n/**\n * 历史轨迹查询参数对象\n * @typedef {object} RecordGpsParams\n * @property  {string} basedata_id  基础数据对象id，必填项\n * @property  {string} start_time   查询开始时间 必填项 ,时间格式参考示例，UTC时间 "2021-05-13T09:45:41Z"\n * @property  {string} end_time  查询结束时间 必填项 ，时间格式 如 "2021-05-13T09:45:41Z"\n * @property  {number} max_number  返回最多的轨迹点数，选填项 不能超过 10000. 取值范围 1000-10000。如果不填就默认10000个点。\n */\n\n/**\n * 轨迹点信息 对象\n * @typedef {object} GpsRecord\n * @property  {string} long_we  经度标识 取值：E：东经 W：西经\n * @property  {number} longitude 经度\n * @property  {string} lat_ns 纬度标识 取值：S：南纬 N：北纬\n * @property  {number} latitude 纬度\n * @property  {number} speed 速度 单位是海里/小时\n * @property  {number} direction 方向\n * @property  {string} gps_datetime : GPS时间(UTC 时间)  \n * @property  {string} receive_time  接收时间(UTC 时间)\n */\n\n/**\n* 历史轨迹查询结果 对象\n* @typedef {object} GpsRecordResult  \n* @property  {number} result 响应码，0成功 其他是失败\n* @property  {boolean} exceeded_the_maximum   是否超出最大值的轨迹点数，超出最大值，只返回最大值的点数。\n* @property  {Array.<GpsRecord>} gps_record_list  轨迹点列表\n*/\n\n/**\n * 分页获取订阅列表数据参数结构\n * @typedef {object} SubDeviecesParams\n * @property  {number} page_index 当前页码 必填项\n * @property  {number} page_size 单页容量 必填项\n * @property  {string} filter_key  通过这个关键字去匹配设备号码  非必填项\n */\n\n/**\n* 分页获取订阅列表返回 对象\n* @typedef {object} SubDeviecesResult  \n* @property  {number} result 响应码，0成功 其他是失败\n* @property  {number} total_number  总的订阅数据\n* @property  {Array.<SubDevieceInfo>} sub_device_list  订阅设备列表\n*/\n\n/**\n* 订阅设备信息\n* @typedef {object} SubDevieceInfo \n* @property  {String} basedata_id  基础数据对象id，必填项\n* @property  {string} alias       被订阅设备名称\n* @property  {string} number       被订阅设备号码\n* @property  {string} staff_name  被订阅设备实名制名称 (PDT 系统才有)\n* @property  {number} actual_report_cycle  实际上报周期，当前上拉周期\n* @property  {number} min_cycle    允许最小订阅周期  \n*/\n\n/**\n * 获取订阅设备的订阅关系参数\n * @typedef {object} SubDeviceRelationParams  \n * @property  {string} basedata_id  基础数据对象id\n */\n\n/**\n * 获取订阅设备的订阅关系 返回结果\n * @typedef {object} SubDeviceRelationResult  \n * @property  {number} result   响应码，0成功 其他是失败\n * @property  {string} basedata_id  基础数据对象id\n * @property  {Array.<SubscriberRelation>} subscriber_list  订阅关系列表\n */\n\n/**\n * 订阅关系对象\n * @typedef {object} SubscriberRelation  \n * @property  {string} dispatcher_id  调度台id\n * @property  {number} interval_time  订阅周期\n */\n\n/**\n * 取消调度员订阅参数对象\n * @typedef {object} UnSubDispatcher\n * @property  {string} basedata_id  基础数据对象id\n */\n\n/**\n * 调度员取消订阅通知信息\n * @typedef {object} DispatcherCancelSubNofify\n * @property  {string} user_id  用户账号,被取消订阅的用户账号，一般是当前账号，因为只能收到自己被取消订阅的通知\n * @property  {string} realm  用户账号登录域名\n * @property  {string} handle_dispatcher   取消订阅操作的调度员\n * @property  {string} handle_time   取消订阅操作的时间\n */\n\n/**\n * 设备被取消订阅通知信息\n * @typedef {object} DeviceCancelSubInfo\n * @property  {string} number  设备号码\n * @property  {string} basedata_id  设备的basedata id \n * @property  {string} handle_dispatcher   取消订阅操作的调度员\n * @property  {string} handle_time   取消订阅操作的时间\n */\n/**\n * 设备被取消订阅通知信息\n * @typedef {object} DeviceCancelSubNofify\n * @property  {string} user_id  用户账号,被取消订阅的用户账号，一般是当前账号，因为只能收到自己被取消订阅的通知\n * @property  {string} realm  用户账号登录域名\n * @property  {Array.<DeviceCancelSubInfo>} cancel_sub_list   设备取消订阅列表\n */\n\n/**\n * 全网订阅参数\n * @typedef {object} WholeNetSubParams\n * @property  {number} sub_pull_mode   订阅拉取模式   0:禁止;1:全网上拉2:部分上拉\n * @property  {number} whole_net_sub_cycle  订阅拉取周期\n * @property  {number} recovery_time  恢复时间\n * @property  {number} min_sub_cycle  全网允许最小订阅周期\n */\n/**\n * 全网订阅参数结果\n * @typedef {object} WholeNetSubParamsResult\n * @property  {number} result   响应码，0成功 其他是失败\n * @property  {string} min_sub_cycle_setter   全网允许最小订阅周期设置者\n * @property  {WholeNetSubParams} whole_net_sub_params 全网订阅参数\n */\n\n/**\n * 取消调度员订阅参数对象\n * @typedef {object} Device\n * @property  {string} basedata_id  基础数据对象id\n */\n\n/**\n * 设置设备最小订阅周期 请求参数\n * @typedef {object} DeviceMinSubCycleParams\n * @property  {number} min_sub_cycle   终端允许最小订阅周期，该值必须必须大于或等于全网最小订阅周期\n * @property  {Array.<Device>} device_list  终端的basedata id 列表\n */\n\n/** GIS 相关 */\nclass Gis {\n  constructor() {\n    // 位置上报\n    this.gpsReportCbMap = new Map();\n    // 调度员取消订阅通知\n    this.dispatcherCancelSub = new Map();\n    // 设备被取消订阅通知\n    this.deviceCancelAllSub = new Map();\n    this._initEvents();\n  }\n\n  /** 回调处理通用逻辑 */\n  _safeOnCallback(func, param) {\n    if (!func) {\n      return;\n    }\n    try {\n      func(param);\n    } catch (error) {\n      _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].error(error);\n    }\n  }\n  _timeToUTC(chooseTime) {\n    const timeZoneOffset = new Date().getTimezoneOffset() / 60 * 3600 * 1000;\n    const chooseTimeDiff = new Date(chooseTime).getTime() + timeZoneOffset;\n    const chooseTimeISO = new Date(chooseTimeDiff).toISOString();\n    // 将秒后面的时间去掉\n    const chooseTimeTZ = `${chooseTimeISO.substring(0, chooseTimeISO.lastIndexOf(\'.\'))}Z`;\n    return chooseTimeTZ;\n  }\n  /**\n  * 发起GPS订阅（支持批量）  \n  *  @param {object} subscriberListParam  订阅列表\n  *  @param {Array.<Subscriber} subscriberListParam.subscriber_list  订阅列表\n  * @returns \n  */\n  startSubscribeGps(subscriberListParam) {\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug(\'subscriberList\', JSON.stringify(subscriberListParam));\n    return new Promise((resolve, reject) => {\n      if (!subscriberListParam.subscriber_list || subscriberListParam.subscriber_list.length === 0) {\n        // reject("subscriberList.length = 0");\n        //  经讨论 这种参数错误还是用 resolve 返回出去，不走reject。 reject 只有 网络请求走 catch 时才 用\n        resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_2__.ERROR_CODE.PARAM_INVALID\n        });\n        return;\n      }\n      const start_time = dayjs__WEBPACK_IMPORTED_MODULE_7___default()(new Date().getTime()).format(DATA_FORMAT);\n      const end_time = dayjs__WEBPACK_IMPORTED_MODULE_7___default()(new Date().getTime() + 3600000).format(DATA_FORMAT);\n      const subscriberinfoList = [];\n      // 如何判断传的参数是否正确。\n      subscriberListParam.subscriber_list.forEach(item => {\n        _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug(\'subscriberList item\', JSON.stringify(item));\n        // item.device_guid;\n        const ids = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(item.basedata_id);\n        const subcriber = {\n          puc_id: ids.puc_id,\n          system_id: ids.system_id,\n          // sap_type: null,\n          // sap_guid: common.guid(),\n          interval_time: Number(item.interval_time),\n          and_or_flag: 2,\n          distance: 0,\n          spd: 0,\n          target: {\n            number: ids.what_id,\n            number_type: Number(ids.number_type)\n          },\n          // start_time: "2023-07-8T6:10:12Z",\n          // end_time: "2023-07-8T15:50:12Z",\n          start_time: this._timeToUTC(start_time),\n          end_time: this._timeToUTC(end_time)\n        };\n        if (item !== null && item !== void 0 && item.distance) {\n          subcriber.distance = Number(item.distance);\n        }\n        if (item !== null && item !== void 0 && item.speed) {\n          subcriber.spd = Number(item.speed);\n        }\n        if (item !== null && item !== void 0 && item.sub_type) {\n          subcriber.and_or_flag = item.sub_type;\n        }\n        subscriberinfoList.push(subcriber);\n      });\n      const subReqParam = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.VERSION,\n        cmd_name: \'gps_batch_start_gps_info_report\',\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_6__["default"].guid(),\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.puc_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.realm,\n        // sub_cmd_name: \'gps_batch_start_gps_info_report\',\n        subscriberinfo_list: subscriberinfoList\n      };\n      _protocol_http__WEBPACK_IMPORTED_MODULE_1__["default"].postSync(subReqParam).then(resp => {\n        if (resp.result === 0) {\n          resolve({\n            result: 0\n          });\n        } else {\n          resolve({\n            result: resp.result\n          });\n        }\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  /**\n  * 取消对该设备（调用者的）订阅 （支持批量）,但是不影响其他人的订阅关系\n  * @param {Array.<UnSubscriber>} unSubscribeListParam \n  * @param {Array.<UnSubscriber>} unSubscribeListParam.cancel_subscribe_list \n  * @returns \n  */\n  stopSubscribeGps(unSubscribeListParam) {\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug(\'unSubscribe\', JSON.stringify(unSubscribeListParam));\n    return new Promise((resolve, reject) => {\n      if (!unSubscribeListParam || !unSubscribeListParam.cancel_subscribe_list || unSubscribeListParam.cancel_subscribe_list.length === 0) {\n        // reject("unSubscribeList.length = 0");\n        resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_2__.ERROR_CODE.PARAM_INVALID\n        });\n        return;\n      }\n      const unSubscriberinfoList = [];\n      unSubscribeListParam.cancel_subscribe_list.forEach(item => {\n        const record = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(item.basedata_id);\n        const unSubcriber = {\n          puc_id: record.puc_id,\n          system_id: record.system_id,\n          // sap_guid: common.guid(),\n          // sap_type: null,\n          target: {\n            number: record.what_id,\n            number_type: record.number_type\n          }\n        };\n        unSubscriberinfoList.push(unSubcriber);\n      });\n      const params = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.VERSION,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.realm,\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.puc_id,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_6__["default"].guid(),\n        cmd_name: \'gps_batch_stop_gps_info_report\',\n        unsubscriberinfo_list: unSubscriberinfoList\n      };\n      _protocol_http__WEBPACK_IMPORTED_MODULE_1__["default"].postSync(params).then(resp => {\n        if (resp.result === 0) {\n          resolve({\n            result: 0\n          });\n        } else {\n          resolve({\n            result: resp.result\n          });\n        }\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  /**\n  * 取消该设备的全部订阅,连同其他的人对该设备的订阅也将取消去掉 （支持批量）\n  * @param {object} unSubscribeListParam \n  * @param {Array.<UnSubscriber>} unSubscribeListParam.cancel_subscribe_list \n  * @returns \n  */\n  cancelDeviceAllGpsSub(unSubscribeListParam) {\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug(\'cancelDeviceAllSubGps\', JSON.stringify(unSubscribeListParam));\n    return new Promise((resolve, reject) => {\n      if (!unSubscribeListParam || !unSubscribeListParam.cancel_subscribe_list || unSubscribeListParam.cancel_subscribe_list.length === 0) {\n        // reject("unSubscribeList.length = 0");\n        resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_2__.ERROR_CODE.PARAM_INVALID\n        });\n        return;\n      }\n      const unSubscriberinfoList = [];\n      unSubscribeListParam.cancel_subscribe_list.forEach(item => {\n        const record = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(item.basedata_id);\n        const unSubcriber = {\n          puc_id: record.puc_id,\n          system_id: record.system_id,\n          number: record.what_id,\n          number_type: record.number_type\n        };\n        unSubscriberinfoList.push(unSubcriber);\n      });\n      const params = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.VERSION,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.realm,\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.puc_id,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_6__["default"].guid(),\n        cmd_name: \'gps_cancel_radio_sub_req\',\n        target_list: unSubscriberinfoList\n      };\n      _protocol_http__WEBPACK_IMPORTED_MODULE_1__["default"].postSync(params).then(resp => {\n        if (resp.result === 0) {\n          resolve({\n            result: 0\n          });\n        } else {\n          resolve({\n            result: resp.result\n          });\n        }\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  /**\n  * 取消调度员的全部订阅操作\n  * @param {object>} dispatcherListParam \n  * @param {Array.<UnSubDispatcher>} dispatcherListParam.cancel_subscribe_list \n  * @returns \n  */\n  cancelDispatcherAllGpsSub(dispatcherListParam) {\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug(\'cancelDispatcherAllSubGps\', JSON.stringify(dispatcherListParam));\n    return new Promise((resolve, reject) => {\n      if (!dispatcherListParam || !dispatcherListParam.cancel_subscribe_list || dispatcherListParam.cancel_subscribe_list.length === 0) {\n        resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_2__.ERROR_CODE.PARAM_INVALID\n        });\n        return;\n      }\n      const unSubscriberList = [];\n      dispatcherListParam.cancel_subscribe_list.forEach(item => {\n        const record = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(item.basedata_id);\n        const unSubcriber = {\n          puc_id: record.puc_id,\n          dispatcherid: record.what_id\n        };\n        unSubscriberList.push(unSubcriber);\n      });\n      const params = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.VERSION,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.realm,\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.puc_id,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_6__["default"].guid(),\n        cmd_name: \'gps_cancel_dispatcher_sub_req\',\n        target_list: unSubscriberList\n      };\n      _protocol_http__WEBPACK_IMPORTED_MODULE_1__["default"].postSync(params).then(resp => {\n        if (resp.result === 0) {\n          resolve({\n            result: 0\n          });\n        } else {\n          resolve({\n            result: resp.result\n          });\n        }\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  /**\n  * 启动快速GPS \n  * @param {object} startGpsParam  \n  * @param {string} startGpsParam.basedata_id  基础数据对象 id\n  * @returns \n  */\n  fastGpsStart(startGpsParam) {\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug(\'fastGpsStart\', JSON.stringify(startGpsParam));\n    return new Promise((resolve, reject) => {\n      const deviceInfo = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(startGpsParam.basedata_id); //转换\n      const start_time = dayjs__WEBPACK_IMPORTED_MODULE_7___default()(new Date().getTime()).format(DATA_FORMAT);\n      const end_time = dayjs__WEBPACK_IMPORTED_MODULE_7___default()(new Date().getTime() + 3600000).format(DATA_FORMAT);\n      const params = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.VERSION,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_6__["default"].guid(),\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.puc_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.realm,\n        cmd_name: \'gps_batch_start_gps_info_report\',\n        system_id: deviceInfo.system_id,\n        subscriberinfo_list: [{\n          puc_id: deviceInfo.puc_id,\n          system_id: deviceInfo.system_id,\n          target: {\n            number: deviceInfo.what_id,\n            number_type: deviceInfo.number_type\n            // number_type_info: deviceInfo.number_type_info,\n          },\n\n          interval_time: 30,\n          and_or_flag: 2,\n          distance: 0,\n          spd: 0,\n          start_time: this._timeToUTC(start_time),\n          end_time: this._timeToUTC(end_time)\n        }]\n      };\n      _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug(\'params\', JSON.stringify(params));\n      _protocol_http__WEBPACK_IMPORTED_MODULE_1__["default"].postSync(params).then(resp => {\n        if (resp.result === 0) {\n          resolve({\n            result: 0\n          });\n        } else {\n          resolve({\n            result: resp.result\n          });\n        }\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n  /**\n  * 取消快速GPS\n  * @param {object} cancelParam\n  * @param {string} cancelParam.basedata_id  基础数据对象 id\n  * @returns \n  */\n  fastGpsEnd(cancelParam) {\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug(\'fastGpsEnd\', JSON.stringify(cancelParam));\n    return new Promise((resolve, reject) => {\n      const deviceInfo = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(cancelParam.basedata_id); //转换\n      const params = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.VERSION,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_6__["default"].guid(),\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.puc_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.realm,\n        cmd_name: \'gps_batch_stop_gps_info_report\',\n        system_id: deviceInfo.system_id,\n        unsubscriberinfo_list: [{\n          puc_id: deviceInfo.puc_id,\n          system_id: deviceInfo.system_id,\n          // sap_guid: common.guid(),\n          // sap_type: null,\n          target: {\n            number: deviceInfo.what_id,\n            number_type: deviceInfo.number_type\n          }\n        }]\n      };\n      _protocol_http__WEBPACK_IMPORTED_MODULE_1__["default"].postSync(params).then(resp => {\n        if (resp.result === 0) {\n          resolve({\n            result: 0\n          });\n        } else {\n          resolve({\n            result: resp.result\n          });\n        }\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  /**\n  * 单次获取位置信息\n  * @param {object} gpsInfoParam   基础数据对象id，必填项\n  * @param {string} gpsInfoParam.basedata_id   基础数据对象id，必填项\n  * @param {boolean} gpsInfoParam.is_encryption   是否加密， 选填。 默认加密\n  * @returns {Promise.<GpsInfo>}\n  */\n  getGpsInfo(gpsInfoParam) {\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug(\'getGpsInfo\', JSON.stringify(gpsInfoParam));\n    return new Promise((resolve, reject) => {\n      if (!gpsInfoParam || !gpsInfoParam.basedata_id) {\n        resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_2__.ERROR_CODE.PARAM_INVALID\n        });\n        return;\n      }\n      const deviceInfo = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(gpsInfoParam.basedata_id); //转换\n\n      const params = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.VERSION,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_6__["default"].guid(),\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.puc_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.realm,\n        cmd_name: \'gps_get_gps_info\',\n        system_id: deviceInfo.system_id,\n        // subscriber_id: null,\n        encryption: gpsInfoParam.is_encryption ? 1 : 0,\n        target: {\n          puc_id: deviceInfo.puc_id,\n          system_id: deviceInfo.system_id,\n          number: deviceInfo.what_id,\n          number_type: deviceInfo.number_type\n        }\n      };\n      _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].info(\'getGpsInfo params\', JSON.stringify(params));\n      _protocol_http__WEBPACK_IMPORTED_MODULE_1__["default"].postSync(params).then(resp => {\n        // 返回的result只有两种情况 0 成功 1 失败\n        if (resp.result !== 0) {\n          if (resp.result === _public_constant__WEBPACK_IMPORTED_MODULE_2__.ERROR_CODE.REQUEST_TIMEOUT) {\n            resolve({\n              result: resp.result\n            });\n          } else {\n            resolve({\n              result: _public_constant__WEBPACK_IMPORTED_MODULE_2__.ERROR_CODE.GET_GPS_INFO_FAIL\n            });\n          }\n        } else if (resp.longitude === 0 && resp.latitude === 0) {\n          // 判断经纬度是否为空, 都为空则提示无效GPS信息\n          resolve({\n            result: _public_constant__WEBPACK_IMPORTED_MODULE_2__.ERROR_CODE.INVALID_GPS_DATA\n          });\n        } else {\n          const gpsData = {\n            basedata_id: (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.genLocalGuid)({\n              puc_id: resp.puc_id,\n              system_id: resp.system_id,\n              number: resp.target.number,\n              number_type: resp.target.number_type,\n              time_slot: "",\n              realm: resp.realm\n            }, \'number\'),\n            long_we: resp.longwe,\n            longitude: resp.longitude,\n            lat_ns: resp.latns,\n            latitude: resp.latitude,\n            speed: resp.speed,\n            direction: resp.direction,\n            receive_time: resp.receivedatetime,\n            electricity: resp.electricity,\n            //this._getElectricity(resp.electricity), 还是返回值出去\n\n            device_alias: resp.dev_alias ? resp.dev_alias : resp.target.number,\n            device_number: resp.target.number,\n            device_staff_name: resp.staff_name ? resp.staff_name : ""\n          };\n          const gpsInfo = {\n            user_id: resp.user_id,\n            result: 0,\n            gps_data: gpsData\n          };\n          resolve(gpsInfo);\n        }\n      }).catch(err => {\n        _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].info(\'err\', err);\n        if (typeof err === \'string\') {\n          const index = err.indexOf(\'send time out\');\n          if (index >= 0) {\n            // 请求超时             \n            resolve({\n              result: _public_constant__WEBPACK_IMPORTED_MODULE_2__.ERROR_CODE.REQUEST_TIMEOUT\n            });\n          } else {\n            // 请求失败\n            reject({\n              result: _public_constant__WEBPACK_IMPORTED_MODULE_2__.ERROR_CODE.GET_GPS_INFO_FAIL\n            });\n          }\n        } else {\n          // 请求失败\n          reject({\n            result: _public_constant__WEBPACK_IMPORTED_MODULE_2__.ERROR_CODE.GET_GPS_INFO_FAIL\n          });\n        }\n      });\n    });\n  }\n\n  /**\n  * 查询历史轨迹\n  * @param {RecordGpsParams} recordGpsParams   历史轨迹查询参数对象\n  * @returns {Promise.<GpsRecordResult>}\n  */\n  queryRecordGPS(recordGpsParams) {\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug("queryRecordGPS", JSON.stringify(recordGpsParams));\n    return new Promise((resolve, reject) => {\n      // 对外basedata_id  解析 \n      const deviceInfo = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(recordGpsParams.basedata_id); //转换\n      const params = {\n        start_time: recordGpsParams.start_time,\n        end_time: recordGpsParams.end_time,\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.VERSION,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_6__["default"].guid(),\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.puc_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.realm,\n        cmd_name: CMD_GPS_RECORD_QUERY,\n        system_id: deviceInfo.system_id,\n        target: {\n          number: deviceInfo.what_id,\n          number_type: Number(deviceInfo.number_type),\n          puc_id: deviceInfo.puc_id,\n          system_id: deviceInfo.system_id\n        }\n      };\n      //默认最大值不超过10000\n      var MAX_NUMBER = recordGpsParams.max_number ? recordGpsParams.max_number > 10000 ? 10000 : recordGpsParams.max_number : 10000;\n      if (MAX_NUMBER < 1000) {\n        MAX_NUMBER = 1000;\n      }\n      _protocol_http__WEBPACK_IMPORTED_MODULE_1__["default"].postSync(params).then(res => {\n        let gps_list = [];\n        if (res && res.cmd_guid) {\n          if (res.result !== 0) {\n            resolve({\n              result: res.result\n            });\n            return;\n          }\n          if (res.node_list !== null) {\n            res.node_list.forEach(item => {\n              if (item.longitude !== 0 && item.latitude !== 0) {\n                /**\n                 * @type {GpsRecord}\n                 */\n                const gpsRecord = {\n                  long_we: item.long_we,\n                  longitude: item.longitude,\n                  lat_ns: item.lat_ns,\n                  latitude: item.latitude,\n                  speed: item.speed,\n                  direction: item.direct,\n                  gps_datetime: item.gps_datetime\n                };\n                gps_list.push(gpsRecord);\n              }\n            });\n          }\n\n          /**\n            * @type {GpsRecordResult}\n            */\n          const gpsRecordResult = {\n            result: 0,\n            exceeded_the_maximum: false,\n            gps_record_list: gps_list\n          };\n          resolve(gpsRecordResult);\n          return;\n        } else if (res.length > 0) {\n          // 超过1千条数据，分成多片返回。 每片都是 1千条 同样的数据结构\n          const total = (res.length - 1) * 1000 + res[res.length - 1].node_list.length;\n\n          //起始的片的 ID值。   \n          var pieceStartId;\n          // 下一片的起始 J 位置值。\n          var nextPieceStartJ;\n          var is_exceeded_the_maximum = false;\n          if (total < MAX_NUMBER) {\n            // 如果总数小于最大值，从头开始 即可，那么就从第0片的第0个坐标点开始， \n            pieceStartId = 0;\n            nextPieceStartJ = 0;\n          } else {\n            // 如果总数大于最大值，就需要从第 total-MAX_NUMBER 的位置开始 转换数据，返回出去。\n            var totalTmp = MAX_NUMBER;\n            is_exceeded_the_maximum = true;\n            for (var i = res.length - 1; i >= 0; i -= 1) {\n              if (totalTmp > res[i].node_list.length) {\n                totalTmp = totalTmp - res[i].node_list.length;\n              } else {\n                pieceStartId = i;\n                nextPieceStartJ = res[i].node_list.length - totalTmp;\n                break;\n              }\n            }\n          }\n          for (var i = pieceStartId; i < res.length; i += 1) {\n            for (var j = nextPieceStartJ; j < res[i].node_list.length; j += 1) {\n              var item = res[i].node_list[j];\n              if (item.longitude !== 0 && item.latitude !== 0) {\n                /**\n                 * @type {GpsRecord}\n                 */\n                const gpsRecord = {\n                  long_we: item.long_we,\n                  longitude: item.longitude,\n                  lat_ns: item.lat_ns,\n                  latitude: item.latitude,\n                  speed: item.speed,\n                  direction: item.direct,\n                  gps_datetime: item.gps_datetime,\n                  receive_time: item.receive_datetime\n                };\n                gps_list.push(gpsRecord);\n              }\n            }\n            // 下一片 从数组 0的位置开始\n            nextPieceStartJ = 0;\n          }\n\n          /**\n           * @type {GpsRecordResult}\n           */\n          const gpsRecordResult = {\n            result: 0,\n            exceeded_the_maximum: is_exceeded_the_maximum,\n            gps_record_list: gps_list\n          };\n          resolve(gpsRecordResult);\n          return;\n        }\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  /**\n   * 获取已订阅列表\n   * @param {SubDeviecesParams} subDeviecesParams    订阅列表参数对象\n   * @returns {Promise.<SubDeviecesResult>}\n   */\n  fetchSubDeviceList(subDeviecesParams) {\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug("fetchSubDeviceList", JSON.stringify(subDeviecesParams));\n    return new Promise((resolve, reject) => {\n      const params = {\n        cmd_name: \'gps_query_gps_subscribe_info\',\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.VERSION,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_6__["default"].guid(),\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.puc_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.realm,\n        page_size: subDeviecesParams.page_size,\n        page_index: subDeviecesParams.page_index,\n        filter: subDeviecesParams.filter_key ? subDeviecesParams.filter_key : \'\'\n      };\n      _protocol_http__WEBPACK_IMPORTED_MODULE_1__["default"].postSync(params).then(resp => {\n        if (!resp.list || resp.list.length === 0) {\n          //订阅设备列表为空\n          const deviecesResult = {\n            result: 0,\n            total_number: 0,\n            sub_device_list: []\n          };\n          resolve(deviecesResult);\n          return;\n        }\n        const reqParams = {\n          cmd_name: \'gps_get_radio_sub_para_req\',\n          product_name: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.PRODUCT_NAME,\n          version: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.VERSION,\n          cmd_guid: _common__WEBPACK_IMPORTED_MODULE_6__["default"].guid(),\n          puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.puc_id,\n          user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.user_id,\n          realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.realm,\n          target_list: []\n        };\n        resp.list.forEach(item => {\n          reqParams.target_list.push({\n            puc_id: item.puc_id,\n            system_id: item.system_id,\n            number: item.device_id,\n            number_type: item.device_type\n          });\n        });\n        const deviceSubList = resp.list;\n        const total = resp.count;\n        _protocol_http__WEBPACK_IMPORTED_MODULE_1__["default"].postSync(reqParams).then(res => {\n          const deviceSubListParamsData = res.target_list;\n          const sub_device_list = [];\n          if (!deviceSubListParamsData || deviceSubListParamsData.length === 0) {\n            // 由于是gis 订阅异步的，加上两次请求是不同步的，之前出现 订阅列表有，但是参数列表 deviceSubListParamsData 为空的情况\n            _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug("deviceSubListParamsData null");\n            deviceSubList.value.forEach(item => {\n              /**\n               * @type {SubDevieceInfo}\n               */\n              const subDevieceInfo = {\n                basedata_id: (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.genLocalGuid)({\n                  puc_id: item.puc_id,\n                  system_id: item.system_id,\n                  number: item.device_id,\n                  number_type: item.device_type,\n                  time_slot: ""\n                }, \'number\'),\n                number: item.device_id,\n                alias: item.device_alias,\n                staff_name: item.device_staff_name,\n                actual_report_cycle: 0,\n                min_cycle: 0\n              };\n              sub_device_list.push(subDevieceInfo);\n            });\n          } else {\n            //能拿到 订阅参数列表，但是不保证完全匹配\n            let exitFlag = false;\n            deviceSubList.forEach(listData => {\n              exitFlag = false;\n              deviceSubListParamsData.forEach(paramsData => {\n                if (paramsData.number === listData.device_id && paramsData.system_id === listData.system_id) {\n                  exitFlag = true;\n                  const subDevieceInfo = {\n                    basedata_id: (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.genLocalGuid)({\n                      puc_id: paramsData.puc_id,\n                      system_id: paramsData.system_id,\n                      number: paramsData.number,\n                      number_type: paramsData.number_type,\n                      time_slot: ""\n                    }, \'number\'),\n                    number: listData.device_id,\n                    alias: listData.device_alias,\n                    staff_name: listData.device_staff_name,\n                    actual_report_cycle: paramsData.actualcycle,\n                    min_cycle: paramsData.mincycle\n                  };\n                  sub_device_list.push(subDevieceInfo);\n                }\n              });\n              if (!exitFlag) {\n                // 如果订阅参数列表找不到该订阅者信息，那么 最小周期那些信息就设置为空\n                const subDevieceInfo = {\n                  basedata_id: (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.genLocalGuid)({\n                    puc_id: listData.puc_id,\n                    system_id: listData.system_id,\n                    number: listData.device_id,\n                    number_type: listData.device_type,\n                    time_slot: ""\n                  }, \'number\'),\n                  number: listData.device_id,\n                  alias: listData.device_alias,\n                  staff_name: listData.device_staff_name,\n                  actual_report_cycle: 0,\n                  min_cycle: 0\n                };\n                sub_device_list.push(subDevieceInfo);\n              }\n            });\n          }\n          /**\n           * @type {SubDeviecesResult}\n           */\n          const subDeviecesResult = {\n            result: res.result,\n            total_number: total,\n            sub_device_list: sub_device_list\n          };\n          resolve(subDeviecesResult);\n        }).catch(err => {\n          reject(err);\n        });\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  /**\n   * 获取订阅设备的订阅关系\n   * @param {SubDeviceRelationParams} subDeviceRelationParams    订阅列表参数对象\n   * @returns {Promise.<SubDeviceRelationResult>}\n   */\n  fetchSubDeviceRelation(subDeviceRelationParams) {\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug("fetchSubDeviceRelation", JSON.stringify(subDeviceRelationParams));\n    return new Promise((resolve, reject) => {\n      if (!subDeviceRelationParams.basedata_id) {\n        resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_2__.ERROR_CODE.PARAM_INVALID\n        });\n        return;\n      }\n      // 对外basedata_id  解析 \n      const deviceInfo = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(subDeviceRelationParams.basedata_id); //转换\n      const reqParams = {\n        cmd_name: \'gps_get_sub_relation_req\',\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.VERSION,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_6__["default"].guid(),\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.puc_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.realm,\n        target: {\n          puc_id: deviceInfo.puc_id,\n          system_id: deviceInfo.system_id,\n          // system_type: record.system_type,\n          number: deviceInfo.what_id,\n          number_type: deviceInfo.number_type\n        }\n      };\n      _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug("fetchSubDeviceRelation reqParams", JSON.stringify(reqParams));\n      _protocol_http__WEBPACK_IMPORTED_MODULE_1__["default"].postSync(reqParams).then(resp => {\n        _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug("fetchSubDeviceRelation resp", JSON.stringify(resp));\n        const list = [];\n        if (resp && resp.cmd_guid) {\n          if (resp.result !== 0) {\n            resolve({\n              result: resp.result,\n              basedata_id: reqParams.basedata_id,\n              subscriber_list: []\n            });\n            return;\n          }\n          resp.subscriber_list.forEach(item => {\n            /**\n              * @type {SubscriberRelation}\n              */\n            const subscriberRelation = {\n              dispatcher_id: item.dispatcherid,\n              interval_time: item.interval_time\n            };\n            list.push(subscriberRelation);\n          });\n        } else if (resp.length > 1) {\n          // 多片\n          resp.forEach(itemList => {\n            itemList.forEach(item => {\n              /**\n                * @type {SubscriberRelation}\n                */\n              const subscriberRelation = {\n                dispatcher_id: item.dispatcherid,\n                interval_time: item.interval_time\n              };\n              list.push(subscriberRelation);\n            });\n          });\n        }\n\n        /**\n         * @type {SubDeviceRelationResult}\n         */\n        const subDeviceRelationResult = {\n          result: 0,\n          basedata_id: reqParams.basedata_id,\n          subscriber_list: list\n        };\n        resolve(subDeviceRelationResult);\n      });\n    }).catch(err => {\n      reject(err);\n    });\n  }\n\n  /**\n   * 初始化订阅事件\n   */\n  _initEvents() {\n    _protocol_websocket__WEBPACK_IMPORTED_MODULE_5__["default"].registerMessageHandler(CMD_GET_GPS_REPORT, this);\n    _protocol_websocket__WEBPACK_IMPORTED_MODULE_5__["default"].registerMessageHandler(CMD_GET_CYCLE_REPORT_STATE, this);\n    _protocol_websocket__WEBPACK_IMPORTED_MODULE_5__["default"].registerMessageHandler(CMD_ALL_STOP_GPS_INFO_REPORT_SYN, this);\n    _protocol_websocket__WEBPACK_IMPORTED_MODULE_5__["default"].registerMessageHandler(CMD_GPS_CANCEL_DISPATCHER_SUB_SYN, this);\n  }\n\n  /**\n   * 添加GPS 上报回调\n   * @param {GpsCallback} callback 回调函数\n   * @returns {string} callbackId {@link removeGPSReportListener } 需要根据这个id找到对应的回调函数\n   */\n  addGPSReportListener(callback) {\n    const callbackId = _common__WEBPACK_IMPORTED_MODULE_6__["default"].guid();\n    this.gpsReportCbMap.set(callbackId, callback);\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug(\'registerDeviceChangeListener callbackId=%s\', callbackId);\n    return callbackId;\n  }\n\n  /**\n   * 根据callbackId删除之前注册的回调\n   * \n   * @param {string} callbackId \n   */\n  removeGPSReportListener(callbackId) {\n    let result;\n    if (callbackId) {\n      result = this.gpsReportCbMap.delete(callbackId);\n    }\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug(\'removeDeviceChangeListener cbId=%s,succ=%s\', callbackId, result);\n  }\n\n  /**\n   * 添加 调度台取消订阅通知回调\n   * @param {DeviceCallback} callback 回调函数\n   * @returns {string} callbackId {@link removeGPSReportListener } 需要根据这个id找到对应的回调函数\n   */\n  addCXLDispatcherSubListener(callback) {\n    const callbackId = _common__WEBPACK_IMPORTED_MODULE_6__["default"].guid();\n    this.dispatcherCancelSub.set(callbackId, callback);\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug(\'registerDeviceChangeListener callbackId=%s\', callbackId);\n    return callbackId;\n  }\n\n  /**\n   * 根据callbackId删除之前注册的回调\n   * \n   * @param {string} callbackId \n   */\n  removeCXLDispatcherSubListener(callbackId) {\n    let result;\n    if (callbackId) {\n      result = this.dispatcherCancelSub.delete(callbackId);\n    }\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug(\'removeDeviceChangeListener cbId=%s,succ=%s\', callbackId, result);\n  }\n\n  /**\n   * 添加 设备取消订阅通知回调\n   * @param {DeviceCallback} callback 回调函数\n   * @returns {string} callbackId {@link removeCXLDeviceSubListener } 需要根据这个id找到对应的回调函数\n   */\n  addCXLDeviceSubListener(callback) {\n    const callbackId = _common__WEBPACK_IMPORTED_MODULE_6__["default"].guid();\n    this.deviceCancelAllSub.set(callbackId, callback);\n    return callbackId;\n  }\n\n  /**\n   * 根据callbackId删除之前注册的回调\n   * \n   * @param {string} callbackId \n   */\n  removeCXLDeviceSubListener(callbackId) {\n    let result;\n    if (callbackId) {\n      result = this.deviceCancelAllSub.delete(callbackId);\n    }\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug(\'removeCXLDeviceSubListener cbId=%s,succ=%s\', callbackId, result);\n  }\n\n  /**\n   * 设置全网订阅参数\n   * @param {WholeNetSubParams} wholeNetSubParams\n   * @returns {Promise.<RetReslut>}\n   */\n  setWholeNetSubParams(wholeNetSubParams) {\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug("setWholeNetSubParams", JSON.stringify(wholeNetSubParams));\n    return new Promise((resolve, reject) => {\n      // 设置全网参数\n      const reqParams = {\n        cmd_name: \'gps_set_whole_net_req\',\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.VERSION,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_6__["default"].guid(),\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.puc_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.realm,\n        allnetsubstate: 3,\n        allnetsubcycle: null,\n        recoverytime: 0\n      };\n      if ((0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.isNotEmpty)(wholeNetSubParams.recovery_time)) {\n        reqParams.recoverytime = wholeNetSubParams.recovery_time;\n      }\n      // 订阅状态\n      if ((0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.isNotEmpty)(wholeNetSubParams.sub_pull_mode)) {\n        reqParams.allnetsubstate = wholeNetSubParams.sub_pull_mode;\n      }\n      // 上拉周期\n      if ((0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.isNotEmpty)(wholeNetSubParams.whole_net_sub_cycle)) {\n        reqParams.allnetsubcycle = wholeNetSubParams.whole_net_sub_cycle;\n      } else {\n        reqParams.allnetsubcycle = 3;\n      }\n      const wholeNetPromise = _protocol_http__WEBPACK_IMPORTED_MODULE_1__["default"].postSync(reqParams);\n\n      // 设置最小订阅周期\n      const params = {\n        cmd_name: \'gps_set_unify_min_cycle_req\',\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.VERSION,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_6__["default"].guid(),\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.puc_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.realm,\n        unify_min_interval: 0\n      };\n      if ((0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.isNotEmpty)(wholeNetSubParams.min_sub_cycle)) {\n        params.unify_min_interval = wholeNetSubParams.min_sub_cycle;\n      }\n      const minPromise = _protocol_http__WEBPACK_IMPORTED_MODULE_1__["default"].postSync(params);\n      Promise.all([wholeNetPromise, minPromise]).then(resps => {\n        var resultCode = 0;\n        resps.forEach(item => {\n          if (item.result !== 0) {\n            resultCode = item.result;\n          }\n        });\n        resolve({\n          result: resultCode\n        });\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  /**\n   * 获取全网订阅参数\n   * @returns {Promise.<WholeNetSubParamsResult>}\n   */\n  getWholeNetSubParams() {\n    return new Promise((resolve, reject) => {\n      const reqParams = {\n        cmd_name: \'gps_start_gps_admin_req\',\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.VERSION,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_6__["default"].guid(),\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.puc_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.realm\n      };\n      _protocol_http__WEBPACK_IMPORTED_MODULE_1__["default"].postSync(reqParams).then(resp => {\n        /**\n         * @type {WholeNetSubParamsResult}\n         */\n        const paramsResult = {\n          result: resp.result,\n          min_sub_cycle_setter: resp.dispatcherid,\n          whole_net_sub_params: {\n            sub_pull_mode: resp.allnetsubstate,\n            whole_net_sub_cycle: resp.allnetsubcycle,\n            recovery_time: resp.recoverytime,\n            min_sub_cycle: resp.unifymincycle\n          }\n        };\n        resolve(paramsResult);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  /**\n   * 同步订阅功能\n   * @returns {Promise.<RetReslut>}\n   */\n  syncSubscribeList() {\n    return new Promise((resolve, reject) => {\n      const params = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.VERSION,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_6__["default"].guid(),\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.puc_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.realm,\n        cmd_name: \'gps_start_gps_info_report_list\',\n        count_equal: 0\n      };\n      _protocol_http__WEBPACK_IMPORTED_MODULE_1__["default"].postSync(params).then(resp => {\n        resolve({\n          result: resp.result\n        });\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n  /**\n   * 设置终端最小订阅周期 \n   * @param {DeviceMinSubCycleParams} deviceMinSubCycleParams \n   * @returns {Promise.<RetReslut>}\n   */\n  setDeviceMinSubCycle(deviceMinSubCycleParams) {\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug("setDeviceMinSubCycle", JSON.stringify(deviceMinSubCycleParams));\n    return new Promise((resolve, reject) => {\n      if (!(0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.isNotEmpty)(deviceMinSubCycleParams.min_sub_cycle) || !deviceMinSubCycleParams.device_list || deviceMinSubCycleParams.device_list.length === 0) {\n        resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_2__.ERROR_CODE.PARAM_INVALID\n        });\n        return;\n      }\n      const reqParams = {\n        cmd_name: \'gps_set_radio_min_cycle_req\',\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.VERSION,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_6__["default"].guid(),\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.puc_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.realm,\n        min_interval: deviceMinSubCycleParams.min_sub_cycle,\n        target_list: []\n      };\n      deviceMinSubCycleParams.device_list.forEach(item => {\n        const target = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(item.basedata_id);\n        reqParams.target_list.push({\n          puc_id: target.puc_id,\n          system_id: target.system_id,\n          number: target.what_id,\n          number_type: target.number_type\n        });\n      });\n      _protocol_http__WEBPACK_IMPORTED_MODULE_1__["default"].postSync(reqParams).then(resp => {\n        resolve({\n          result: resp.result\n        });\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  /**\n   * 取消终端允许最小订阅周期\n   * @param {object} cancelDeviceParam \n   * @param {Array.<Device>} cancelDeviceParam.cancel_device_list \n   * @returns {Promise.<RetReslut>}\n   */\n  cancelDeviceMinSubCycle(cancelDeviceParam) {\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug("cancelDeviceMinSubCycle", JSON.stringify(cancelDeviceParam));\n    return new Promise((resolve, reject) => {\n      if (!cancelDeviceParam || !cancelDeviceParam.cancel_device_list || cancelDeviceParam.cancel_device_list.length === 0) {\n        resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_2__.ERROR_CODE.PARAM_INVALID\n        });\n        return;\n      }\n      const reqParams = {\n        cmd_name: \'gps_cancel_radio_min_cycle_req\',\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.VERSION,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_6__["default"].guid(),\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.puc_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.realm,\n        target_list: []\n      };\n      cancelDeviceParam.cancel_device_list.forEach(item => {\n        const target = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(item.basedata_id);\n        reqParams.target_list.push({\n          puc_id: target.puc_id,\n          system_id: target.system_id,\n          number: target.what_id,\n          number_type: target.number_type\n        });\n      });\n      _protocol_http__WEBPACK_IMPORTED_MODULE_1__["default"].postSync(reqParams).then(resp => {\n        resolve({\n          result: resp.result\n        });\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  /**\n  * 根据electricity 电量级别 获取对应的电量信息\n  * @param {number} electricity \n  */\n  _getElectricity = electricity => {\n    let result = \'\';\n    switch (electricity) {\n      case 0:\n        {\n          result = \'0%\';\n          break;\n        }\n      case 1:\n        {\n          result = \'<10%\';\n          break;\n        }\n      case 2:\n        {\n          result = \'10% ~ 40%\';\n          break;\n        }\n      case 3:\n        {\n          result = \'40% ~ 70%\';\n          break;\n        }\n      case 4:\n        {\n          result = \'70% ~ 100%\';\n          break;\n        }\n      default:\n        {\n          break;\n        }\n    }\n    return result;\n  };\n\n  /**\n  * 生成GPS上报外部数据。 \n  * @param {object} jsonData\n  * @return {GpsReportInfo}\n  */\n  _genGpsResportData(jsonData) {\n    /**\n    * @type {GpsReportInfo}\n    */\n    var gpsReportInfo = {\n      user_id: jsonData.user_id,\n      gps_list: []\n    };\n    jsonData === null || jsonData === void 0 ? void 0 : jsonData.gps_list.forEach(item => {\n      /**\n       * @type {GpsData}\n       */\n      if (item.longitude === 0 && item.latitude === 0) {\n        _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug("无效gps");\n      } else {\n        var gpsData = {\n          basedata_id: (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.genLocalGuid)({\n            puc_id: item.puc_id,\n            system_id: item.system_id,\n            number: item.target.number,\n            number_type: item.target.number_type,\n            time_slot: "",\n            realm: item.realm\n          }, \'number\'),\n          long_we: item.longwe,\n          longitude: item.longitude,\n          lat_ns: item.latns,\n          latitude: item.latitude,\n          speed: item.speed,\n          direction: item.direction,\n          receive_time: item.receivedatetime,\n          electricity: item.electricity,\n          //this._getElectricity(item.electricity),\n          current_interval_time: item.current_interval_time,\n          device_alias: item.dev_alias ? item.dev_alias : item.target.number,\n          device_number: item.target.number,\n          device_staff_name: item.staff_name ? item.staff_name : ""\n        };\n        gpsReportInfo.gps_list.push(gpsData);\n      }\n    });\n    return gpsReportInfo;\n  }\n  _dealCancelsubData(subCancelJsonList) {\n    /**\n      * @type {DeviceCancelSubNofify}\n      */\n    const deviceCancelSubNofify = {\n      user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.user_id,\n      realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.realm,\n      cancel_sub_list: []\n    };\n    subCancelJsonList.forEach(item => {\n      if (item.user_id === deviceCancelSubNofify.user_id && item.realm === deviceCancelSubNofify.realm) {\n        const dispatcherid = item.dispatcherid;\n        const handletime = item.handletime;\n        item.target_list.forEach(element => {\n          /**\n           * @type {DeviceCancelSubInfo}\n           */\n          const deviceInfo = {\n            number: element.number,\n            handle_dispatcher: dispatcherid,\n            handle_time: handletime,\n            basedata_id: (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.genLocalGuid)({\n              puc_id: element.puc_id,\n              system_id: element.system_id,\n              number: element.number,\n              number_type: element.number_type,\n              time_slot: ""\n            }, \'number\')\n          };\n          deviceCancelSubNofify.cancel_sub_list.push(deviceInfo);\n        });\n      }\n    });\n    this.deviceCancelAllSub.forEach(callback => {\n      this._safeOnCallback(callback, deviceCancelSubNofify);\n    });\n  }\n  subCancelJsonList = [];\n  collectListFlag = false;\n\n  /**\n  * ws收到事件调用这个方法，GIS相关事件由此分发\n  * @param {object} jsonData \n  */\n  onEvent(jsonData) {\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug("gis web端websocket收到异步数据:\\n " + JSON.stringify(jsonData));\n    if (!jsonData || !jsonData.cmd_name) {\n      _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].warn(\'cmd_name缺失, 无效呼叫信令！\');\n      return;\n    }\n    switch (jsonData.cmd_name) {\n      case CMD_GET_GPS_REPORT:\n        // GPS数据上报\n\n        var gpsInfo = this._genGpsResportData(jsonData);\n        if (gpsInfo.gps_list.length === 0) {\n          _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].info("无效数据");\n          return;\n        }\n        _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug("gis get_gps_report_evt" + JSON.stringify(gpsInfo));\n        this.gpsReportCbMap.forEach(callback => {\n          this._safeOnCallback(callback, gpsInfo);\n        });\n        break;\n      case CMD_GET_CYCLE_REPORT_STATE:\n        // 订阅状态\n        break;\n      case CMD_ALL_STOP_GPS_INFO_REPORT_SYN:\n        // 该设备全部取消订阅通知\n\n        // this.jsonDataList = [];\n        if (this.collectListFlag) {\n          // 收集数据\n          this.subCancelJsonList.push(jsonData);\n        } else {\n          // 开始下一轮的收集\n          this.collectListFlag = true;\n          this.subCancelJsonList = [];\n          this.subCancelJsonList.push(jsonData);\n          setTimeout(() => {\n            //处理数据。\n            this._dealCancelsubData(this.subCancelJsonList);\n            //结束这轮收集\n            this.collectListFlag = false;\n          }, 300);\n        }\n        break;\n      case CMD_GPS_CANCEL_DISPATCHER_SUB_SYN:\n        // 调度员取消订阅通知\n        /**\n        * @type {DispatcherCancelSubNofify}\n        */\n        const dispatcherCancelSubNofify = {\n          user_id: jsonData.user_id,\n          realm: jsonData.realm,\n          handle_dispatcher: jsonData.target.dispatcherid,\n          handle_time: jsonData.target.handletime\n        };\n        this.dispatcherCancelSub.forEach(callback => {\n          this._safeOnCallback(callback, dispatcherCancelSubNofify);\n        });\n        break;\n    }\n  }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new Gis());\n\n//# sourceURL=webpack://lemon/./lemon/modules/gis.js?'
          );

          /***/
        },

      /***/ "./lemon/modules/message.js":
        /*!**********************************!*\
  !*** ./lemon/modules/message.js ***!
  \**********************************/
        /***/ (
          __unused_webpack_module,
          __webpack_exports__,
          __webpack_require__
        ) => {
          "use strict";
          eval(
            '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _public_baseRequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../public/baseRequest */ "./lemon/public/baseRequest.js");\n/* harmony import */ var _common_log__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/log */ "./lemon/common/log.js");\n/* harmony import */ var _common_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../common/utils */ "./lemon/common/utils.js");\n/* harmony import */ var _protocol_http__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../protocol/http */ "./lemon/protocol/http.js");\n/* harmony import */ var _public_constant__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./../public/constant */ "./lemon/public/constant.js");\n/*\n * @author: wangtianyu\n * @Date: 2023-06-13 10:41:06\n * @LastEditors: wangtianyu\n * @LastEditTime: 2023-06-27 10:53:57\n * @Description: 短消息模块\n */\n\n\n\n\n\n\n\n/**\n * 发送短信指令\n * @const\n * @type {string}\n */\nconst CMD_SEND_MESSAGE = "sds_send_text";\n/**\n * 获取状态短信列表指令\n * @const\n * @type {string}\n */\nconst CMD_FETCH_MESSAGE_STATUS_LIST = "sds_status_list_request";\n/**\n * 状态短信发送指令\n * @const\n * @type {string}\n */\nconst CMD_SEND_MESSAGE_STATUS = "sds_send_status";\n\n/**\n * 状态短信接收指令\n * @const\n * @type {string}\n */\nconst CMD_RECEIVE_MESSAGE_STATUS = "sds_status_receive_evt";\n\n/**\n * 状态短信结构\n * @typedef {object} MessageStatus\n * @property  {number} status_id 状态码\n * @property  {number} sds_type 状态消息类型 0 状态短信 2紧急告警\n * @property  {string} status_description 状态消息内容\n * @property  {string} create_datetime 创建时间\n */\n\n/**\n * 接收者结构\n * @typedef {object} Callee\n * @property  {string} basedata_id basedata_id\n * @property  {number} number 号码\n * @property  {string} number_alias 号码别名\n * @property  {number} number_type 号码类型\n */\n\n/**\n * 发送文本短信列表请求响应结构\n * @typedef {object} MessageTextSendResp\n * @property  {number} result 响应码，0成功，其他失败\n * @property  {string} sds_time_stamp 时间戳\n */\n\n/**\n * 发送多媒体短信列表请求响应结构\n * @typedef {object} MessageMediaSendResp\n * @property  {number} result 响应码，0成功，其他失败\n * @property  {string} sds_time_stamp 时间戳\n * @property  {string} file_type 文件类型\n * @property  {string} file_url 文件上传路径\n */\n\n/**\n * 获取状态短信列表请求响应结构\n * @typedef {object} MessageStatusListResp\n * @property  {number} result 响应码，0成功，其他失败\n * @property  {Array<MessageStatus>} device_list\n */\n\n/**\n * 短信接收事件响应结构\n * @typedef {object} MessageReceiveEvent\n * @property  {Callee} caller 发送者(主叫) 信息\n * @property  {Callee} callee 接收者(被叫) 信息\n * @property {string} sds_content 短消息内容\n * @property  {number} sds_type 状态消息类型\n * @property  {string} sds_text 状态码对应的内容\n * @property  {object} file_parm 媒体短信参数 其中Url属性是多媒体文件地址\n */\n\n// 短消息相关\nclass Message {\n  constructor() {\n    /**\n     * 短信接收回调\n     * @type {Map<string,Function>}\n     */\n    this.messageReportListMap = new Map();\n  }\n  /** 回调处理通用逻辑 */\n  _safeOnCallback(func, param) {\n    try {\n      func(param);\n    } catch (error) {\n      _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].error(error);\n    }\n  }\n\n  /** 添加短信接收回调 */\n  addMessageReportListener(callback) {\n    if (!callback) {\n      _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].debug("addMessageReportListener callback is null");\n      return false;\n    }\n    const callbackId = (0,_common_utils__WEBPACK_IMPORTED_MODULE_2__.guid)();\n    this.messageReportListMap.set(callbackId, callback);\n    return callbackId;\n  }\n\n  /** 触发短信接收回调 */\n  onMessageReportEvt(event) {\n    const {\n      sds_content,\n      sender,\n      recipient,\n      file_parm,\n      sds_type,\n      sds_text,\n      system_id\n    } = event;\n    const caller_basedata_id = (0,_common_utils__WEBPACK_IMPORTED_MODULE_2__.genLocalGuid)({\n      puc_id: sender.puc_id,\n      system_id,\n      number: sender.number,\n      number_type: sender.number_type,\n      time_slot: sender.time_slot\n    }, \'number\');\n    const callee_basedata_id = (0,_common_utils__WEBPACK_IMPORTED_MODULE_2__.genLocalGuid)({\n      puc_id: recipient.puc_id,\n      system_id,\n      number: recipient.number,\n      number_type: recipient.number_type,\n      time_slot: recipient.time_slot\n    }, \'number\');\n    /**\n     * 返给sdk外的响应\n     * @type {MessageReceiveEvent}\n     */\n    const result = {\n      caller: {\n        basedata_id: caller_basedata_id,\n        number: sender.number,\n        // number_type: sender.number_type,\n        number_alias: sender.number_alias\n      },\n      callee: {\n        basedata_id: callee_basedata_id,\n        number: recipient.number,\n        // number_type: recipient.number_type,\n        number_alias: recipient.number_alias\n      },\n      sds_content,\n      sds_type,\n      sds_text,\n      file_parm\n    };\n    // TODO待验证  sds_type是否本身就回传正确，如果状态短信没有回传，值为2是否可行\n    if (event.cmd_name === CMD_RECEIVE_MESSAGE_STATUS) result.sds_type = 2;\n    this.messageReportListMap.forEach(func => {\n      this._safeOnCallback(func, result);\n    });\n  }\n\n  /** 根据callbackId移除短信接收回调 */\n  removeMessageReportListener(callbackId) {\n    if (this.messageReportListMap.has(callbackId)) {\n      this.messageReportListMap.delete(callbackId);\n    }\n  }\n  /**\n   * @description: 发送文本短信\n   * @param {object} data \n   * @param {string} data.basedata_id basedata_id\n   * @param {string} data.recipient_alias  接收者别名\n   * @param {string} data.message_content 短消息内容\n   * @param {number} [data.flag] 是否加密 0 非加密 1 加密  默认非加密，很多系统不支持加密\n   * @return {Promise<MessageTextSendResp>}\n   */\n  sendMessageText(data) {\n    _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].debug("sendMessageText params====>", JSON.stringify(data));\n    const {\n      puc_id,\n      system_id,\n      what_id,\n      number_type,\n      time_slot\n    } = (0,_common_utils__WEBPACK_IMPORTED_MODULE_2__.unPackGuid)(data.basedata_id);\n    if (!puc_id || !system_id || !what_id) {\n      _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].warn("basedata getDeviceType error", data.basedata_id);\n      return Promise.resolve({\n        result: _public_constant__WEBPACK_IMPORTED_MODULE_4__.ERROR_CODE.PARAM_INVALID\n      });\n    }\n    if (data.flag === undefined) {\n      data.flag = 0;\n    }\n    const param = {\n      ..._public_baseRequest__WEBPACK_IMPORTED_MODULE_0__["default"].getBaseReq(),\n      cmd_name: CMD_SEND_MESSAGE,\n      system_id,\n      sds_type: 0,\n      sds_content: data.message_content,\n      end2end_encryption_flag: data.flag,\n      emergency_flag: 0,\n      // 紧急短信标志位 1:紧急, 0:非紧急\n      time_stamp: _public_baseRequest__WEBPACK_IMPORTED_MODULE_0__["default"].getUTCTime(),\n      priority: 0,\n      // 优先级 默认是0，暂时没有用到\n      sender: {\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_0__["default"].user.puc_id,\n        number: _public_baseRequest__WEBPACK_IMPORTED_MODULE_0__["default"].user.user_id,\n        number_type: _public_baseRequest__WEBPACK_IMPORTED_MODULE_0__["default"].user.number_type,\n        number_alias: _public_baseRequest__WEBPACK_IMPORTED_MODULE_0__["default"].user.dispatcher_name || "",\n        time_slot\n      },\n      recipient: {\n        puc_id,\n        number: what_id,\n        number_type: number_type === 4 || number_type === 21 ? 1 : number_type,\n        // 动态组、派接组需要改成组才行\n        number_alias: data.recipient_alias || "",\n        time_slot\n      },\n      system_type: 7,\n      encode_type: "Utf_8"\n    };\n\n    /**\n     * 接口中未传参数\n     * system_type 系统类型\n     * encode_type 短信编码类型\n     */\n    _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].debug("lemon-sds--sds_send_text:", JSON.stringify(param));\n    return new Promise(function (resolve, reject) {\n      _protocol_http__WEBPACK_IMPORTED_MODULE_3__["default"].postSync(param).then(res => {\n        /**\n         * 返给sdk外的响应\n         * @type {MessageTextSendResp}\n         */\n        const result = {\n          result: res.result,\n          time_stamp: res.time_stamp\n        };\n        resolve(result);\n        _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].debug("lemon-sds--sds_text_send_ack:", result);\n      }).catch(reject);\n    });\n  }\n  /**\n   * @description: 获取状态短信列表\n   * @return {Promise<MessageStatusListResp>}\n   */\n  fetchMessageStatusList() {\n    const param = {\n      ..._public_baseRequest__WEBPACK_IMPORTED_MODULE_0__["default"].getBaseReq(),\n      cmd_name: CMD_FETCH_MESSAGE_STATUS_LIST,\n      time_stamp: _public_baseRequest__WEBPACK_IMPORTED_MODULE_0__["default"].getUTCTime(),\n      version_seq: "0"\n    };\n    _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].debug("lemon-sds--sds_status_list_request:", JSON.stringify(param));\n    return new Promise(function (resolve, reject) {\n      _protocol_http__WEBPACK_IMPORTED_MODULE_3__["default"].postSync(param).then(res => {\n        var _res$sds_status_list;\n        /**\n         * 返给sdk外的响应\n         * @type {MessageStatusListResp}\n         */\n        const result = {\n          result: res === null || res === void 0 ? void 0 : res.result,\n          sds_status_list: res === null || res === void 0 ? void 0 : (_res$sds_status_list = res.sds_status_list) === null || _res$sds_status_list === void 0 ? void 0 : _res$sds_status_list.map(item => {\n            return {\n              create_datetime: item.create_datetime,\n              status_id: item.status_id,\n              status_description: item.status_description,\n              sds_type: item.sds_type\n            };\n          })\n        };\n        resolve(result);\n        _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].debug("lemon-sds--sds_status_list_request_ack:", JSON.stringify(result));\n      }).catch(reject);\n    });\n  }\n  /**\n   * @description: 发送状态短信\n   * @param {object} data \n   * @param {string} data.basedata_id basedata_id\n   * @param {string} data.message_content 短消息内容\n   * @param {number} data.flag 是否加密 0 非加密 1 加密  默认非加密，很多系统不支持加密\n   * @return {Promise<MessageTextSendResp>}\n   */\n  sendMessageStatus(data) {\n    _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].debug("sendMessageStatus params====>", JSON.stringify(data));\n    const {\n      puc_id,\n      system_id,\n      what_id,\n      number_type,\n      time_slot\n    } = (0,_common_utils__WEBPACK_IMPORTED_MODULE_2__.unPackGuid)(data.basedata_id);\n    if (!puc_id || !system_id || !what_id) {\n      _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].warn("basedata getDeviceType error", data.basedata_id);\n      return;\n    }\n    if (data.flag === undefined) {\n      data.flag = 0;\n    }\n    const param = {\n      ..._public_baseRequest__WEBPACK_IMPORTED_MODULE_0__["default"].getBaseReq(),\n      cmd_name: CMD_SEND_MESSAGE_STATUS,\n      system_id,\n      sds_type: 0,\n      sds_content: data.message_content,\n      end2end_encryption_flag: data.flag,\n      emergency_flag: 0,\n      // 紧急短信标志位 1:紧急, 0:非紧急\n      time_stamp: _public_baseRequest__WEBPACK_IMPORTED_MODULE_0__["default"].getUTCTime(),\n      priority: 0,\n      // 优先级 默认是0，暂时没有用到\n      sender: {\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_0__["default"].user.puc_id,\n        number: _public_baseRequest__WEBPACK_IMPORTED_MODULE_0__["default"].user.user_id,\n        number_type: _public_baseRequest__WEBPACK_IMPORTED_MODULE_0__["default"].user.number_type,\n        number_alias: _public_baseRequest__WEBPACK_IMPORTED_MODULE_0__["default"].user.dispatcher_name || "",\n        time_slot\n      },\n      recipient: {\n        puc_id,\n        number: what_id,\n        number_type: number_type === 4 || number_type === 21 ? 1 : number_type,\n        number_alias: data.recipient_alias || "",\n        time_slot\n      },\n      system_type: 7,\n      encode_type: "Utf_8"\n    };\n\n    /**\n     * 接口中未传参数\n     * system_type 系统类型\n     * encode_type 短信编码类型\n     */\n    _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].debug("lemon-sds--sds_send_status:", JSON.stringify(param));\n    return new Promise(function (resolve, reject) {\n      _protocol_http__WEBPACK_IMPORTED_MODULE_3__["default"].postSync(param).then(res => {\n        /**\n         * 返给sdk外的响应\n         * @type {MessageTextSendResp}\n         */\n        const result = {\n          result: res.result,\n          time_stamp: res.time_stamp\n        };\n        resolve(result);\n        _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].debug("lemon-sds--sds_send_status_ack:", JSON.stringify(result));\n      }).catch(reject);\n    });\n  }\n  /**\n   * @description: 发送多媒体短信(发送文件之前先从服务器获取上传地址后再上传)\n   * @param {object} data \n   * @param {*} data.file File对象或input元素 id属性\n   * @param {string} data.basedata_id basedata_id\n   * @param {string} data.recipient_alias 接收者别名\n   * @param {number} data.flag 是否加密 0 非加密 1 加密   默认非加密，很多系统不支持加密\n   * @return {Promise<MessageMediaSendResp>}\n   */\n  sendMessageMedia = function (data) {\n    _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].debug("sendMessageMedia", JSON.stringify(data));\n    return new Promise((resolve, reject) => {\n      var _data$file;\n      if (!((_data$file = data.file) !== null && _data$file !== void 0 && _data$file.size)) {\n        data.file = document.getElementById(obj).files[0];\n      }\n      this._uploadMMSFileHttp("/frs", data.file).then(fileUrl => {\n        return this._receiveUploadAddress(data.file, fileUrl, data.basedata_id, data.flag === undefined ? 0 : data.flag, data.recipient_alias === undefined ? "" : data.recipient_alias);\n      }).then(res => {\n        resolve(res);\n      }).catch(reject);\n    });\n  };\n  /**\n   * @param {object} data 非完整地址\n   * @param {string} data.url 非完整地址\n   * @param {string} [data.default_name] 默认名称，不传则根据下载的文件解析\n   * @returns \n   */\n  downloadFile = function (data) {\n    _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].debug("downloadFile", JSON.stringify(data));\n    return new Promise((resolve, reject) => {\n      if (!data || !data.url) {\n        resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_4__.ERROR_CODE.PARAM_INVALID\n        });\n        return;\n      }\n      _protocol_http__WEBPACK_IMPORTED_MODULE_3__["default"].getFile(data.url, {\n        Authorization: `Bearer ${_public_baseRequest__WEBPACK_IMPORTED_MODULE_0__["default"].user.token}`\n      }).then(res => {\n        if (res.status === 200) {\n          const headers = res === null || res === void 0 ? void 0 : res.headers;\n          let contentType = headers[\'content-type\'];\n          if (contentType === \'application/octet-stream\') {\n            const fileName = decodeURI(headers[\'file-name\']);\n            if (fileName !== null && fileName !== void 0 && fileName.endsWith(\'.mp3\')) {\n              contentType = \'audio/mp3\';\n            }\n          }\n          resolve({\n            result: _public_constant__WEBPACK_IMPORTED_MODULE_4__.ERROR_CODE.SUCCESS,\n            url: window.URL.createObjectURL(res.data),\n            name: data.default_name ? data.default_name : decodeURI(headers[\'file-name\']),\n            type: contentType\n          });\n        } else {\n          resolve({\n            result: res.status\n          });\n        }\n      }).catch(err => {\n        const errResult = {\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_4__.ERROR_CODE.MUL_MESSAGE_FILE_NOT_EIXT\n        };\n        resolve(errResult);\n      });\n    });\n  };\n  /**\n   * 上传文件到服务器\n   * @param {*} url\n   * @param {*} file\n   */\n  _uploadMMSFileHttp(url, file) {\n    return new Promise((resolve, reject) => {\n      const fileName = file.name;\n      const header = {\n        "Content-Type": file.type,\n        Authorization: "Bearer " + _public_baseRequest__WEBPACK_IMPORTED_MODULE_0__["default"].user.token,\n        "File-Name": encodeURIComponent(fileName),\n        "Business-Type": "sds"\n      };\n      _protocol_http__WEBPACK_IMPORTED_MODULE_3__["default"].postFile(url, header, file).then(res => {\n        if (res) {\n          _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].debug("上传多媒体短息成功:", JSON.stringify(res));\n          //TODO url位置是否为固定，建议改成正则\n          const fileUrl = url + res.headers["file-url"].slice(-9);\n          resolve(fileUrl);\n        }\n      }).catch(err => {\n        reject(err);\n        _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].debug("上传多媒体短息失败:", JSON.stringify(err));\n      });\n      // }\n    });\n  }\n  /**\n   * 上传并发送多媒体短信\n   * @param {File} uploadFile 需上传的文件\n   * @param {string} fileUrl 地址\n   * @param {string} basedataID basedata_id\n   * @param {number} flag 是否加密 0 非加密 1 加密\n   */\n  _receiveUploadAddress(uploadFile, fileUrl, basedataID, flag, recipient_alias = undefined) {\n    return new Promise((resolve, reject) => {\n      const {\n        puc_id,\n        system_id,\n        what_id,\n        number_type,\n        time_slot\n      } = (0,_common_utils__WEBPACK_IMPORTED_MODULE_2__.unPackGuid)(basedataID);\n      if (!puc_id || !system_id || !what_id) {\n        _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].warn("basedata getDeviceType error", basedataID);\n        return;\n      }\n      const type = this._getMMSTypeNumByName(uploadFile.name);\n      const param = {\n        ..._public_baseRequest__WEBPACK_IMPORTED_MODULE_0__["default"].getBaseReq(),\n        cmd_name: CMD_SEND_MESSAGE,\n        system_id,\n        sds_type: 1,\n        end2end_encryption_flag: flag,\n        emergency_flag: 0,\n        // 紧急短信标志位 1:紧急, 0:非紧急\n        time_stamp: _public_baseRequest__WEBPACK_IMPORTED_MODULE_0__["default"].getUTCTime(),\n        priority: 0,\n        // 优先级 默认是0，暂时没有用到\n        sender: {\n          puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_0__["default"].user.puc_id,\n          number: _public_baseRequest__WEBPACK_IMPORTED_MODULE_0__["default"].user.user_id,\n          number_type: _public_baseRequest__WEBPACK_IMPORTED_MODULE_0__["default"].user.number_type,\n          number_alias: _public_baseRequest__WEBPACK_IMPORTED_MODULE_0__["default"].user.dispatcher_name || "",\n          time_slot\n        },\n        recipient: {\n          puc_id,\n          number: what_id,\n          number_type: number_type === 4 || number_type === 21 ? 1 : number_type,\n          number_alias: recipient_alias || "",\n          time_slot\n        },\n        system_type: 7,\n        file_parm: {\n          type,\n          Size: uploadFile.size,\n          Filename: uploadFile.name,\n          Tumbnai: null,\n          // C:\\\\Users\\\\170726610\\\\AppData\\\\Roaming\\\\PUC\\\\PUC_Client\\\\MediaMsgReceiverFile\\\\CFCD208495D565EF66E7DFF9F98764DA_D0EB9E1BCE0DDF14F7A564038EAD79A3_thumbnail.png\n          CarryThum: "0",\n          Url: fileUrl // "http://10.161.22.24:16663/frs/5wjcawdj"\n        }\n      };\n\n      _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].debug("lemon-sds--sds_send_media:", JSON.stringify(param));\n      _protocol_http__WEBPACK_IMPORTED_MODULE_3__["default"].postSync(param).then(res => {\n        const fileType = this._getFileExtname(uploadFile.name);\n        // // const fr = new FileReader();\n        // res.file_url = fileUrl;\n        // fr.onloadend = function (e) {\n        //   res.data = e.target.result;\n        //   res.fileType = fileType;\n        //   resolve(res);\n        // };\n        // fr.readAsDataURL(uploadFile);\n        /**\n         * 返给sdk外的响应\n         * @type {MessageMediaSendResp}\n         */\n        const result = {\n          result: res.result,\n          file_url: fileUrl,\n          file_type: fileType,\n          time_stamp: res.time_stamp\n        };\n        resolve(result);\n        _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].debug("lemon-sds--sds_media_send_ack:", JSON.stringify(result));\n      }).catch(err => {\n        reject(err);\n        _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].debug("lemon-sds--sds_media_send_ack:", JSON.stringify(err));\n      });\n    });\n  }\n  // 以下均为工具方法\n  _getFileExtname(filename) {\n    let fileType = "";\n    const filePath = filename;\n    const startIndex = filePath.lastIndexOf(".");\n    if (startIndex !== -1) {\n      fileType = filePath.substring(startIndex, filePath.length).toLowerCase();\n    } else {\n      fileType = "";\n    }\n    return fileType;\n  }\n  _getMMSTypeNumByName(filename) {\n    let typeNum = "";\n    const extName = this._getFileExtname(filename);\n    if (/(.gif|.jpg|.jpeg|.png)$/.test(extName)) {\n      typeNum = this._getMMSType().PICTURE;\n    } else if (/(.mp3|.amr|.ape|.flac|.aac|.wma|.ogg|.wav)$/.test(extName)) {\n      typeNum = this._getMMSType().AUDIO;\n    } else if (/(.wmv|.asf|.asx|.rm|.rmvb|.mpg|.3gp|.mov|.mp4|.m4v|.avi|.mkv|.flv|.webm)$/.test(extName)) {\n      typeNum = this._getMMSType().VIDEO;\n    } else {\n      typeNum = this._getMMSType().DOCUMENT;\n    }\n    return typeNum;\n  }\n\n  /**\n   * MMSType\n   * @returns {{TEXT: int, PICTURE: int, AUDIO: int, VIDEO: int, DOCUMENT: int, RECORD: int, UNKNOWN: int}}\n   */\n  _getMMSType() {\n    return {\n      TEXT: 0,\n      PICTURE: 1,\n      AUDIO: 2,\n      VIDEO: 3,\n      DOCUMENT: 4,\n      RECORD: 5,\n      UNKNOWN: 6\n    };\n  }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new Message());\n\n//# sourceURL=webpack://lemon/./lemon/modules/message.js?'
          );

          /***/
        },

      /***/ "./lemon/modules/monitor.js":
        /*!**********************************!*\
  !*** ./lemon/modules/monitor.js ***!
  \**********************************/
        /***/ (
          __unused_webpack_module,
          __webpack_exports__,
          __webpack_require__
        ) => {
          "use strict";
          eval(
            '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _common_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../common/utils */ "./lemon/common/utils.js");\n/* harmony import */ var _common_log__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/log */ "./lemon/common/log.js");\n/* harmony import */ var _protocol_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../protocol/http */ "./lemon/protocol/http.js");\n/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./common */ "./lemon/modules/common.js");\n/* harmony import */ var _public_constant__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../public/constant */ "./lemon/public/constant.js");\n/* harmony import */ var _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../public/baseRequest */ "./lemon/public/baseRequest.js");\n\n\n\n\n\n\n\n\n/* 获取历史值守列表 */\nconst CMD_GET_MONIT_HISTORY_LIST = \'get_monit_history_list\';\n\n/* 添加/取消值守 */\nconst CMD_MON_MONITOR = \'mon_monitor\';\nconst getAllParam = {\n  cmd_guid: _common__WEBPACK_IMPORTED_MODULE_3__["default"].guid(),\n  cmd_name: CMD_GET_MONIT_HISTORY_LIST,\n  product_name: _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].user.product_name,\n  version: _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].user.version,\n  puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].user.puc_id,\n  user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].user.user_id,\n  realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].user.realm\n};\nconst changeParam = {\n  cmd_name: CMD_MON_MONITOR,\n  cmd_guid: \'\',\n  monitor_level: 104,\n  // [ 104:全监听; 8:短信; 32:语音; 64:视频 ]\n  monitor_type: _public_constant__WEBPACK_IMPORTED_MODULE_4__.MONITOR_TYPE.SUBSCRIBE,\n  // [ 0:取消; 1:监听 ]\n  user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].user.user_id,\n  user_puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].user.user_puc_id,\n  user_system_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].getBaseReq().system_id,\n  user_type: _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].user.number_type,\n  product_name: _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].user.product_name,\n  version: _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].user.version,\n  realm: \'\',\n  number: \'\',\n  number_type: \'\',\n  puc_id: \'\',\n  system_id: \'\'\n};\n/**\r\n * 监听值守功能，客户端请求服务端监听一堆对象后，在客户端离线后，服务端会取消监听所有对象，否则调度员下线后网关还一直在给推消息过来，浪费资源\r\n * 但是监听对象的列表还在，只是没有了监听关系，所以在上线后需要重新拉取监听对象的列表，再次逐一建立监听关系\r\n * \r\n * 切记：动态组在基础数据中的number_type是4，但是在值守业务中的要改成1，服务端就是这样搞的，没办法\r\n */\nclass monitor {\n  constructor() {\n    /* 添加/删除事件回调 */\n    this.changeMap = new Map();\n\n    /* 点亮/熄灭事件回调 */\n    this.changeGroupMemberMap = new Map();\n\n    /* 暂存参数 */\n    this.changeParamMap = new Map();\n\n    /* 暂存cmd_guid, 为了匹配basedata_id */\n    this.cmdGuidMap = new Map();\n  }\n\n  /**\r\n   * 回调处理通用逻辑\r\n   * @param func\r\n   * @param param\r\n   * @private\r\n   */\n  _safeOnCallback(func, param) {\n    try {\n      func(param);\n    } catch (error) {\n      _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].error(error);\n    }\n  }\n\n  /**\r\n   * 初始化值守列表\r\n   * 1) 获取待值守列表\r\n   * 2) 遍历下发监控事件\r\n   */\n  initQueue() {\n    _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].debug("SDK monitor init queue begin.");\n    getAllParam.product_name = _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].user.product_name;\n    getAllParam.version = _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].user.version;\n    getAllParam.puc_id = _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].user.puc_id;\n    getAllParam.user_id = _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].user.user_id;\n    getAllParam.realm = _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].user.realm;\n    _protocol_http__WEBPACK_IMPORTED_MODULE_2__["default"].postSync(getAllParam).then(resp => {\n      _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].debug("SDK monitor init queue resp", resp);\n      if (resp.list) {\n        for (let i = 0, len = resp.list.length; i < len; i += 1) {\n          let info = resp.list[i];\n          info.src = _public_constant__WEBPACK_IMPORTED_MODULE_4__.MONITOR_SRC.INIT;\n          info.name = info.Alias;\n          info.monitor_type = _public_constant__WEBPACK_IMPORTED_MODULE_4__.MONITOR_TYPE.SUBSCRIBE;\n          info.number = info.Number;\n          info.basedata_id = (0,_common_utils__WEBPACK_IMPORTED_MODULE_0__.genLocalGuid)({\n            puc_id: info.PucId,\n            system_id: info.SystemId,\n            number: info.Number,\n            number_type: info.NumberType,\n            time_slot: info.TimeSlot,\n            realm: info.Realm\n          }, \'number\');\n          this.change(info);\n        }\n      }\n      _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].debug("SDK monitor init queue end.");\n    }).catch(err => {\n      _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].error("SDK monitor init queue error ", err);\n    });\n  }\n\n  /**\r\n   * 添加/删除 对象\r\n   * @param {object} data 基础信息id\r\n   * @param {string} data.basedata_id 基础信息id\r\n   * @param {string} [data.number] 值守对象的号码\r\n   * @param {string} data.monitor_type 0:取消值守; 1:订阅值守\r\n   * @param {string} [data.name] 值守对象的别名\r\n   * @param {string} [data.src] 接口调用来源，0初始化，1资源数，2信道监控，此参数不对外暴露，作为过渡使用\r\n   * @param {string} [data.state] 值守对象的状态，0在线，1离线，此参数不对外暴露，作为过渡使用\r\n   * @param args 扩展参数\r\n   */\n  change(data) {\n    _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].info("SDK monitor change,data ", JSON.stringify(data));\n    return new Promise((resolve, reject) => {\n      if (!data || !data.basedata_id) {\n        resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_4__.ERROR_CODE.PARAM_INVALID\n        });\n        return;\n      }\n      let info = {};\n      const ids = (0,_common_utils__WEBPACK_IMPORTED_MODULE_0__.unPackGuid)(data.basedata_id);\n      // 为什么要改，查看类注释说明\n      if ((ids === null || ids === void 0 ? void 0 : ids.number_type) === _public_constant__WEBPACK_IMPORTED_MODULE_4__.NUMBER_TYPE.DYNAMIC_GROUP) {\n        ids.number_type = _public_constant__WEBPACK_IMPORTED_MODULE_4__.NUMBER_TYPE.GROUP;\n      }\n      changeParam.puc_id = ids === null || ids === void 0 ? void 0 : ids.puc_id;\n      changeParam.system_id = ids !== null && ids !== void 0 && ids.system_id ? ids === null || ids === void 0 ? void 0 : ids.system_id : _public_constant__WEBPACK_IMPORTED_MODULE_4__.DEFAULT_SYS_ID;\n      changeParam.number = data.number ? data.number : ids === null || ids === void 0 ? void 0 : ids.what_id;\n      changeParam.number_type = ids === null || ids === void 0 ? void 0 : ids.number_type;\n      changeParam.time_slot = ids === null || ids === void 0 ? void 0 : ids.time_slot;\n      changeParam.realm = ids !== null && ids !== void 0 && ids.realm ? ids === null || ids === void 0 ? void 0 : ids.realm : _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].user.realm;\n      changeParam.monitor_type = data.monitor_type;\n      changeParam.cmd_guid = _common__WEBPACK_IMPORTED_MODULE_3__["default"].guid();\n      changeParam.user_id = _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].user.user_id;\n      changeParam.user_puc_id = _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].getBaseReq().user_puc_id;\n      changeParam.user_system_id = _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].getBaseReq().system_id;\n      changeParam.user_type = _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].user.number_type;\n      changeParam.product_name = _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].user.product_name;\n      changeParam.version = _public_baseRequest__WEBPACK_IMPORTED_MODULE_5__["default"].user.version;\n      if (data.monitor_type === _public_constant__WEBPACK_IMPORTED_MODULE_4__.MONITOR_TYPE.UNSUBSCRIBE) {\n        info = this.changeParamMap.get(this.cmdGuidMap.get(data.basedata_id)); //出现 info 为undefined\n        if (!info) {\n          _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].debug("change PARAM_INVALID");\n          return resolve({\n            result: _public_constant__WEBPACK_IMPORTED_MODULE_4__.ERROR_CODE.PARAM_INVALID\n          });\n        }\n        info.monitor_type = data.monitor_type;\n        this.changeParamMap.set(changeParam.cmd_guid, info);\n        this.changeParamMap.delete(this.cmdGuidMap.get(data.basedata_id));\n        this.cmdGuidMap.delete(data.basedata_id);\n      } else {\n        info = {\n          basedata_id: data.basedata_id,\n          src: data.src,\n          name: data.name,\n          state: data.state === 0 ? data.state : _public_constant__WEBPACK_IMPORTED_MODULE_4__.MONITOR_STATE.ONLINE,\n          monitor_type: data.monitor_type,\n          number: data.number ? data.number : ids === null || ids === void 0 ? void 0 : ids.what_id\n        };\n        if (data.IsDev) {\n          info.state = data.Online === \'1\' ? _public_constant__WEBPACK_IMPORTED_MODULE_4__.MONITOR_STATE.ONLINE : _public_constant__WEBPACK_IMPORTED_MODULE_4__.MONITOR_STATE.OFFLINE;\n        }\n        this.changeParamMap.set(changeParam.cmd_guid, info);\n      }\n      _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].debug("change changeParam", JSON.stringify(changeParam));\n      _protocol_http__WEBPACK_IMPORTED_MODULE_2__["default"].postSync(changeParam).then(resp => {\n        // 没有超时的推送会走这里。这里也需要已回调的方式发出去。 \n\n        _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].debug("change resp", JSON.stringify(resp));\n        this.onChangeEvent(resp);\n      }).catch(err => {\n        _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].debug("error err", JSON.stringify(err));\n        info = this.changeParamMap.get(err.cmd_guid);\n        _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].debug("error info", JSON.stringify(info));\n        if (info) {\n          info.result = _public_constant__WEBPACK_IMPORTED_MODULE_4__.ERROR_CODE.MONITOR_FAIL;\n          this.changeMap.forEach(func => {\n            _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].debug("SDK monitor onChangeEvent before cb", JSON.stringify(info));\n            this._safeOnCallback(func, info);\n          });\n        }\n      });\n      resolve({\n        result: 0\n      });\n    });\n  }\n\n  /**\r\n   * 订阅添加/删除回调\r\n   * @param callback\r\n   * @returns {string|boolean}\r\n   */\n  addChangeListener(callback) {\n    if (!callback) {\n      _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].error(\'SDK monitor addChangeMonitorListener error.\');\n      return false;\n    }\n    const callbackId = _common__WEBPACK_IMPORTED_MODULE_3__["default"].guid();\n    this.changeMap.set(callbackId, callback);\n    return callbackId;\n  }\n\n  /**\r\n   * 触发回调方法\r\n   * @param data\r\n   */\n  onChangeEvent(data) {\n    if (!data.cmd_guid) {\n      _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].warn("SDK monitor onChangeEvent warn no cmd_guid", JSON.stringify(data));\n      return;\n    }\n    let info = this.changeParamMap.get(data.cmd_guid);\n    _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].debug("onChangeEvent info", JSON.stringify(info));\n    _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].debug("onChangeEvent data", JSON.stringify(data));\n    if (!info) {\n      _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].warn("SDK monitor onChangeEvent warn no staging info", JSON.stringify(data));\n      return;\n    }\n    if (data.monitor_type === _public_constant__WEBPACK_IMPORTED_MODULE_4__.MONITOR_TYPE.SUBSCRIBE) {\n      this.cmdGuidMap.set(info.basedata_id, data.cmd_guid);\n    }\n    if (data.monitor_type === _public_constant__WEBPACK_IMPORTED_MODULE_4__.MONITOR_TYPE.UNSUBSCRIBE) {\n      delete info.name;\n      delete info.src;\n      delete info.state;\n    }\n    info.result = data.result;\n    if (data.result === 1) {\n      //值守失败\n      info.result = _public_constant__WEBPACK_IMPORTED_MODULE_4__.ERROR_CODE.MONITOR_FAIL;\n    } else if (data.result === 2) {\n      //设备被删除\n      info.result = _public_constant__WEBPACK_IMPORTED_MODULE_4__.ERROR_CODE.MONITOR_NUMBER_DELETE;\n    }\n    this.changeMap.forEach(func => {\n      _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].debug("SDK monitor onChangeEvent before cb", info);\n      this._safeOnCallback(func, info);\n    });\n    if (data.monitor_type === _public_constant__WEBPACK_IMPORTED_MODULE_4__.MONITOR_TYPE.UNSUBSCRIBE) {\n      this.changeParamMap.delete(data.cmd_guid);\n    }\n  }\n\n  /**\r\n   * 删除change订阅\r\n   * @param callbackId 标识符\r\n   */\n  removeChangeListener(callbackId) {\n    if (this.changeMap.has(callbackId)) {\n      this.changeMap.delete(callbackId);\n    }\n  }\n\n  /**\r\n   * 订阅群组成员点亮/熄灭回调\r\n   * @param callback\r\n   * @returns {string|boolean}\r\n   */\n  addChangeGroupMemberListener(callback) {\n    if (!callback) {\n      _common_log__WEBPACK_IMPORTED_MODULE_1__["default"].error(\'SDK monitor addChangeGroupMemberListener error.\');\n      return false;\n    }\n    const callbackId = _common__WEBPACK_IMPORTED_MODULE_3__["default"].guid();\n    this.changeGroupMemberMap.set(callbackId, callback);\n    return callbackId;\n  }\n\n  /**\r\n   * 触发回调方法\r\n   * @param data\r\n   */\n  onChangeGroupMemberEvent(type, data) {\n    let info = {\n      call_id: data.call_id,\n      type: type,\n      basedata_id: (0,_common_utils__WEBPACK_IMPORTED_MODULE_0__.genLocalGuid)(data.callee, \'number\')\n    };\n    this.changeGroupMemberMap.forEach(func => {\n      this._safeOnCallback(func, info);\n    });\n  }\n\n  /**\r\n   * 删除changeGroupMember订阅\r\n   * @param callbackId 标识符\r\n   */\n  removeChangeGroupMemberListener(callbackId) {\n    if (this.changeGroupMemberMap.has(callbackId)) {\n      this.changeGroupMemberMap.delete(callbackId);\n    }\n  }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new monitor());\n\n//# sourceURL=webpack://lemon/./lemon/modules/monitor.js?'
          );

          /***/
        },

      /***/ "./lemon/modules/reportForm.js":
        /*!*************************************!*\
  !*** ./lemon/modules/reportForm.js ***!
  \*************************************/
        /***/ (
          __unused_webpack_module,
          __webpack_exports__,
          __webpack_require__
        ) => {
          "use strict";
          eval(
            '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _common_log__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/log */ "./lemon/common/log.js");\n/* harmony import */ var _protocol_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../protocol/http */ "./lemon/protocol/http.js");\n/* harmony import */ var _public_constant__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../public/constant */ "./lemon/public/constant.js");\n/* harmony import */ var _common_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/utils */ "./lemon/common/utils.js");\n/* harmony import */ var _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../public/baseRequest */ "./lemon/public/baseRequest.js");\n/* harmony import */ var _signin__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./signin */ "./lemon/modules/signin.js");\n/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./common */ "./lemon/modules/common.js");\n\n\n\n\n\n\n\n\n/**\n * 消息记录查询参数对象\n * @typedef {object} MsgRecordParams\n * @property  {number} msg_type  消息类型   0:普通文本短信,  1:多媒体短信  2:状态短信   3:回执短信  4 :警情短信  5 : 执法记录仪配置与查询  6:透传短信  11:位置短信 100:重点人员上报\n * @property  {number} msg_state   消息发送结果  2：发送成功，3：发送失败\n * @property  {number} receiver_type  短信被叫类型  0：个发，1：组发\n * @property  {string} sender_basedata_id  发送方的basedata_id\n * @property  {string} receiver_basedata_id  接收方的basedata_id\n * @property  {number} receiver_type  短信被叫类型  0：个发，1：组发\n * @property  {string} start_time  查询开始时间  必填 时间格式参考示例，UTC时间。\n * @property  {string} end_time  查询结束时间 必填 时间格式参考示例，UTC时间。\n * @property  {number} page_size  查询结束时间  时间格式参考示例，UTC时间。\n * @property  {number} page_index  查询结束时间  时间格式参考示例，UTC时间。\n */\n\n/**\n * 消息记录 结果 对象\n * @typedef {object} MsgRecordResult\n * @property  {number} result 响应码，0成功 其他是失败\n * @property  {number} total_number 总的数据\n * @property  {Array.<msgRecord>} record_list 消息记录对象列表 \n */\n\n/**\n * 消息对象\n * @typedef {object} MsgRecord\n * @property  {string} sender 发送者号码\n * @property  {string} sender_alias 发送者别名\n * @property  {string} receiver 接收者号码\n * @property  {string} receiver_alias 接收者别名\n * @property  {string} sender_alias 发送者别名\n * @property  {string} monitor_account  监听者账号\n * @property  {string} send_time  发送时间 时间格式参考示例，UTC时间\n * @property  {number} msg_type  消息类型  0:普通短信,  1:多媒体短信\n * @property  {number} msg_state  消息发送结果  2：发送成功，3：发送失败\n * @property  {number} receiver_type  短信被叫类型  0：个发，1：组发\n * @property  {number} is_encryption  是否加密  0是非加密 1是加密消息\n * @property  {string} msg_content 消息内容 \n */\n\n/**\n * 记录数量结果 对象\n * @typedef {object} RecordCountResult\n * @property  {number} result 响应码，0成功 其他是失败\n * @property  {number} total_number 总的数据条数\n */\n\n/**\n * 呼叫记录查询参数对象\n * @typedef {object} CallRecordParams\n * @property  {number} call_type  呼叫类型  定义参考呼叫模块的呼叫类型\n * @property  {number} call_priority   呼叫级别  0是普通呼叫 1是紧急呼叫\n * @property  {string} caller_basedata_id  主叫的basedata_id\n * @property  {string} callee_basedata_id  被叫的basedata_id\n * @property  {string} start_time  查询开始时间  必填 时间格式参考示例，UTC时间。\n * @property  {string} end_time  查询结束时间 必填 时间格式参考示例，UTC时间。\n * @property  {number} page_size  查询结束时间  时间格式参考示例，UTC时间。\n * @property  {number} page_index  查询结束时间  时间格式参考示例，UTC时间。\n */\n\n/**\n * 呼叫记录 结果 对象\n * @typedef {object} CallRecordResult\n * @property  {number} result 响应码，0成功 其他是失败\n * @property  {number} total_number 总的数据条数\n * @property  {Array.<CallRecord>} record_list 消息记录对象列表 \n */\n\n/**\n * 呼叫记录信息 对象\n * @typedef {object} CallRecord\n * @property  {string} caller 主叫号码\n * @property  {string} caller_alias 主叫别名\n * @property  {string} callee 被叫号码\n * @property  {string} callee_alias 被叫别名\n * @property  {number} call_type 定义参考呼叫模块的呼叫类型\n * @property  {number} call_priority  0是普通呼叫 1是紧急呼叫\n * @property  {number} duplex_mode  0是半双工  1是全双工\n * @property  {number} is_encryption  0是非加密 1是加密呼叫\n * @property  {string} setup_time  呼叫发起时间 时间格式参考示例，UTC时间\n * @property  {string} start_time  呼叫开始时间  时间格式参考示例，UTC时间\n * @property  {string} end_time  呼叫结束时间   时间格式参考示例，UTC时间\n * @property  {string} sound_file 录音文件名称   如果为空即该呼叫记录没有录音文件\n */\n/**\n * 上下线查询参数对象\n * @typedef {object} RrsRecordParams\n * @property  {number} status   终端状态 0：下线，1：上线\n * @property  {string} terminal_basedata_id  终端的basedata_id \n * @property  {string} start_time  查询开始时间  必填 时间格式参考示例，UTC时间。\n * @property  {string} end_time  查询结束时间 必填 时间格式参考示例，UTC时间。\n * @property  {number} page_size  查询结束时间  时间格式参考示例，UTC时间。\n * @property  {number} page_index  查询结束时间  时间格式参考示例，UTC时间。\n */\n\n/**\n * 上下线记录 结果 对象\n * @typedef {object} RrsRecordResult\n * @property  {number} result 响应码，0成功 其他是失败\n * @property  {number} total_number 总的数据\n * @property  {Array.<RrsRecord>} record_list 消息记录对象列表 \n */\n\n/**\n * 上下线记录对象\n * @typedef {object} RrsRecord\n * @property  {string} terminal_id 终端号码\n * @property  {string} terminal_alias 主叫别名\n * @property  {number} terminal_type 终端类型  0 普通终端 1 Roip终端  2调度台\n * @property  {number} status 终端状态 非ROIP设备状态  0：下线，1：上线，  ROIP设备状态 0-下线；1-窄带上线；2-宽带上线；3-宽窄带同时上线\n * @property  {string} regist_time 上下线时的时间   时间格式参考示例，UTC时间\n */\n\n/**\n * 紧急告警查询参数对象\n * @typedef {object} EmgAlarmRecordParams\n * @property  {number} alarm_type  告警类型  0:无类型 ,1:普通告警    2:告警带呼叫(无Gps) , 3:GPS告警    4：告警带Gps和呼叫5：紧急呼叫   6：显式告警7：隐式告警8：倒放报警9：高温报警10：遮挡报警11：静止报警12：拆电报警\n * @property  {number} alarm_status  告警状态  0：取消告警，1：标识告警\n * @property  {string} device_basedata_id  终端设备的basedata_id \n * @property  {string} start_time  查询开始时间  必填 时间格式参考示例，UTC时间。\n * @property  {string} end_time  查询结束时间 必填 时间格式参考示例，UTC时间。\n * @property  {number} page_size  查询结束时间  时间格式参考示例，UTC时间。\n * @property  {number} page_index  查询结束时间  时间格式参考示例，UTC时间。\n */\n\n/**\n * 紧急告警记录 结果 对象\n * @typedef {object} EmgAlarmRecordResult\n * @property  {number} result 响应码，0成功 其他是失败\n * @property  {number} total_number 总的数据\n * @property  {Array.<EmgAlarmRecord>} record_list 消息记录对象列表 \n */\n\n/**\n * 紧急告警记录对象\n * @typedef {object} EmgAlarmRecord\n * @property  {string} device_number  设备号码\n * @property  {string} device_alias 设备别名\n * @property  {string} alarm_status 告警状态  0：取消告警，1：标识告警\n * @property  {string} alarm_time 告警时间 时间格式参考示例，UTC时间\n * @property  {number} alarm_type  告警类型  0:无类型 ,1:普通告警    2:告警带呼叫(无Gps) , 3:GPS告警    4：告警带Gps和呼叫5：紧急呼叫    6：显式告警7：隐式告警8：倒放报警9：高温报警10：遮挡报警11：静止报警12：拆电报警\n * @property  {string} handle_alarm_time 取消告警的时间   时间格式参考示例，UTC时间\n * @property  {string} receive_alarm_time 接收告警的时间   时间格式参考示例，UTC时间\n */\n\n/**\n * 越区告警查询参数对象\n * @typedef {object} GeofencingAlarmRecordParams\n * @property  {number} alarm_type  告警类型  0：离开告警，1：进入告警\n * @property  {number} alarm_status  告警状态  0：取消告警，1：产生告警\n * @property  {string} device_basedata_id  终端设备的basedata_id \n * @property  {string} start_time  查询开始时间  必填 时间格式参考示例，UTC时间。\n * @property  {string} end_time  查询结束时间 必填 时间格式参考示例，UTC时间。\n * @property  {number} page_size  查询结束时间  时间格式参考示例，UTC时间。\n * @property  {number} page_index  查询结束时间  时间格式参考示例，UTC时间。\n */\n\n/**\n * 越区告警查记录 结果 对象\n * @typedef {object} GeofencingAlarmRecordResult\n * @property  {number} result 响应码，0成功 其他是失败\n * @property  {number} total_number 总的数据\n * @property  {Array.<GeofencingAlarmRecord>} record_list 消息记录对象列表 \n */\n\n/**\n * 越区告警查记录对象\n * @typedef {object} GeofencingAlarmRecord\n * @property  {string} device_number  设备号码\n * @property  {string} device_alias 设备别名\n * @property  {string} alarm_status 告警状态  0：取消告警，1：产生告警\n * @property  {string} alarm_time 告警时间 时间格式参考示例，UTC时间\n * @property  {number} alarm_type  告警类型   0：离开告警，1：进入告警\n * @property  {string} region_name  区域名称\n * @property  {string} rule_name  规则名称\n * @property  {string} cancel_alarm_time  取消告警时间  时间格式参考示例，UTC时间\n */\n\n/**\n * 超速告警查询参数对象\n * @typedef {object} SpeedAlarmRecordParams\n * @property  {number} alarm_type  告警类型     //本期请暂时写死0，预留可选条件，本期不建议在客户端上作为可选条件输入\n * @property  {number} alarm_status  告警状态  0：取消告警，1：正在告警\n * @property  {string} device_basedata_id  终端设备的basedata_id \n * @property  {string} start_time  查询开始时间  必填 时间格式参考示例，UTC时间。\n * @property  {string} end_time  查询结束时间 必填 时间格式参考示例，UTC时间。\n * @property  {number} page_size  查询结束时间  时间格式参考示例，UTC时间。\n * @property  {number} page_index  查询结束时间  时间格式参考示例，UTC时间。\n */\n\n/**\n * 超速告警查记录 结果 对象\n * @typedef {object} SpeedAlarmRecordResult\n * @property  {number} result 响应码，0成功 其他是失败\n * @property  {number} total_number 总的数据\n * @property  {Array.<SpeedAlarmRecord>} record_list 超速告警记录对象列表 \n */\n\n/**\n * 超速告警查记录对象\n * @typedef {object} SpeedAlarmRecord\n * @property  {string} device_number  设备号码\n * @property  {string} device_alias 设备别名\n * @property  {string} alarm_status 告警状态  0：取消告警，1：产生告警\n * @property  {string} alarm_time 告警时间 时间格式参考示例，UTC时间\n * @property  {number} alarm_type  告警类型   服务端不支持 ，这个先不对外开发\n * @property  {string} overspeed_speed  超速时的速度 单位是海里/小时\n * @property  {string} rule_name  规则名称\n * @property  {string} cancel_alarm_time  取消告警时间  时间格式参考示例，UTC时间\n */\n\n/**\n * 回呼请求查询参数对象\n * @typedef {object} CallBackRecordParams\n * @property  {string} device_basedata_id  终端设备的basedata_id \n * @property  {string} callback_code  回呼状态码\n * @property  {string} start_time  查询开始时间  必填 时间格式参考示例，UTC时间。\n * @property  {string} end_time  查询结束时间 必填 时间格式参考示例，UTC时间。\n * @property  {number} page_size  查询结束时间  时间格式参考示例，UTC时间。\n * @property  {number} page_index  查询结束时间  时间格式参考示例，UTC时间。\n */\n\n/**\n * 回呼请求记录 结果 对象\n * @typedef {object} CallBackRecordResult\n * @property  {number} result 响应码，0成功 其他是失败\n * @property  {number} total_number 总的数据\n * @property  {Array.<CallBackRecord>} record_list 回呼请求对象列表 \n */\n\n/**\n *回呼请求记录对象\n * @typedef {object} CallBackRecord\n * @property  {string} device_number  设备号码\n * @property  {string} device_alias 设备别名\n * @property  {string} callback_time  回呼时间  时间格式参考示例，UTC时间\n * @property  {string} callback_code  回呼状态码\n * @property  {string} callback_handler 回呼处理用户名\n * @property  {string} callback_handle_time  回呼处理时间\n */\n\nclass ReportForm {\n  constructor() {}\n\n  /**\n  * 查询消息报表\n  * @param {MsgRecordParams} msgRecordParams   消息记录查询参数对象\n  * @returns {Promise.<msgRecordResult>}\n  */\n  queryMsgRecord(msgRecordParams) {\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug("queryMsgRecord", JSON.stringify(msgRecordParams));\n    return new Promise((resolve, reject) => {\n      /**\n        * @type {MsgRecordParams}\n        */\n      const fetchDataParam = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.VERSION,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_6__["default"].guid(),\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.puc_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.realm,\n        cmd_name: \'query_sds_log\',\n        count_of_page: msgRecordParams.page_size,\n        page_index: msgRecordParams.page_index,\n        batch: 0,\n        pageStatus: true\n      };\n      if (msgRecordParams.start_time) {\n        fetchDataParam.start_time = msgRecordParams.start_time;\n      }\n      if (msgRecordParams.end_time) {\n        fetchDataParam.end_time = msgRecordParams.end_time;\n      }\n      if ((0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.isNotEmpty)(msgRecordParams.msg_type)) {\n        // 可以为0\n        fetchDataParam.sds_type = msgRecordParams.msg_type;\n      }\n      if ((0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.isNotEmpty)(msgRecordParams.msg_state)) {\n        fetchDataParam.sds_state = msgRecordParams.msg_state;\n      }\n      if ((0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.isNotEmpty)(msgRecordParams.receiver_type)) {\n        fetchDataParam.receiver_type = msgRecordParams.receiver_type;\n      }\n      // msgRecordParams.sender_basedata_id = \'00173-356-32820801-0--puc.com\';\n      if (msgRecordParams.sender_basedata_id) {\n        const senderInfo = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(msgRecordParams.sender_basedata_id); //转换\n        fetchDataParam.caller_system_id = senderInfo.system_id;\n        fetchDataParam.caller_number = senderInfo.what_id;\n        fetchDataParam.caller_type = senderInfo.number_type;\n      }\n\n      // msgRecordParams.receiver_basedata_id = \'00173-356-32820801-0--puc.com\';\n      if (msgRecordParams.receiver_basedata_id) {\n        const receiverInfo = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(msgRecordParams.receiver_basedata_id); //转换\n        fetchDataParam.called_system_id = receiverInfo.system_id;\n        fetchDataParam.called_number = receiverInfo.what_id;\n        fetchDataParam.called_type = receiverInfo.number_type;\n      }\n      _protocol_http__WEBPACK_IMPORTED_MODULE_1__["default"].postSync(fetchDataParam).then(resp => {\n        _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug("queryMsgRecord resp", JSON.stringify(resp));\n        /**\n        * @type {MsgRecordResult}\n        */\n        const msgRecordResult = {\n          result: resp.result,\n          total_number: resp.page_info ? resp.page_info.total : 0,\n          record_list: []\n        };\n        if (resp.result === 0) {\n          var _resp$sds_list;\n          (_resp$sds_list = resp.sds_list) === null || _resp$sds_list === void 0 ? void 0 : _resp$sds_list.forEach(element => {\n            /**\n             * @type {MsgRecord}\n             */\n            const record = {\n              sender: element.sender,\n              sender_alias: element.sender_alias,\n              receiver: element.receiver,\n              receiver_alias: element.receiver_alias,\n              monitor_account: element.dispatcher_account,\n              send_time: element.sds_time,\n              msg_type: element.sds_type,\n              msg_state: element.sds_state,\n              receiver_type: this._getMsgReceiverType(element.receiver_number_type),\n              is_encryption: element.isencrypt,\n              msg_content: element.sds_content\n            };\n            msgRecordResult.record_list.push(record);\n          });\n        }\n        resolve(msgRecordResult);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  /**\n  * 只查询消息报表的数量\n  * @param {MsgRecordParams} msgRecordParams   消息记录查询参数对象\n  * @returns {Promise.<RecordCountResult>}\n  */\n  queryMsgRecordCount(msgRecordParams) {\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug("queryMsgRecordCount", JSON.stringify(msgRecordParams));\n    return new Promise((resolve, reject) => {\n      /**\n        * @type {MsgRecordParams}\n        */\n      const fetchDataParam = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.VERSION,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_6__["default"].guid(),\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.puc_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.realm,\n        cmd_name: \'query_sds_log_count\'\n      };\n      if (msgRecordParams.start_time) {\n        fetchDataParam.start_time = msgRecordParams.start_time;\n      }\n      if (msgRecordParams.end_time) {\n        fetchDataParam.end_time = msgRecordParams.end_time;\n      }\n      if ((0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.isNotEmpty)(msgRecordParams.msg_type)) {\n        // 可以为0\n        fetchDataParam.sds_type = msgRecordParams.msg_type;\n      }\n      if ((0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.isNotEmpty)(msgRecordParams.msg_state)) {\n        fetchDataParam.sds_state = msgRecordParams.msg_state;\n      }\n      if ((0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.isNotEmpty)(msgRecordParams.receiver_type)) {\n        fetchDataParam.receiver_type = msgRecordParams.receiver_type;\n      }\n      // msgRecordParams.sender_basedata_id = \'00173-356-32820801-0--puc.com\';\n      if (msgRecordParams.sender_basedata_id) {\n        const senderInfo = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(msgRecordParams.sender_basedata_id); //转换\n        fetchDataParam.caller_system_id = senderInfo.system_id;\n        fetchDataParam.caller_number = senderInfo.what_id;\n        fetchDataParam.caller_type = senderInfo.number_type;\n      }\n\n      // msgRecordParams.receiver_basedata_id = \'00173-356-32820801-0--puc.com\';\n      if (msgRecordParams.receiver_basedata_id) {\n        const receiverInfo = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(msgRecordParams.receiver_basedata_id); //转换\n        fetchDataParam.called_system_id = receiverInfo.system_id;\n        fetchDataParam.called_number = receiverInfo.what_id;\n        fetchDataParam.called_type = receiverInfo.number_type;\n      }\n      _protocol_http__WEBPACK_IMPORTED_MODULE_1__["default"].postSync(fetchDataParam).then(resp => {\n        _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug("queryMsgRecordCount resp", JSON.stringify(resp));\n        /**\n        * @type {RecordCountResult}\n        */\n        const msgRecordCountResult = {\n          result: resp.result,\n          total_number: resp.record_count\n        };\n        resolve(msgRecordCountResult);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n  _getMsgReceiverType(type) {\n    if (type === _public_constant__WEBPACK_IMPORTED_MODULE_2__.NUMBER_TYPE.INDIVIDUAL || type === _public_constant__WEBPACK_IMPORTED_MODULE_2__.NUMBER_TYPE.EXTERNAL || type === _public_constant__WEBPACK_IMPORTED_MODULE_2__.NUMBER_TYPE.ALL_CALL || type === _public_constant__WEBPACK_IMPORTED_MODULE_2__.NUMBER_TYPE.DISPATCHER || type === _public_constant__WEBPACK_IMPORTED_MODULE_2__.NUMBER_TYPE.DC || type === _public_constant__WEBPACK_IMPORTED_MODULE_2__.NUMBER_TYPE.DUAL_MODEL || type === _public_constant__WEBPACK_IMPORTED_MODULE_2__.NUMBER_TYPE.RECORD || type === _public_constant__WEBPACK_IMPORTED_MODULE_2__.NUMBER_TYPE.WEB_USER || type === _public_constant__WEBPACK_IMPORTED_MODULE_2__.NUMBER_TYPE.ROIP_INDIVIDUAL) {\n      return 0;\n    }\n    if (type === _public_constant__WEBPACK_IMPORTED_MODULE_2__.NUMBER_TYPE.GROUP || type === _public_constant__WEBPACK_IMPORTED_MODULE_2__.NUMBER_TYPE.DYNAMIC_GROUP || type === _public_constant__WEBPACK_IMPORTED_MODULE_2__.NUMBER_TYPE.CROSS_PATCH || type === _public_constant__WEBPACK_IMPORTED_MODULE_2__.NUMBER_TYPE.CONFERENCE || type === _public_constant__WEBPACK_IMPORTED_MODULE_2__.NUMBER_TYPE.DISPATCHER_GROUP || type === _public_constant__WEBPACK_IMPORTED_MODULE_2__.NUMBER_TYPE.SYS_PATCH || type === _public_constant__WEBPACK_IMPORTED_MODULE_2__.NUMBER_TYPE.ROIP_GROUP || type === _public_constant__WEBPACK_IMPORTED_MODULE_2__.NUMBER_TYPE.ROAM_GROUP || type === _public_constant__WEBPACK_IMPORTED_MODULE_2__.NUMBER_TYPE.CROSS_SYS_GROUP) {\n      return 1;\n    }\n  }\n\n  /**\n   * 查询呼叫报表\n   * @param {CallRecordParams} callRecordParams   呼叫报表查询参数对象\n   * @returns {Promise.<CallRecordResult>}\n   */\n  queryCallRecord(callRecordParams) {\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug("queryCallRecord", JSON.stringify(callRecordParams));\n    return new Promise((resolve, reject) => {\n      /**\n        * @type {CallRecordParams}\n        */\n      const fetchDataParam = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.VERSION,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_6__["default"].guid(),\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.puc_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.realm,\n        cmd_name: \'query_call_log\',\n        count_of_page: callRecordParams.page_size,\n        page_index: callRecordParams.page_index,\n        batch: 0,\n        pageStatus: true\n      };\n      if (callRecordParams.start_time) {\n        fetchDataParam.start_time = callRecordParams.start_time;\n      }\n      if (callRecordParams.end_time) {\n        fetchDataParam.end_time = callRecordParams.end_time;\n      }\n      if ((0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.isNotEmpty)(callRecordParams.call_type)) {\n        // 可以为0\n        fetchDataParam.call_type = callRecordParams.call_type;\n      }\n      if ((0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.isNotEmpty)(callRecordParams.call_priority)) {\n        fetchDataParam.call_priority = callRecordParams.call_priority === 0 ? 0 : 15;\n      }\n\n      // callRecordParams.caller_basedata_id = \'00173-356-32820801-0--puc.com\';\n      if (callRecordParams.caller_basedata_id) {\n        const callerInfo = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(callRecordParams.caller_basedata_id); //转换\n        fetchDataParam.caller_system_id = callerInfo.system_id;\n        fetchDataParam.caller_number = callerInfo.what_id;\n        fetchDataParam.caller_number_type = callerInfo.number_type;\n      }\n\n      // callRecordParams.callee_basedata_id = \'00173-356-32820801-0--puc.com\';\n      if (callRecordParams.callee_basedata_id) {\n        const calleeInfo = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(callRecordParams.callee_basedata_id); //转换\n        fetchDataParam.called_system_id = calleeInfo.system_id;\n        fetchDataParam.called_number = calleeInfo.what_id;\n        fetchDataParam.called_number_type = calleeInfo.number_type;\n      }\n\n      // 这里要强制改，不然查不到\n      if ((callRecordParams === null || callRecordParams === void 0 ? void 0 : callRecordParams.caller_number_type) === 4) {\n        callRecordParams.caller_number_type = 1;\n      }\n      if ((callRecordParams === null || callRecordParams === void 0 ? void 0 : callRecordParams.called_number_type) === 4) {\n        callRecordParams.called_number_type = 1;\n      }\n      _protocol_http__WEBPACK_IMPORTED_MODULE_1__["default"].postSync(fetchDataParam).then(resp => {\n        var _resp$calllog_list;\n        _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug("queryCallRecord resp", JSON.stringify(resp));\n        /**\n        * @type {CallRecordResult}\n        */\n        const callRecordResult = {\n          result: resp.result,\n          total_number: resp !== null && resp !== void 0 && resp.page_info ? resp.page_info.total : 0,\n          record_list: []\n        };\n        resp === null || resp === void 0 ? void 0 : (_resp$calllog_list = resp.calllog_list) === null || _resp$calllog_list === void 0 ? void 0 : _resp$calllog_list.forEach(element => {\n          /**\n             * @type {CallRecord}\n             */\n          const record = {\n            caller: element.caller,\n            caller_alias: element.caller_alias,\n            callee: element.called,\n            callee_alias: element.called_alias,\n            call_type: element.call_type,\n            call_priority: this._getCallPriority(element.call_priority),\n            duplex_mode: element.is_duplex_mode,\n            is_encryption: element.is_encryption,\n            setup_time: element.setup_time,\n            start_time: element.start_time,\n            end_time: element.end_time,\n            sound_file: element.sound_file\n          };\n          callRecordResult.record_list.push(record);\n        });\n        resolve(callRecordResult);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  /**\n   * 只查询呼叫报表的数量\n   * @param {CallRecordParams} callRecordParams   呼叫报表查询参数对象\n   * @returns {Promise.<RecordCountResult>}\n   */\n  queryCallRecordCount(callRecordParams) {\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug("queryCallRecordCount", JSON.stringify(callRecordParams));\n    return new Promise((resolve, reject) => {\n      /**\n        * @type {CallRecordParams}\n        */\n      const fetchDataParam = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.VERSION,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_6__["default"].guid(),\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.puc_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.realm,\n        cmd_name: \'query_call_log_count\'\n      };\n      if (callRecordParams.start_time) {\n        fetchDataParam.start_time = callRecordParams.start_time;\n      }\n      if (callRecordParams.end_time) {\n        fetchDataParam.end_time = callRecordParams.end_time;\n      }\n      if ((0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.isNotEmpty)(callRecordParams.call_type)) {\n        // 可以为0\n        fetchDataParam.call_type = callRecordParams.call_type;\n      }\n      if ((0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.isNotEmpty)(callRecordParams.call_priority)) {\n        fetchDataParam.call_priority = callRecordParams.call_priority === 0 ? 0 : 15;\n      }\n\n      // callRecordParams.caller_basedata_id = \'00173-356-32820801-0--puc.com\';\n      if (callRecordParams.caller_basedata_id) {\n        const callerInfo = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(callRecordParams.caller_basedata_id); //转换\n        fetchDataParam.caller_system_id = callerInfo.system_id;\n        fetchDataParam.caller_number = callerInfo.what_id;\n        fetchDataParam.caller_number_type = callerInfo.number_type;\n      }\n\n      // callRecordParams.callee_basedata_id = \'00173-356-32820801-0--puc.com\';\n      if (callRecordParams.callee_basedata_id) {\n        const calleeInfo = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(callRecordParams.callee_basedata_id); //转换\n        fetchDataParam.called_system_id = calleeInfo.system_id;\n        fetchDataParam.called_number = calleeInfo.what_id;\n        fetchDataParam.called_number_type = calleeInfo.number_type;\n      }\n\n      // 这里要强制改，不然查不到\n      if ((callRecordParams === null || callRecordParams === void 0 ? void 0 : callRecordParams.caller_number_type) === 4) {\n        callRecordParams.caller_number_type = 1;\n      }\n      if ((callRecordParams === null || callRecordParams === void 0 ? void 0 : callRecordParams.called_number_type) === 4) {\n        callRecordParams.called_number_type = 1;\n      }\n      _protocol_http__WEBPACK_IMPORTED_MODULE_1__["default"].postSync(fetchDataParam).then(resp => {\n        _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug("queryCallRecordCount resp", JSON.stringify(resp));\n        /**\n        * @type {RecordCountResult}\n        */\n        const callRecordCountResult = {\n          result: resp.result,\n          total_number: resp === null || resp === void 0 ? void 0 : resp.record_count\n        };\n        resolve(callRecordCountResult);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n  _getCallPriority(call_priority) {\n    // 小于15就是普通告警\n    if (call_priority != null && call_priority != undefined && call_priority < 15) {\n      return 0;\n    }\n    return 1;\n  }\n\n  /**\n   * 查询上下线报表\n   * @param {RrsRecordParams} rrsRecordParams   呼叫报表查询参数对象\n   * @returns {Promise.<RrsRecordResult>}\n   */\n  queryRrsRecord(rrsRecordParams) {\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug("queryRrsRecord", JSON.stringify(rrsRecordParams));\n    return new Promise((resolve, reject) => {\n      /**\n        * @type {RrsRecordParams}\n        */\n      const fetchDataParam = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.VERSION,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_6__["default"].guid(),\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.puc_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.realm,\n        cmd_name: \'query_rrs_info\',\n        count_of_page: rrsRecordParams.page_size,\n        page_index: rrsRecordParams.page_index,\n        batch: 0,\n        pageStatus: true\n      };\n      if (rrsRecordParams.start_time) {\n        fetchDataParam.start_time = rrsRecordParams.start_time;\n      }\n      if (rrsRecordParams.end_time) {\n        fetchDataParam.end_time = rrsRecordParams.end_time;\n      }\n      if ((0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.isNotEmpty)(rrsRecordParams.status)) {\n        // 可以为0\n        fetchDataParam.status = rrsRecordParams.status;\n      }\n\n      // rrsRecordParams.terminal_basedata_id = \'00173-356-32820801-0--puc.com\';\n      if (rrsRecordParams.terminal_basedata_id) {\n        const terminalInfo = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(rrsRecordParams.terminal_basedata_id); //转换\n        fetchDataParam.system_id = terminalInfo.system_id;\n        fetchDataParam.terminal_id = terminalInfo.what_id;\n        fetchDataParam.terminal_type = terminalInfo.number_type;\n      }\n      _protocol_http__WEBPACK_IMPORTED_MODULE_1__["default"].postSync(fetchDataParam).then(resp => {\n        var _resp$record_list;\n        _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug("queryRrsRecord resp", JSON.stringify(resp));\n        /**\n        * @type {RrsRecordResult}\n        */\n        const rrsRecordResult = {\n          result: resp.result,\n          total_number: resp.page_info ? resp.page_info.total : 0,\n          record_list: []\n        };\n        (_resp$record_list = resp.record_list) === null || _resp$record_list === void 0 ? void 0 : _resp$record_list.forEach(element => {\n          /**\n             * @type {RrsRecord}\n             */\n          const record = {\n            status: element.status,\n            terminal_id: element.terminal_id,\n            terminal_alias: element.terminal_alias,\n            terminal_type: this._getTerminalType(element.terminal_type),\n            regist_time: element.regist_time\n          };\n          rrsRecordResult.record_list.push(record);\n        });\n        resolve(rrsRecordResult);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  /**\n   * 只查询上下线报表的数量\n   * @param {RrsRecordParams} rrsRecordParams   呼叫报表查询参数对象\n   * @returns {Promise.<RecordCountResult>}\n   */\n  queryRrsRecordCount(rrsRecordParams) {\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug("queryRrsRecordCount", JSON.stringify(rrsRecordParams));\n    return new Promise((resolve, reject) => {\n      /**\n        * @type {RrsRecordParams}\n        */\n      const fetchDataParam = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.VERSION,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_6__["default"].guid(),\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.puc_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.realm,\n        cmd_name: \'query_rrs_count_info\'\n      };\n      if (rrsRecordParams.start_time) {\n        fetchDataParam.start_time = rrsRecordParams.start_time;\n      }\n      if (rrsRecordParams.end_time) {\n        fetchDataParam.end_time = rrsRecordParams.end_time;\n      }\n      if ((0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.isNotEmpty)(rrsRecordParams.status)) {\n        // 可以为0\n        fetchDataParam.status = rrsRecordParams.status;\n      }\n\n      // rrsRecordParams.terminal_basedata_id = \'00173-356-32820801-0--puc.com\';\n      if (rrsRecordParams.terminal_basedata_id) {\n        const terminalInfo = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(rrsRecordParams.terminal_basedata_id); //转换\n        fetchDataParam.system_id = terminalInfo.system_id;\n        fetchDataParam.terminal_id = terminalInfo.what_id;\n        fetchDataParam.terminal_type = terminalInfo.number_type;\n      }\n      _protocol_http__WEBPACK_IMPORTED_MODULE_1__["default"].postSync(fetchDataParam).then(resp => {\n        _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug("queryRrsRecordCount resp", JSON.stringify(resp));\n        /**\n        * @type {RrsRecordResult}\n        */\n        const rrsRecordResult = {\n          result: resp.result,\n          total_number: resp.record_count\n        };\n        resolve(rrsRecordResult);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n  _getTerminalType(terminal_type) {\n    if (terminal_type === _public_constant__WEBPACK_IMPORTED_MODULE_2__.NUMBER_TYPE.INDIVIDUAL) {\n      return 0;\n    } else if (terminal_type === _public_constant__WEBPACK_IMPORTED_MODULE_2__.NUMBER_TYPE.DISPATCHER || terminal_type === _public_constant__WEBPACK_IMPORTED_MODULE_2__.NUMBER_TYPE.DC) {\n      return 1;\n    } else if (terminal_type === _public_constant__WEBPACK_IMPORTED_MODULE_2__.NUMBER_TYPE.ROIP_INDIVIDUAL) {\n      return 2;\n    }\n    return 0;\n  }\n\n  /**\n   * 查询紧急告警报表\n   * @param {EmgAlarmRecordParams} emgAlarmRecordParams   紧急告警查询参数对象\n   * @returns {Promise.<EmgAlarmRecordResult>}\n   */\n  queryEmgAlarmRecord(emgAlarmRecordParams) {\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug("queryEmgAlarmRecord", JSON.stringify(emgAlarmRecordParams));\n    return new Promise((resolve, reject) => {\n      /**\n        * @type {EmgAlarmRecordParams}\n        */\n      const fetchDataParam = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.VERSION,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_6__["default"].guid(),\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.puc_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.realm,\n        cmd_name: \'emergency_alarm_query\',\n        count_of_page: emgAlarmRecordParams.page_size,\n        page_index: emgAlarmRecordParams.page_index,\n        batch: 0,\n        pageStatus: true\n      };\n      if (emgAlarmRecordParams.start_time) {\n        fetchDataParam.alarm_start_time = emgAlarmRecordParams.start_time;\n      }\n      if (emgAlarmRecordParams.end_time) {\n        fetchDataParam.alarm_end_time = emgAlarmRecordParams.end_time;\n      }\n      if ((0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.isNotEmpty)(emgAlarmRecordParams.alarm_status)) {\n        // 可以为0\n        fetchDataParam.alarm_status = emgAlarmRecordParams.alarm_status;\n      }\n      if ((0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.isNotEmpty)(emgAlarmRecordParams.alarm_type)) {\n        // 可以为0\n        fetchDataParam.alarm_type = emgAlarmRecordParams.alarm_type;\n      }\n\n      // rrsRecordParams.terminal_basedata_id = \'00173-356-32820801-0--puc.com\';\n      if (emgAlarmRecordParams.device_basedata_id) {\n        const terminalInfo = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(emgAlarmRecordParams.device_basedata_id); //转换\n        fetchDataParam.system_id = terminalInfo.system_id;\n        fetchDataParam.device_ssi = terminalInfo.what_id;\n        // fetchDataParam.terminal_type = terminalInfo.number_type;\n      }\n\n      _protocol_http__WEBPACK_IMPORTED_MODULE_1__["default"].postSync(fetchDataParam).then(resp => {\n        var _resp$alarm_list;\n        _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug("queryEmgAlarmRecord resp", JSON.stringify(resp));\n        /**\n        * @type {EmgAlarmRecordResult}\n        */\n        const emgAlarmRecordResult = {\n          result: resp.result,\n          total_number: resp.page_info ? resp.page_info.total : 0,\n          record_list: []\n        };\n        (_resp$alarm_list = resp.alarm_list) === null || _resp$alarm_list === void 0 ? void 0 : _resp$alarm_list.forEach(element => {\n          /**\n             * @type {EmgAlarmRecord}\n             */\n          const record = {\n            alarm_status: element.alarm_status,\n            alarm_type: element.alarm_type,\n            device_number: element.device_ssi,\n            device_alias: element.device_alias,\n            alarm_time: element.alarm_time,\n            handle_alarm_time: element.handle_alarm_time,\n            receive_alarm_time: element.receive_alarm_time\n          };\n          emgAlarmRecordResult.record_list.push(record);\n        });\n        resolve(emgAlarmRecordResult);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n  /**\n   * 查询紧急告警报表\n   * @param {EmgAlarmRecordParams} emgAlarmRecordParams   紧急告警查询参数对象\n   * @returns {Promise.<RecordCountResult>}\n   */\n  queryEmgAlarmRecordCount(emgAlarmRecordParams) {\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug("queryEmgAlarmRecordCount", JSON.stringify(emgAlarmRecordParams));\n    return new Promise((resolve, reject) => {\n      /**\n        * @type {EmgAlarmRecordParams}\n        */\n      const fetchDataParam = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.VERSION,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_6__["default"].guid(),\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.puc_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.realm,\n        cmd_name: \'emergency_alarm_count_query\',\n        count_of_page: emgAlarmRecordParams.page_size,\n        page_index: emgAlarmRecordParams.page_index\n      };\n      if (emgAlarmRecordParams.start_time) {\n        fetchDataParam.alarm_start_time = emgAlarmRecordParams.start_time;\n      }\n      if (emgAlarmRecordParams.end_time) {\n        fetchDataParam.alarm_end_time = emgAlarmRecordParams.end_time;\n      }\n      if ((0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.isNotEmpty)(emgAlarmRecordParams.alarm_status)) {\n        // 可以为0\n        fetchDataParam.alarm_status = emgAlarmRecordParams.alarm_status;\n      }\n      if ((0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.isNotEmpty)(emgAlarmRecordParams.alarm_type)) {\n        // 可以为0\n        fetchDataParam.alarm_type = emgAlarmRecordParams.alarm_type;\n      }\n\n      // rrsRecordParams.terminal_basedata_id = \'00173-356-32820801-0--puc.com\';\n      if (emgAlarmRecordParams.device_basedata_id) {\n        const terminalInfo = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(emgAlarmRecordParams.device_basedata_id); //转换\n        fetchDataParam.system_id = terminalInfo.system_id;\n        fetchDataParam.device_ssi = terminalInfo.what_id;\n        // fetchDataParam.terminal_type = terminalInfo.number_type;\n      }\n\n      _protocol_http__WEBPACK_IMPORTED_MODULE_1__["default"].postSync(fetchDataParam).then(resp => {\n        _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug("queryEmgAlarmRecordCount resp", JSON.stringify(resp));\n        /**\n        * @type {RecordCountResult}\n        */\n        const recordCountResult = {\n          result: resp.result,\n          total_number: resp.record_count\n        };\n        resolve(recordCountResult);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  /**\n   * 查询越区告警报表\n   * @param {GeofencingAlarmRecordParams} geofencingAlarmRecordParams   紧急告警查询参数对象\n   * @returns {Promise.<GeofencingAlarmRecordResult>}\n   */\n  queryGeofencingAlarmRecord(geofencingAlarmRecordParams) {\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug("queryGeofencingAlarmRecord", JSON.stringify(geofencingAlarmRecordParams));\n    return new Promise((resolve, reject) => {\n      /**\n        * @type {EmgAlarmRecordParams}\n        */\n      const fetchDataParam = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.VERSION,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_6__["default"].guid(),\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.puc_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.realm,\n        cmd_name: \'geofencing_alarm_query\',\n        count_of_page: geofencingAlarmRecordParams.page_size,\n        page_index: geofencingAlarmRecordParams.page_index,\n        batch: 0,\n        pageStatus: true\n      };\n      if (geofencingAlarmRecordParams.start_time) {\n        fetchDataParam.start_time = geofencingAlarmRecordParams.start_time;\n      }\n      if (geofencingAlarmRecordParams.end_time) {\n        fetchDataParam.end_time = geofencingAlarmRecordParams.end_time;\n      }\n      if ((0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.isNotEmpty)(geofencingAlarmRecordParams.alarm_status)) {\n        // 可以为0\n        fetchDataParam.active = geofencingAlarmRecordParams.alarm_status;\n      }\n      if ((0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.isNotEmpty)(geofencingAlarmRecordParams.alarm_type)) {\n        // 可以为0\n        fetchDataParam.alarm_type = geofencingAlarmRecordParams.alarm_type;\n      }\n\n      // geofencingAlarmRecordParams.device_basedata_id = \'00173-356-32820801-0--puc.com\';\n      if (geofencingAlarmRecordParams.device_basedata_id) {\n        const terminalInfo = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(geofencingAlarmRecordParams.device_basedata_id); //转换\n        fetchDataParam.system_id = terminalInfo.system_id;\n        fetchDataParam.device_ssi = terminalInfo.what_id;\n        // fetchDataParam.terminal_type = terminalInfo.number_type;\n      }\n\n      _protocol_http__WEBPACK_IMPORTED_MODULE_1__["default"].postSync(fetchDataParam).then(resp => {\n        var _resp$alarm_list2;\n        _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug("queryGeofencingAlarmRecord resp", JSON.stringify(resp));\n        /**\n        * @type {GeofencingAlarmRecordResult}\n        */\n        const geofencingAlarmRecordResult = {\n          result: resp.result,\n          total_number: resp.page_info ? resp.page_info.total : 0,\n          record_list: []\n        };\n        (_resp$alarm_list2 = resp.alarm_list) === null || _resp$alarm_list2 === void 0 ? void 0 : _resp$alarm_list2.forEach(element => {\n          /**\n             * @type {GeofencingAlarmRecord}\n             */\n          const record = {\n            alarm_status: element.active,\n            alarm_type: element.alarm_type,\n            device_number: element.device_ssi,\n            device_alias: element.device_alias,\n            alarm_time: element.alarm_datetime,\n            region_name: element.region_name,\n            rule_name: element.rule_name,\n            cancel_alarm_time: this._getCancelAlarmTime(element.alarm_datetime, element.unalarm_datetime)\n          };\n          geofencingAlarmRecordResult.record_list.push(record);\n        });\n        resolve(geofencingAlarmRecordResult);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  /**\n   * 只查询越区告警报表总数\n   * @param {GeofencingAlarmRecordParams} geofencingAlarmRecordParams   紧急告警查询参数对象\n   * @returns {Promise.<RecordCountResult>}\n   */\n  queryGeofencingAlarmRecordCount(geofencingAlarmRecordParams) {\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug("queryGeofencingAlarmRecordCount", JSON.stringify(geofencingAlarmRecordParams));\n    return new Promise((resolve, reject) => {\n      /**\n        * @type {EmgAlarmRecordParams}\n        */\n      const fetchDataParam = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.VERSION,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_6__["default"].guid(),\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.puc_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.realm,\n        cmd_name: \'geofencing_alarm_count_query\',\n        count_of_page: geofencingAlarmRecordParams.page_size,\n        page_index: geofencingAlarmRecordParams.page_index\n      };\n      if (geofencingAlarmRecordParams.start_time) {\n        fetchDataParam.start_time = geofencingAlarmRecordParams.start_time;\n      }\n      if (geofencingAlarmRecordParams.end_time) {\n        fetchDataParam.end_time = geofencingAlarmRecordParams.end_time;\n      }\n      if ((0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.isNotEmpty)(geofencingAlarmRecordParams.alarm_status)) {\n        // 可以为0\n        fetchDataParam.active = geofencingAlarmRecordParams.alarm_status;\n      }\n      if ((0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.isNotEmpty)(geofencingAlarmRecordParams.alarm_type)) {\n        // 可以为0\n        fetchDataParam.alarm_type = geofencingAlarmRecordParams.alarm_type;\n      }\n\n      // geofencingAlarmRecordParams.device_basedata_id = \'00173-356-32820801-0--puc.com\';\n      if (geofencingAlarmRecordParams.device_basedata_id) {\n        const terminalInfo = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(geofencingAlarmRecordParams.device_basedata_id); //转换\n        fetchDataParam.system_id = terminalInfo.system_id;\n        fetchDataParam.device_ssi = terminalInfo.what_id;\n        // fetchDataParam.terminal_type = terminalInfo.number_type;\n      }\n\n      _protocol_http__WEBPACK_IMPORTED_MODULE_1__["default"].postSync(fetchDataParam).then(resp => {\n        _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug("queryGeofencingAlarmRecordCount resp", JSON.stringify(resp));\n        /**\n        * @type {GeofencingAlarmRecordResult}\n        */\n        const RecordResultCount = {\n          result: resp.result,\n          total_number: resp.record_count\n        };\n        resolve(RecordResultCount);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n  _getCancelAlarmTime(alarm_datetime, unalarm_datetime) {\n    if (new Date(alarm_datetime).getTime() > new Date(unalarm_datetime).getTime()) {\n      return \'\';\n    } else {\n      return unalarm_datetime;\n    }\n  }\n\n  /**\n   * 查询超速告警报表\n   * @param {SpeedAlarmRecordParams} speedAlarmRecordParams   紧急告警查询参数对象\n   * @returns {Promise.<SpeedAlarmRecordResult>}\n   */\n  querySpeedAlarmRecord(speedAlarmRecordParams) {\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug("querySpeedAlarmRecord", JSON.stringify(speedAlarmRecordParams));\n    return new Promise((resolve, reject) => {\n      /**\n        * @type {SpeedAlarmRecordParams}\n        */\n      const fetchDataParam = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.VERSION,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_6__["default"].guid(),\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.puc_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.realm,\n        cmd_name: \'speed_alarm_query\',\n        alarm_type: 0,\n        count_of_page: speedAlarmRecordParams.page_size,\n        page_index: speedAlarmRecordParams.page_index,\n        batch: 0,\n        pageStatus: true\n      };\n      if (speedAlarmRecordParams.start_time) {\n        fetchDataParam.start_time = speedAlarmRecordParams.start_time;\n      }\n      if (speedAlarmRecordParams.end_time) {\n        fetchDataParam.end_time = speedAlarmRecordParams.end_time;\n      }\n      if ((0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.isNotEmpty)(speedAlarmRecordParams.alarm_status)) {\n        // 可以为0\n        fetchDataParam.active = speedAlarmRecordParams.alarm_status;\n      }\n\n      // geofencingAlarmRecordParams.device_basedata_id = \'00173-356-32820801-0--puc.com\';\n      if (speedAlarmRecordParams.device_basedata_id) {\n        const terminalInfo = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(speedAlarmRecordParams.device_basedata_id); //转换\n        fetchDataParam.system_id = terminalInfo.system_id;\n        fetchDataParam.device_number = terminalInfo.what_id;\n        // fetchDataParam.terminal_type = terminalInfo.number_type;\n      }\n\n      _protocol_http__WEBPACK_IMPORTED_MODULE_1__["default"].postSync(fetchDataParam).then(resp => {\n        var _resp$alarm_list3;\n        _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug("querySpeedAlarmRecord resp", JSON.stringify(resp));\n        /**\n        * @type {SpeedAlarmRecordResult}\n        */\n        const speedAlarmRecordResult = {\n          result: resp.result,\n          total_number: resp.page_info ? resp.page_info.total : 0,\n          record_list: []\n        };\n        (_resp$alarm_list3 = resp.alarm_list) === null || _resp$alarm_list3 === void 0 ? void 0 : _resp$alarm_list3.forEach(element => {\n          /**\n            * @type {SpeedAlarmRecord}\n            */\n          const record = {\n            alarm_status: element.active,\n            // alarm_type: element.alarm_type,\n            device_number: element.device_number,\n            device_alias: element.device_alias,\n            alarm_time: element.alarm_datetime,\n            overspeed_speed: element.current_speed,\n            rule_name: element.rule_name,\n            cancel_alarm_time: this._getCancelAlarmTime(element.alarm_datetime, element.unalarm_datetime)\n          };\n          speedAlarmRecordResult.record_list.push(record);\n        });\n        resolve(speedAlarmRecordResult);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n  /**\n   *  只查询超速告警报表总数\n   * @param {SpeedAlarmRecordParams} speedAlarmRecordParams   紧急告警查询参数对象\n   * @returns {Promise.<RecordResultCount}\n   */\n  querySpeedAlarmRecordCount(speedAlarmRecordParams) {\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug("querySpeedAlarmRecordCount", JSON.stringify(speedAlarmRecordParams));\n    return new Promise((resolve, reject) => {\n      /**\n        * @type {SpeedAlarmRecordParams}\n        */\n      const fetchDataParam = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.VERSION,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_6__["default"].guid(),\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.puc_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.realm,\n        cmd_name: \'speed_alarm_count_query\',\n        alarm_type: 0,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_6__["default"].guid(),\n        count_of_page: speedAlarmRecordParams.page_size,\n        page_index: speedAlarmRecordParams.page_index,\n        batch: 0,\n        pageStatus: true\n      };\n      if (speedAlarmRecordParams.start_time) {\n        fetchDataParam.start_time = speedAlarmRecordParams.start_time;\n      }\n      if (speedAlarmRecordParams.end_time) {\n        fetchDataParam.end_time = speedAlarmRecordParams.end_time;\n      }\n      if ((0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.isNotEmpty)(speedAlarmRecordParams.alarm_status)) {\n        // 可以为0\n        fetchDataParam.active = speedAlarmRecordParams.alarm_status;\n      }\n\n      // geofencingAlarmRecordParams.device_basedata_id = \'00173-356-32820801-0--puc.com\';\n      if (speedAlarmRecordParams.device_basedata_id) {\n        const terminalInfo = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(speedAlarmRecordParams.device_basedata_id); //转换\n        fetchDataParam.system_id = terminalInfo.system_id;\n        fetchDataParam.device_number = terminalInfo.what_id;\n        // fetchDataParam.terminal_type = terminalInfo.number_type;\n      }\n\n      _protocol_http__WEBPACK_IMPORTED_MODULE_1__["default"].postSync(fetchDataParam).then(resp => {\n        _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug("querySpeedAlarmRecord resp", JSON.stringify(resp));\n        /**\n        * @type {RecordResultCount}\n        */\n        const recordResultCount = {\n          result: resp.result,\n          total_number: resp.record_count\n        };\n        resolve(recordResultCount);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  /**\n   * 查询回呼请求报表\n   * @param {CallBackRecordParams} callBackRecordParams   回呼报表查询参数对象\n   * @returns {Promise.<CallBackRecordResult>}\n   */\n  queryCallBackRecord(callBackRecordParams) {\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug("queryCallBackRecord", JSON.stringify(callBackRecordParams));\n    return new Promise((resolve, reject) => {\n      /**\n        * @type {CallBackRecordParams}\n        */\n      const fetchDataParam = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.VERSION,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_6__["default"].guid(),\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.puc_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.realm,\n        cmd_name: \'callback_list_request\',\n        count_of_page: callBackRecordParams.page_size,\n        page_index: callBackRecordParams.page_index,\n        batch: 0,\n        pageStatus: true\n      };\n      if (callBackRecordParams.start_time) {\n        fetchDataParam.callback_start_time = callBackRecordParams.start_time;\n      }\n      if (callBackRecordParams.end_time) {\n        fetchDataParam.callback_end_time = callBackRecordParams.end_time;\n      }\n\n      // geofencingAlarmRecordParams.device_basedata_id = \'00173-356-32820801-0--puc.com\';\n      if (callBackRecordParams.device_basedata_id) {\n        const terminalInfo = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(callBackRecordParams.device_basedata_id); //转换\n        fetchDataParam.system_id = terminalInfo.system_id;\n        fetchDataParam.device_ssi = terminalInfo.what_id;\n      }\n      _protocol_http__WEBPACK_IMPORTED_MODULE_1__["default"].postSync(fetchDataParam).then(resp => {\n        var _resp$callback_list;\n        _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug("queryCallBackRecord resp", JSON.stringify(resp));\n        /**\n        * @type {CallBackRecordResult}\n        */\n        const callBackRecordResult = {\n          result: resp.result,\n          total_number: resp.page_info ? resp.page_info.total : 0,\n          record_list: []\n        };\n        (_resp$callback_list = resp.callback_list) === null || _resp$callback_list === void 0 ? void 0 : _resp$callback_list.forEach(element => {\n          /**\n            * @type {CallBackRecord}\n            */\n          const record = {\n            device_number: element.device_number,\n            device_alias: element.device_alias,\n            callback_time: element.callback_time,\n            callback_code: element.callback_code,\n            callback_handler: element.callback_handler,\n            callback_handle_time: element.callback_handle_time\n          };\n          callBackRecordResult.record_list.push(record);\n        });\n        resolve(callBackRecordResult);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  /**\n   * 只查询回呼请求报表的数量\n   * @param {CallBackRecordParams} callBackRecordParams   回呼报表查询参数对象\n   * @returns {Promise.<RecordCountResult>}\n   */\n  queryCallBackRecordCount(callBackRecordParams) {\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug("queryCallBackRecordCount", JSON.stringify(callBackRecordParams));\n    return new Promise((resolve, reject) => {\n      /**\n        * @type {CallBackRecordParams}\n        */\n      const fetchDataParam = {\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.VERSION,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_6__["default"].guid(),\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.puc_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.realm,\n        cmd_name: \'callback_list_count_query\'\n      };\n      if (callBackRecordParams.start_time) {\n        fetchDataParam.callback_start_time = callBackRecordParams.start_time;\n      }\n      if (callBackRecordParams.end_time) {\n        fetchDataParam.callback_end_time = callBackRecordParams.end_time;\n      }\n\n      // geofencingAlarmRecordParams.device_basedata_id = \'00173-356-32820801-0--puc.com\';\n      if (callBackRecordParams.device_basedata_id) {\n        const terminalInfo = (0,_common_utils__WEBPACK_IMPORTED_MODULE_3__.unPackGuid)(callBackRecordParams.device_basedata_id); //转换\n        fetchDataParam.system_id = terminalInfo.system_id;\n        fetchDataParam.device_ssi = terminalInfo.what_id;\n      }\n      _protocol_http__WEBPACK_IMPORTED_MODULE_1__["default"].postSync(fetchDataParam).then(resp => {\n        _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug("queryCallBackRecordCount resp", JSON.stringify(resp));\n        /**\n        * @type {RecordCountResult}\n        */\n        const recordResult = {\n          result: resp.result,\n          total_number: resp.record_count\n        };\n        resolve(recordResult);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  /**\n   * 获取呼叫录音文件路径\n   * @param record\n   * @param record.sound_file  呼叫报表记录的 sound_file 字段\n   * @returns {Promise.<RecordCountResult>}\n   */\n  fetchCallRecordingFileUrl(record) {\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug("fetchCallRecordingFileUrl", JSON.stringify(record));\n    return new Promise((resolve, reject) => {\n      if (!record || !record.sound_file) {\n        return resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_2__.ERROR_CODE.PARAM_INVALID\n        });\n      }\n      const param = {\n        record_name: record.sound_file,\n        product_name: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.PRODUCT_NAME,\n        version: _public_constant__WEBPACK_IMPORTED_MODULE_2__.api_constant.VERSION,\n        cmd_guid: _common__WEBPACK_IMPORTED_MODULE_6__["default"].guid(),\n        puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.puc_id,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_4__["default"].user.realm,\n        cmd_name: \'record_download_request\'\n      };\n      _protocol_http__WEBPACK_IMPORTED_MODULE_1__["default"].postSync(param).then(resp => {\n        _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug("fetchCallRecordingFileUrl resp", JSON.stringify(resp));\n        const urlResult = {\n          result: 0,\n          file_url: \'\'\n        };\n        if (resp.result === 0) {\n          const url = resp.record_url;\n          if (!url || url === \'\') {\n            urlResult.result = _public_constant__WEBPACK_IMPORTED_MODULE_2__.ERROR_CODE.CALL_REORD_FILE_URL_EMPTY;\n          } else {\n            urlResult.file_url = this._genUrlFile(url);\n          }\n        } else {\n          if (resp.result === 1) {\n            urlResult.result = _public_constant__WEBPACK_IMPORTED_MODULE_2__.ERROR_CODE.CALL_REORD_FILE_URL_EMPTY;\n          } else {\n            urlResult.result = resp.result;\n          }\n        }\n        resolve(urlResult);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n  _genUrlFile(urlPath) {\n    const url1 = urlPath.replace(/\\\\/g, \'/\');\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].info(\'_genUrlFile src url\', url1);\n    // 录音文件原始地址格式http://10.110.38.144:12324/http/media/down/2022-10-26-15-21-55-3766042437-120713-9571813458273216_audio.wav\n    const url = new URL(url1);\n    const {\n      port,\n      hostname\n    } = url;\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].info(\'--------------------\', url);\n\n    // const url2 =\n    //   \'http/media/down/2022-09-21-10-36-32-{76d5edf3-967d-4838-a989-515c8002b80d}_audio.wav\';\n    // 为了实现线上https的环境下载 http的多媒体文件，将录音文件袋url 转换成 /http/media/*****?ehost=实际主机&eport=实际端口 这个格式\n    const index = url1.indexOf(\'/http/media\');\n    let url2 = url1.substr(index);\n    const baseurl = _signin__WEBPACK_IMPORTED_MODULE_5__["default"]._getHttpProtocol() + _signin__WEBPACK_IMPORTED_MODULE_5__["default"]._getHttpHost(true);\n    url2 = `${baseurl}${url2}?ehost=${hostname}&eport=${port}`;\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].info(\'downloadUrlFile----url2\', url2);\n    return url2;\n  }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new ReportForm());\n\n//# sourceURL=webpack://lemon/./lemon/modules/reportForm.js?'
          );

          /***/
        },

      /***/ "./lemon/modules/signin.js":
        /*!*********************************!*\
  !*** ./lemon/modules/signin.js ***!
  \*********************************/
        /***/ (
          __unused_webpack_module,
          __webpack_exports__,
          __webpack_require__
        ) => {
          "use strict";
          eval(
            '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _common_log__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/log */ "./lemon/common/log.js");\n/* harmony import */ var crypto_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! crypto-js */ "./node_modules/crypto-js/index.js");\n/* harmony import */ var crypto_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(crypto_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _protocol_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../protocol/http */ "./lemon/protocol/http.js");\n/* harmony import */ var _public_baseRequest__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../public/baseRequest */ "./lemon/public/baseRequest.js");\n/* harmony import */ var _protocol_websocket__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../protocol/websocket */ "./lemon/protocol/websocket.js");\n/* harmony import */ var _common_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../common/utils */ "./lemon/common/utils.js");\n/* harmony import */ var _public_constant__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../public/constant */ "./lemon/public/constant.js");\n/* harmony import */ var _common__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./common */ "./lemon/modules/common.js");\n/* harmony import */ var _littleLemon__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./../littleLemon */ "./lemon/littleLemon.js");\n/* harmony import */ var _call__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./call */ "./lemon/modules/call.js");\n\n\n\n\n\n\n\n\n\n\n\n/**\n * 通知已登录的调度台踢出\n * @const\n * @type {string}\n */\nconst CMD_PUC_KICKOUT_EVT = \'puc_kickout_evt\';\n/**\n * 正常退出\n * @const\n * @type {string}\n */\nconst CMD_LOGOUT = \'logout\';\n/**\n * 成功登录\n * @const\n * @type {string}\n */\nconst CMD_LOGIN = \'login_success\';\n\n/**\n * 登录状态数据回调\n * @typedef {object} LoginStatus\n * @property  {string} user_id   用户账号\n * @property  {string} reaml  登陆域名\n * @property  {number} login_status 当前登录状态   0 未登录/正常登出   1登录 2.被踢下线  3.其他异常退出\n * @property  {number} reason_code  当异常退出时的原因码，正常退出和登陆状态没有该值\n */\n\n/**\n * 登录模块\n * 登录、退出登录\n * TODO 主备切换、断网重连\n */\nclass Signin {\n  constructor() {\n    this.COLOR_LOGIN = \'color: blue\';\n    this.key = "HytBSoft"; //加密key\n    this.isReLogining = false;\n    this.isConnect2AnotherServer = false;\n    this.isLoginMaster = true;\n    this.isSecureTransmission = 0; //0 http 1 https\n\n    this.loginInfo = undefined;\n    this.interval = 5000;\n    this.checker = null;\n    this.HTTP_PAT_NAME = "/has";\n    this.WEBSOCKET_PAT_NAME = "/wsas";\n    this.FRS_PAT_NAME = "/commandcenter/puc/master/frs";\n\n    //用于记录登出事件，防抖\n    this.logoutFlag = false;\n    this.logoutTimer = null;\n\n    //是否用户自己退出登录，用于区分正常退出时，先收到 ws 断开是正常触发还是异常触发的。\n    this.logoutByUser = false;\n\n    // 登录退出回调\n    this.logoutCbMap = new Map();\n    this._initEvent();\n    this.loginAccountInfo = undefined;\n  }\n\n  /** 回调处理通用逻辑 */\n  _safeOnCallback(func, param) {\n    if (!func) {\n      return;\n    }\n    try {\n      func(param);\n    } catch (error) {\n      _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].error(error);\n    }\n  }\n\n  /**\n   * 添加登录状态变化通知回调\n   * @param {LoginCallback} callback 回调函数\n   * @returns {string} callbackId {@link removeLogoutListener } 需要根据这个id找到对应的回调函数\n   */\n  addLoginStatusChangeListener(callback) {\n    const callbackId = _common__WEBPACK_IMPORTED_MODULE_7__["default"].guid();\n    this.logoutCbMap.set(callbackId, callback);\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug(\'addLogoutListener callbackId=%s\', callbackId);\n    return callbackId;\n  }\n\n  /**\n   * 根据callbackId删除之前注册的回调\n   * \n   * @param {string} callbackId \n   */\n  removeLoginStatusChangeListener(callbackId) {\n    let result;\n    if (callbackId) {\n      result = this.logoutCbMap.delete(callbackId);\n    }\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug(\'removeDeviceChangeListener cbId=%s,succ=%s\', callbackId, result);\n  }\n  _initEvent() {\n    _protocol_websocket__WEBPACK_IMPORTED_MODULE_4__["default"].registerMessageHandler(CMD_PUC_KICKOUT_EVT, this);\n    _protocol_websocket__WEBPACK_IMPORTED_MODULE_4__["default"].registerMessageHandler(_public_constant__WEBPACK_IMPORTED_MODULE_6__.ERROR_CMD.CONNECTION, this);\n  }\n  //  0 未登录/正常登出   1登录 2.被踢下线  3异常退出\n\n  /**\n  * ws收到事件调用这个方法，登录相关事件由此分发\n  * @param {object} jsonData \n  */\n  onEvent(jsonData) {\n    /**\n      * @type {LoginStatus}\n      */\n    var loginStatus;\n    if (jsonData.cmd_name === CMD_LOGIN) {\n      //登陆成功\n      loginStatus = {\n        login_status: 1,\n        reason_code: 0,\n        user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_3__["default"].user.user_id,\n        realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_3__["default"].user.realm\n      };\n    } else {\n      // 被退出登录\n      if (this.logoutFlag) {\n        return;\n      }\n      this.logoutFlag = true;\n      if (jsonData.cmd_name === _public_constant__WEBPACK_IMPORTED_MODULE_6__.ERROR_CMD.CONNECTION) {\n        //ws 异常退出 ,正常退出会先断ws \n        loginStatus = {\n          login_status: 3,\n          reason_code: jsonData.result,\n          user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_3__["default"].user.user_id,\n          realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_3__["default"].user.realm\n        };\n        if (this.logoutByUser) {\n          //如果是正常退出，触发的ws异常。当成正常退出\n          loginStatus.login_status = 0;\n          loginStatus.reason_code = 0;\n          this.logoutByUser = false;\n        }\n      } else if (jsonData.cmd_name === CMD_PUC_KICKOUT_EVT) {\n        // 被踢下线\n        loginStatus = {\n          login_status: 2,\n          reason_code: jsonData.reason,\n          user_id: jsonData.user_id,\n          realm: jsonData.realm\n        };\n      } else if (jsonData.cmd_name === CMD_LOGOUT) {\n        //正常退出\n        loginStatus = {\n          login_status: 0,\n          reason_code: 0,\n          user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_3__["default"].user.user_id,\n          realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_3__["default"].user.realm\n        };\n      }\n      if (this.logoutTimer) {\n        clearTimeout(this.logoutTimer);\n        this.logoutTimer = null;\n      }\n      this.logoutTimer = setTimeout(() => {\n        this.logoutFlag = false;\n      }, 2000);\n      this.onNetError();\n    }\n    this.logoutCbMap.forEach(callback => {\n      this._safeOnCallback(callback, loginStatus);\n    });\n  }\n  isLogin() {\n    const loginFlag = this.loginInfo != undefined;\n    if (!loginFlag) {\n      _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].info(\'当前状态为未登录，请先登录！\');\n    }\n    return loginFlag;\n  }\n\n  /**\n   * 登录\n   */\n  login(loginInfo) {\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].info(\'melon login\');\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug("login", loginInfo);\n    return new Promise((resolve, reject) => {\n      this._initLoginInfo(loginInfo);\n      if (!this.loginInfo.masterIP || !this.loginInfo.username || !this.loginInfo.password || !this.loginInfo.realm) {\n        resolve({\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_6__.ERROR_CODE.PARAM_INVALID\n        });\n        this.resetLoginInfo();\n        return;\n      }\n      this._getToken(resolve, err => {\n        this.resetLoginInfo();\n        reject(err);\n      });\n    });\n  }\n\n  /**\n   * 登出\n   */\n  logout() {\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].info("melon logout");\n    return new Promise((resolve, reject) => {\n      this.logoutByUser = true;\n      let logoutInfo = _public_baseRequest__WEBPACK_IMPORTED_MODULE_3__["default"].getBaseReq();\n      logoutInfo.cmd_name = "puc_logout";\n      logoutInfo.token = _public_baseRequest__WEBPACK_IMPORTED_MODULE_3__["default"].user.token;\n      _protocol_http__WEBPACK_IMPORTED_MODULE_2__["default"].postNormal({\n        method: \'post\',\n        url: \'\',\n        data: logoutInfo\n      }).then(res => {\n        if ((res === null || res === void 0 ? void 0 : res.result) === _public_constant__WEBPACK_IMPORTED_MODULE_6__.ERROR_CODE.SUCCESS) {\n          // 退出登录成功，清理缓存 \n          this.onEvent({\n            cmd_name: CMD_LOGOUT\n          });\n          this.resetLoginInfo();\n          _protocol_websocket__WEBPACK_IMPORTED_MODULE_4__["default"] === null || _protocol_websocket__WEBPACK_IMPORTED_MODULE_4__["default"] === void 0 ? void 0 : _protocol_websocket__WEBPACK_IMPORTED_MODULE_4__["default"].disconnect();\n          this.logoutByUser = false;\n        }\n        resolve(res);\n      }).catch(err => {\n        this.logoutByUser = false;\n        reject(err);\n      });\n    });\n  }\n  resetLoginInfo() {\n    this.loginInfo = undefined;\n    this.loginAccountInfo = undefined;\n    this.logoutByUser = false;\n    try {\n      _call__WEBPACK_IMPORTED_MODULE_9__["default"].clearCallSession();\n    } catch (error) {\n      _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].error(error);\n    }\n  }\n\n  /**\n   * 设置安全传输模式\n   * （默认情况下，自动根据当前页面的 protocol 进行判断，是否使用 https，此处只是留个后门）\n   * true:  强行使用 https(wss)\n   * false: 强行使用 http(ws)\n   * @param {是否使用 https} isSecure \n   */\n  setProtocolSecure(isSecure) {\n    this.isSecureTransmission = isSecure;\n  }\n\n  /**\n   * 网络断开\n   * 1. 被踢出：不处理\n   * \n   * @param {} msg msg.reason 记录问题原因，后续可分别处理\n   */\n  onNetError(msg) {\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].info(\'Network error\', msg);\n\n    //网络错误例如连接超时间，重置登录信息，断开websocket连接\n    this.resetLoginInfo();\n    _protocol_websocket__WEBPACK_IMPORTED_MODULE_4__["default"] === null || _protocol_websocket__WEBPACK_IMPORTED_MODULE_4__["default"] === void 0 ? void 0 : _protocol_websocket__WEBPACK_IMPORTED_MODULE_4__["default"].disconnect();\n  }\n  _getToken(resolve, reject) {\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].info(\'%cmelon login getToken\', this.COLOR_LOGIN);\n    let header = {\n      \'Content-Type\': "application/x-www-form-urlencoded",\n      Authorization: this.loginInfo.authorization\n    };\n    this.loginInfo.systemType = 1;\n    _protocol_http__WEBPACK_IMPORTED_MODULE_2__["default"].postNormal({\n      method: "post",\n      url: this.loginInfo.url,\n      async: false,\n      headers: header\n    }).then(tokenAck => {\n      if (tokenAck.result === 52400065 && tokenAck.user_type === 15 && tokenAck.user_encryption_type === 0) {\n        _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug(\'login 3K user\');\n        // 用户名@域名:加密的密码\n        this.loginInfo.encryptPwd = crypto_js__WEBPACK_IMPORTED_MODULE_1___default().MD5(this.loginInfo.username.substring(5) + ":" + this.loginInfo.password);\n        let credentials = this.loginInfo.username + "@" + this.loginInfo.realm + ":" + this.loginInfo.encryptPwd + ":" + tokenAck.user_type;\n        let authorization = "Basic " + window.btoa(credentials);\n        this.loginInfo.authorization = authorization;\n        // 识别为3K系统，UI要做判断去掉前5位\n        this.loginInfo.systemType = 2;\n        header.Authorization = authorization;\n        _protocol_http__WEBPACK_IMPORTED_MODULE_2__["default"].postNormal({\n          method: "post",\n          url: this.loginInfo.url,\n          async: false,\n          headers: header\n        }).then(tokenAck => {\n          this._dealGetTokenResponse(tokenAck, resolve, reject);\n        });\n      } else {\n        this._dealGetTokenResponse(tokenAck, resolve, reject);\n      }\n    }).catch(err => {\n      // TODO 此处不直接抛出异常，自己包一层再抛出 baseRequest.getBaseRes\n      _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug(\'_getToken\', err);\n      if (err.result === undefined) {\n        const error = {\n          result: _public_constant__WEBPACK_IMPORTED_MODULE_6__.ERROR_CODE.NETWORK_ERROR,\n          msg: "Network Error"\n        };\n        reject(error);\n        return;\n      }\n      reject(err);\n    });\n  }\n  /**\n   * 获取 token 的返回处理\n   * 1. 成功：继续连接 Websocket\n   * 2. 不成功：\n   *   2.1 当前正在重连，则切一下主备继续重连\n   *   2.2 当前不是主服务，则自动切另一个服务连接；若两个都连过了，则上报失败\n   *   2.3 上报失败\n   * @param {获取token的返回} tokenAck\n   * @param {*} resolve\n   * @param {*} reject\n   */\n  _dealGetTokenResponse(tokenAck, resolve, reject) {\n    if (tokenAck.result == _public_constant__WEBPACK_IMPORTED_MODULE_6__.ERROR_CODE.SUCCESS) {\n      this.loginInfo.token = tokenAck.access_token;\n      this._connectWebsocket(this.loginInfo, resolve, reject);\n    } else {\n      if (tokenAck.result && tokenAck.result !== 0) {\n        resolve({\n          result: tokenAck.result\n        });\n      } else {\n        reject(tokenAck);\n      }\n    }\n  }\n  _connectWebsocket(loginInfo, resolve, reject) {\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].info(\'%cmelon login connectWebsocket\', this.COLOR_LOGIN);\n    _protocol_websocket__WEBPACK_IMPORTED_MODULE_4__["default"].connect(loginInfo.wsUrl, loginInfo.username, loginInfo.encryptPwd, loginInfo.token, loginInfo.realm).then(res => {\n      //http.httpConfig(loginInfo.url, loginInfo.token) 如果这个配置放在此处，当websocketr失败时axiosHttp.defaults.baseURL的值会影响下一次登录\n      this._pucLogin(loginInfo, resolve, reject);\n    }).catch(err => {\n      reject(err);\n    });\n  }\n  _pucLogin(loginInfo, resolve, reject) {\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].info(\'%cmelon login puc_login\', this.COLOR_LOGIN);\n    let loginMsg = {\n      login_type: "web_third_party",\n      user_name: loginInfo.username,\n      password: loginInfo.encryptPwd,\n      token: loginInfo.token,\n      OS: loginInfo.OS ? loginInfo.OS : "Web",\n      product_name: _public_constant__WEBPACK_IMPORTED_MODULE_6__.api_constant.PRODUCT_NAME,\n      version: _public_constant__WEBPACK_IMPORTED_MODULE_6__.api_constant.VERSION,\n      cmd_name: "puc_login",\n      cmd_guid: _common__WEBPACK_IMPORTED_MODULE_7__["default"].guid(),\n      puc_id: null,\n      system_id: null,\n      user_id: loginInfo.username,\n      realm: loginInfo.realm\n    };\n    // 这里就不去引用 websocketHelper 了，如果后面外部用的多，再把 msgType 提出来\n    let msgTypeTokenCheck = 3;\n    _protocol_websocket__WEBPACK_IMPORTED_MODULE_4__["default"].sendSync(loginMsg, msgTypeTokenCheck).then(loginAck => {\n      this._dealPucLoginAck(loginAck, resolve, reject);\n    }).catch(err => {\n      reject(err);\n    });\n  }\n  _dealPucLoginAck(loginAck, resolve, reject) {\n    if (loginAck.result == _public_constant__WEBPACK_IMPORTED_MODULE_6__.ERROR_CODE.SUCCESS) {\n      _public_baseRequest__WEBPACK_IMPORTED_MODULE_3__["default"].user = loginAck;\n\n      // F5刷新时，此值为空值\n      loginAck.systemType = this.loginInfo.systemType || undefined;\n      _public_baseRequest__WEBPACK_IMPORTED_MODULE_3__["default"].user.token = this.loginInfo.token;\n      _protocol_http__WEBPACK_IMPORTED_MODULE_2__["default"].httpConfig(this.loginInfo.httpBaseUrl, this.loginInfo.token);\n      this.onEvent({\n        cmd_name: CMD_LOGIN\n      });\n      _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug("_dealPucLoginAck", loginAck);\n      const loginResult = {\n        result: loginAck.result,\n        realm: loginAck.realm,\n        user_id: loginAck.user_id,\n        token: loginAck.token,\n        user_guid: loginAck.user_guid,\n        dispatcher_name: loginAck.dispatcher_name,\n        puc_id: loginAck.puc_id,\n        basedata_id: (0,_common_utils__WEBPACK_IMPORTED_MODULE_5__.genLocalGuid)({\n          puc_id: loginAck.puc_id,\n          system_id: \'000\',\n          //loginAck.system_id,现在服务端没有传\n          dispatcher_account: loginAck.user_id,\n          number_type: loginAck.number_type,\n          time_slot: ""\n        }, \'dispatcher_account\')\n      };\n      resolve(loginResult);\n      _littleLemon__WEBPACK_IMPORTED_MODULE_8__["default"].basedata.fetchSystemList();\n      _littleLemon__WEBPACK_IMPORTED_MODULE_8__["default"].basedata.fetchPucList();\n      this.getLoginAccountInfo();\n    } else if (loginAck.result == _public_constant__WEBPACK_IMPORTED_MODULE_6__.ERROR_CODE.LOGIN_REPEAT) {\n      // reject(loginAck)\n      resolve({\n        result: loginAck.result\n      });\n    } else {\n      if (loginAck.result && loginAck.result !== 0) {\n        resolve({\n          result: loginAck.result\n        });\n      } else {\n        reject(loginAck);\n      }\n    }\n  }\n  getLoginAccountInfo() {\n    return new Promise((resolve, reject) => {\n      try {\n        if (!this.isLogin()) {\n          return resolve({\n            result: _public_constant__WEBPACK_IMPORTED_MODULE_6__.ERROR_CODE.NOT_LOGIN,\n            account_info: this.loginAccountInfo\n          });\n        }\n        if (this.loginAccountInfo) {\n          return resolve({\n            result: 0,\n            account_info: this.loginAccountInfo\n          });\n        }\n        const param = {\n          product_name: _public_constant__WEBPACK_IMPORTED_MODULE_6__.api_constant.WEB_PRODUCT_NAME,\n          version: _public_constant__WEBPACK_IMPORTED_MODULE_6__.api_constant.VERSION,\n          cmd_name: "account_list_request",\n          cmd_guid: _common__WEBPACK_IMPORTED_MODULE_7__["default"].guid(),\n          realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_3__["default"].user.realm,\n          puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_3__["default"].user.puc_id,\n          user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_3__["default"].user.user_id\n        };\n        _protocol_http__WEBPACK_IMPORTED_MODULE_2__["default"].postSync(param).then(resp => {\n          var _resp$account_list;\n          //数据处理后再返给外层\n          /**\n           * @type {ListAck}\n           */\n          const newResp = {\n            result: resp.result,\n            account_info: undefined\n          };\n          if ((resp === null || resp === void 0 ? void 0 : resp.result) === 0 && ((_resp$account_list = resp.account_list) === null || _resp$account_list === void 0 ? void 0 : _resp$account_list.length) > 0) {\n            const userItem = resp.account_list.find(v => v.guid === _public_baseRequest__WEBPACK_IMPORTED_MODULE_3__["default"].user.user_guid);\n            this.loginAccountInfo = {\n              basedata_id: (0,_common_utils__WEBPACK_IMPORTED_MODULE_5__.genLocalGuid)({\n                puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_3__["default"].user.puc_id,\n                system_id: userItem.system_id || \'000\',\n                dispatcher_account: _public_baseRequest__WEBPACK_IMPORTED_MODULE_3__["default"].user.user_id,\n                number_type: _public_baseRequest__WEBPACK_IMPORTED_MODULE_3__["default"].user.number_type,\n                time_slot: ""\n              }, \'dispatcher_account\', true),\n              realm: _public_baseRequest__WEBPACK_IMPORTED_MODULE_3__["default"].user.realm,\n              user_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_3__["default"].user.user_id,\n              token: _public_baseRequest__WEBPACK_IMPORTED_MODULE_3__["default"].user.token,\n              user_guid: _public_baseRequest__WEBPACK_IMPORTED_MODULE_3__["default"].user.user_guid,\n              dispatcher_name: _public_baseRequest__WEBPACK_IMPORTED_MODULE_3__["default"].user.dispatcher_name,\n              puc_id: _public_baseRequest__WEBPACK_IMPORTED_MODULE_3__["default"].user.puc_id\n            };\n            newResp.account_info = this.loginAccountInfo;\n          }\n          resolve(newResp);\n        }).catch(err => {\n          reject(err);\n        });\n      } catch (error) {\n        _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].error(\'getLoginAccountInfo catched error\', error);\n        reject(error);\n      }\n    });\n  }\n  _initLoginInfo(loginInfo) {\n    this.resetLoginInfo();\n    this.loginInfo = JSON.parse(JSON.stringify(loginInfo));\n\n    // 以下的几个参数先不开发给外部使用。\n    if (!this.loginInfo.pwdNeedEncrypt) {\n      this.loginInfo.pwdNeedEncrypt = true;\n    }\n    // 是否采用Nginx代理 1 域名，2 IP+端口\n    if (!this.loginInfo.nginxProxy) {\n      this.loginInfo.nginxProxy = 2;\n    }\n    // 默认是http\n    this.loginInfo.protocolSecure = 0;\n    if (this.loginInfo.webpucUrl) {\n      var url = undefined;\n      try {\n        url = new URL(this.loginInfo.webpucUrl);\n      } catch (error) {\n        _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].error(error);\n      }\n      if (url !== undefined) {\n        const {\n          port,\n          hostname,\n          protocol\n        } = url;\n        this.loginInfo.masterIP = hostname;\n        this.loginInfo.masterHttpPort = port;\n        this.loginInfo.masterWSPort = port;\n        // this.loginInfo.masterHttpPort = port === \'\' ? "443" : port;\n        // this.loginInfo.masterWSPort = port === \'\' ? "443" : port;\n        this.loginInfo.protocolSecure = protocol === \'https:\' ? 1 : 0;\n      }\n    }\n    //密码是否需要加密处理\n    if (this.loginInfo.pwdNeedEncrypt) {\n      this.loginInfo.encryptPwd = this._encryptByDES(this.loginInfo.password, this.key);\n    } else {\n      this.loginInfo.encryptPwd = this.loginInfo.password;\n    }\n\n    // 用户名@域名:加密的密码\n    let credentials = this.loginInfo.username + "@" + this.loginInfo.realm + ":" + this.loginInfo.encryptPwd;\n    let authorization = "Basic " + window.btoa(credentials);\n    this.loginInfo.authorization = authorization;\n\n    //设置安全协议\n    this.setProtocolSecure(this.loginInfo.protocolSecure);\n\n    //拼接协议和端口\n    this._setLoginInfoUrl();\n  }\n  /**\n   * 根据主备信息，设置登录地址\n   * @param {是否是主服务器}} isMaster\n   */\n  _setLoginInfoUrl() {\n    // 想连备机，且备机的信息都全的，连之。否则连主\n    this.COLOR_LOGIN = \'color: green\';\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].info(\'%cmelon ready to login to MasterServer\', this.COLOR_LOGIN);\n    if (this.loginInfo.nginxProxy == 1) {\n      this.loginInfo.url = this._getHttpPatName(true);\n      this.loginInfo.wsUrl = this._getWebsocketPatName(true);\n      this.loginInfo.httpBaseUrl = this._getHttpPatName(true);\n      _public_baseRequest__WEBPACK_IMPORTED_MODULE_3__["default"].baseInfo.frsUrl = this._getFrsPatName(true);\n    } else {\n      this.loginInfo.url = this._getHttpProtocol() + this._getHttpHost(true) + this._getHttpPatName(true);\n      this.loginInfo.wsUrl = this._getWebsocketProtocol() + this._getWebsocketHost(true) + this._getWebsocketPatName(true);\n      this.loginInfo.httpBaseUrl = this._getHttpProtocol() + this._getHttpHost(true);\n      _public_baseRequest__WEBPACK_IMPORTED_MODULE_3__["default"].baseInfo.frsUrl = this._getHttpProtocol() + this._getWebsocketHost(true) + this._getFrsPatName(true);\n    }\n  }\n  _reconnect() {\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].info(\'melon reconnect\');\n    return new Promise((resolve, reject) => {\n      this._setLoginInfoUrl(this.isLoginMaster);\n      this._reconnectStart(resolve, reject);\n    });\n  }\n  _reconnectStop() {\n    if (this.checker) {\n      _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].info(\'reconnect: stop\');\n      clearTimeout(this.checker);\n      this.checker = null;\n    }\n  }\n  _reconnectStart(resolve, reject) {\n    if (!this.checker) {\n      this._reconnectStop();\n    }\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].info(\'reconnect: start\');\n    this.checker = setTimeout(() => {\n      this._getToken(resolve, reject);\n    }, this.interval);\n  }\n\n  //DES加密\n  _encryptByDES(message, key) {\n    var keyHex = crypto_js__WEBPACK_IMPORTED_MODULE_1___default().enc.Utf8.parse(key);\n    var ivHex = crypto_js__WEBPACK_IMPORTED_MODULE_1___default().enc.Utf8.parse(key);\n    var encrypted = crypto_js__WEBPACK_IMPORTED_MODULE_1___default().DES.encrypt(message, keyHex, {\n      iv: ivHex,\n      mode: (crypto_js__WEBPACK_IMPORTED_MODULE_1___default().mode).CBC,\n      padding: (crypto_js__WEBPACK_IMPORTED_MODULE_1___default().pad).Pkcs7\n    });\n    return encrypted.ciphertext.toString();\n  }\n  //DES解密\n  _decryptByDES(ciphertext, key) {\n    var keyHex = crypto_js__WEBPACK_IMPORTED_MODULE_1___default().enc.Utf8.parse(key);\n    var ivHex = crypto_js__WEBPACK_IMPORTED_MODULE_1___default().enc.Utf8.parse(key);\n    var decrypted = crypto_js__WEBPACK_IMPORTED_MODULE_1___default().DES.decrypt({\n      ciphertext: crypto_js__WEBPACK_IMPORTED_MODULE_1___default().enc.Hex.parse(ciphertext)\n    }, keyHex, {\n      iv: ivHex,\n      mode: (crypto_js__WEBPACK_IMPORTED_MODULE_1___default().mode).CBC,\n      padding: (crypto_js__WEBPACK_IMPORTED_MODULE_1___default().pad).Pkcs7\n    });\n    var result_value = decrypted.toString((crypto_js__WEBPACK_IMPORTED_MODULE_1___default().enc).Utf8);\n    return result_value;\n  }\n  _getHttpProtocol() {\n    if (this.isSecureTransmission == 1) {\n      return \'https://\';\n    } else if (this.isSecureTransmission == 0) {\n      return \'http://\';\n    } else if (window) {\n      return window.location.protocol + "//";\n    } else {\n      return \'http://\';\n    }\n  }\n  _getWebsocketProtocol() {\n    if (this.isSecureTransmission == 1) {\n      return \'wss://\';\n    } else if (this.isSecureTransmission == 0) {\n      return \'ws://\';\n    } else if (window && window.location.protocol == \'https:\') {\n      return \'wss://\';\n    } else {\n      return \'ws://\';\n    }\n  }\n  _getHttpHost(isMaster) {\n    if (isMaster) {\n      if (this.loginInfo.masterIP && this.loginInfo.masterHttpPort) {\n        return this.loginInfo.masterIP + ":" + this.loginInfo.masterHttpPort;\n      } else if (this.loginInfo.masterIP) {\n        return this.loginInfo.masterIP;\n      } else {\n        return "127.0.0.1:404";\n      }\n    } else {\n      if (this.loginInfo.slaveIP && this.loginInfo.slaveHttpPort) {\n        return this.loginInfo.slaveIP + ":" + this.loginInfo.slaveHttpPort;\n      } else if (this.loginInfo.masterIP) {\n        return this.loginInfo.masterIP;\n      } else {\n        return "127.0.0.1:404";\n      }\n    }\n  }\n  _getWebsocketHost(isMaster) {\n    if (isMaster) {\n      if (this.loginInfo.masterIP && this.loginInfo.masterWSPort) {\n        return this.loginInfo.masterIP + ":" + this.loginInfo.masterWSPort;\n      } else if (this.loginInfo.masterIP) {\n        return this.loginInfo.masterIP;\n      } else {\n        return "127.0.0.1:404";\n      }\n    } else {\n      if (this.loginInfo.slaveIP && this.loginInfo.slaveWSPort) {\n        return this.loginInfo.slaveIP + ":" + this.loginInfo.slaveWSPort;\n      } else if (this.loginInfo.masterIP) {\n        return this.loginInfo.masterIP;\n      } else {\n        return "127.0.0.1:404";\n      }\n    }\n  }\n  /**\n   * 获取 http 地址的后缀\n   * @param {是否是连主服务器} isMaster \n   */\n  _getHttpPatName(isMaster) {\n    if (isMaster && this.loginInfo.masterHttpUrl) {\n      return this.loginInfo.masterHttpUrl;\n    }\n    if (!isMaster && this.loginInfo.slaveHttpUrl) {\n      return this.loginInfo.slaveHttpUrl;\n    }\n    return this.HTTP_PAT_NAME;\n  }\n  /**\n   * 获取 websocket 地址的后缀\n   * @param {是否是连主服务器} isMaster \n   * @returns \n   */\n  _getWebsocketPatName(isMaster) {\n    if (isMaster && this.loginInfo.masterWSUrl) {\n      return this.loginInfo.masterWSUrl;\n    }\n    if (!isMaster && this.loginInfo.slaveWSUrl) {\n      return this.loginInfo.slaveWSUrl;\n    }\n    return this.WEBSOCKET_PAT_NAME;\n  }\n\n  /**\n  * 获取 多媒体 地址的后缀\n  * @param {是否是连主服务器} isMaster\n  * @returns\n  */\n  _getFrsPatName(isMaster) {\n    if (isMaster && this.loginInfo.masterFrsUrl) {\n      return this.loginInfo.masterFrsUrl;\n    }\n    if (!isMaster && this.loginInfo.slaveFrsUrl) {\n      return this.loginInfo.slaveFrsUrl;\n    }\n    return this.FRS_PAT_NAME;\n  }\n\n  /*\n  当用户按F5刷新时需要重新连接webscoetk\n  后台需要在3倍的心跳时间内保持这个TOKEN不变\n  超过这个周期后使这个ToKen失效，用户可以再次重新登录\n  */\n  reConnectWebsocket(loginInfo) {\n    return new Promise((resolve, reject) => {\n      loginInfo.password = "F5";\n      return this.refreshFFive(loginInfo).then(resolve, err => {\n        this.resetLoginInfo();\n        reject(err);\n      });\n    });\n  }\n\n  /**\n   * 前台页面F5刷新后可以调用此方法\n   * 用SessionStorage中的信息重建websocket\n   * @param {*} loginInfo \n   * @param {*} resolve \n   * @param {*} reject \n   */\n  refreshFFive(loginInfo) {\n    return new Promise((resolve, reject) => {\n      this._initLoginInfo(loginInfo);\n      this._connectWebsocket(this.loginInfo, resolve, reject);\n    });\n  }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new Signin());\n\n//# sourceURL=webpack://lemon/./lemon/modules/signin.js?'
          );

          /***/
        },

      /***/ "./lemon/protocol/http.js":
        /*!********************************!*\
  !*** ./lemon/protocol/http.js ***!
  \********************************/
        /***/ (
          __unused_webpack_module,
          __webpack_exports__,
          __webpack_require__
        ) => {
          "use strict";
          eval(
            "__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _common_log__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/log */ \"./lemon/common/log.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"./node_modules/axios/index.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _websocket__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./websocket */ \"./lemon/protocol/websocket.js\");\n/* harmony import */ var _common_unifiedErrorHand__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../common/unifiedErrorHand */ \"./lemon/common/unifiedErrorHand.js\");\n/* harmony import */ var _public_constant__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../public/constant */ \"./lemon/public/constant.js\");\n\n\n\n\n\nconst axiosHttp = axios__WEBPACK_IMPORTED_MODULE_1___default().create({\n  timeout: 60000\n});\nclass http {\n  /**\n  * 全局设置 Header、URI等\n  */\n  httpConfig(baseUrl, token) {\n    axiosHttp.defaults.baseURL = baseUrl;\n    //axiosHttp.defaults.headers.common['Authorization'] = 'Bearer ' + token;\n    axiosHttp.defaults.headers.Authorization = 'Bearer ' + token;\n    axiosHttp.defaults.headers.post['Content-Type'] = 'application/json; charset=utf-8';\n  }\n\n  /**\n   * http 发送(/has)\n   * 请使用此方法\n   * @param {{cmd_guid: string, user_id, member_guid: string, conference_guid: string, product_name: string, version: string, cmd_name: string}} jsonData\n   */\n  postSync(jsonData) {\n    return new Promise(function (resolve, reject) {\n      _common_log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].debug('postSync发送请求体：', JSON.stringify(jsonData));\n      // 1. 如果是异步回来的消息，通过 websocket 自行 resolve\n      _websocket__WEBPACK_IMPORTED_MODULE_2__[\"default\"].addTimerMessage(jsonData.cmd_guid, jsonData.cmd_name, resolve, reject);\n      axiosHttp.post('/has', jsonData).then(res => {\n        _common_log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].debug('postSync发送同步响应体：', JSON.stringify(res, ['status', 'data']));\n        // 2. 如果是response同步回来的，在此处 resolve\n        if (res && res.data && res.data.cmd_guid) {\n          _websocket__WEBPACK_IMPORTED_MODULE_2__[\"default\"].removeTimerMessage(res.data.cmd_guid);\n          resolve(res.data);\n          _common_unifiedErrorHand__WEBPACK_IMPORTED_MODULE_3__[\"default\"].formatConversion(res.data, 'postSync_http');\n        }\n      }).catch(err => {\n        _common_log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error('postSync请求异常，cmd_name：' + jsonData.cmd_name + '，异常信息：', err);\n        reject(err);\n        _common_unifiedErrorHand__WEBPACK_IMPORTED_MODULE_3__[\"default\"].errorConversion(err, 'postSync_exception');\n      });\n    });\n  }\n\n  /**\n   * http 发送\n   * 呼叫专用（呼叫没有 cmd_guid，需要使用 call_id）\n   */\n  callPost(jsonData) {\n    _common_log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].debug('callPost请求信令：', jsonData.call_id, JSON.stringify(jsonData));\n    return new Promise(function (resolve, reject) {\n      _websocket__WEBPACK_IMPORTED_MODULE_2__[\"default\"].addTimerMessage(jsonData.call_id, jsonData.cmd_name, resolve, reject);\n      axiosHttp.post('/has', jsonData).then(res => {\n        _common_log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].debug('callPost同步响应：', jsonData.call_id, JSON.stringify(res.data));\n        resolve(res.data);\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  /**\n   * 不关注响应 ack\n   */\n  callPostAsync(jsonData) {\n    _common_log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].info('call - http - 发送数据，不关注响应！', jsonData.call_id, JSON.stringify(jsonData));\n    axiosHttp.post('/has', jsonData).then(res => {\n      _common_log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].debug('call - http - 信令发送成功', jsonData.call_id);\n    }).catch(err => {\n      _common_log__WEBPACK_IMPORTED_MODULE_0__[\"default\"].error('call - http - 信令发送失败', jsonData.call_id, JSON.stringify(err));\n    });\n  }\n  postNormal(obj) {\n    // 判断参数Obj中的Url属性，如果没有这个属性或者为空值，填写默认值 /has\n    if (!obj.url) {\n      obj.url = '/has';\n    }\n    return new Promise(function (resolve, reject) {\n      axiosHttp(obj).then(res => {\n        if (res && res.data) {\n          resolve(res.data);\n        } else {\n          reject('res error');\n        }\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n  postNormalNoData(obj) {\n    // 判断参数Obj中的Url属性，如果没有这个属性或者为空值，填写默认值 /has\n    if (!obj.url) {\n      obj.url = '/has';\n    }\n    return new Promise(function (resolve, reject) {\n      axiosHttp(obj).then(res => {\n        if (res.status === 200) {\n          resolve({\n            result: 0\n          });\n        } else {\n          resolve({\n            result: _public_constant__WEBPACK_IMPORTED_MODULE_4__.ERROR_CODE.REQUEST_FAIL\n          });\n        }\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  /**\n   * 上传文件\n   * @param {*} url \n   * @param {*} header \n   * @param {*} fileStream \n   */\n  postFile(url, header, fileStream) {\n    return new Promise(function (resolve, reject) {\n      axiosHttp({\n        method: \"post\",\n        url: url,\n        async: false,\n        headers: header,\n        data: fileStream,\n        timeout: 30000\n      }).then(res => {\n        if (res) {\n          resolve(res);\n        } else {\n          reject('res error');\n        }\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n\n  /**\n   * 下载文件\n   * @param {*} fileUrl \n   * @param {*} header \n   */\n  getFile(fileUrl, header) {\n    return new Promise(function (resolve, reject) {\n      axiosHttp({\n        method: \"get\",\n        url: fileUrl,\n        async: false,\n        headers: header,\n        timeout: 30000,\n        responseType: 'blob'\n      }).then(res => {\n        if (res) {\n          resolve(res);\n        } else {\n          reject('res error');\n        }\n      }).catch(err => {\n        reject(err);\n      });\n    });\n  }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new http());\n\n//# sourceURL=webpack://lemon/./lemon/protocol/http.js?"
          );

          /***/
        },

      /***/ "./lemon/protocol/webrtc.js":
        /*!**********************************!*\
  !*** ./lemon/protocol/webrtc.js ***!
  \**********************************/
        /***/ (
          __unused_webpack_module,
          __webpack_exports__,
          __webpack_require__
        ) => {
          "use strict";
          eval(
            '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _common_log__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/log */ "./lemon/common/log.js");\n/* harmony import */ var _modules_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../modules/common */ "./lemon/modules/common.js");\n/* harmony import */ var _public_baseRequest__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../public/baseRequest */ "./lemon/public/baseRequest.js");\n/* harmony import */ var _public_constant__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../public/constant */ "./lemon/public/constant.js");\n\n\n\n\nclass webrtc {\n  constructor() {\n    /* 设备列表 */\n    this.deviceList = [];\n\n    /* 音频输入设备列表 */\n    this.audioInputDeviceList = [];\n\n    /* 音频输出设备列表 */\n    this.audioOutputDeviceList = [];\n\n    /* 视频输入设备列表 */\n    this.videoInputDeviceList = [];\n\n    /* 判断是否为第一次获取浏览器设备隐私权限，默认为true */\n    this.initFlag = true;\n\n    /* 判断是否为第一次获取设备列表 */\n    this.firstGetDeviceFlag = true;\n\n    /* 当前设置的媒体信息 */\n    this.options = {\n      audioInput: null,\n      videoInput: null,\n      audioOutput: null\n    };\n  }\n\n  /**\n   * 判断当前浏览器是否支持\n   *  备注：\n   *      chrome 和 edge 有时会失效\n   *  解决方法:\n   *      chrome://flags/#unsafely-treat-insecure-origin-as-secure 设置为enable 且要输入 ip:port\n   */\n  _isSupport() {\n    if (!navigator.mediaDevices.getUserMedia) {\n      _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].error(\'webrtc - 当前浏览器不支持WebRTC！\');\n      this.initFlag = false;\n      return false;\n    }\n    return true;\n  }\n\n  /**\n      WebRTC 媒体类型转换为 项目用媒体类型：\n          - 0：视频输出\n          - 2：音频输入\n          - 3：音频输出\n   */\n  _webRTCKind2MediaType(kind) {\n    if (kind === \'videoinput\') {\n      return 0;\n    } else if (kind === \'audioinput\') {\n      return 2;\n    } else if (kind === \'audiooutput\') {\n      return 3;\n    }\n    return kind;\n  }\n\n  /**\n   * 获取设备列表\n   */\n  getDevices(initFlag) {\n    /* 下面代码的目的是获取浏览器权限 */\n    if (initFlag) {\n      navigator.mediaDevices.getUserMedia({\n        audio: true,\n        video: true\n      }).then(stream => {\n        stream.getTracks().forEach(track => {\n          track.stop();\n        });\n        stream = null;\n      }).catch(err => {\n        _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].error(\'webrtc - getDevices - 初始化权限时获取媒体流失败\', err);\n      });\n      this.initFlag = false;\n    }\n    return navigator.mediaDevices.enumerateDevices();\n  }\n\n  /**\n   * 获取设备列表外部接口\n   */\n  getMediaDevices() {\n    return new Promise((resolve, reject) => {\n      this.deviceList.splice(0);\n      this.videoInputDeviceList.splice(0);\n      this.audioInputDeviceList.splice(0);\n      this.audioOutputDeviceList.splice(0);\n\n      // 获取本地音视频设备列表\n      this.getDevices(this.initFlag).then(deviceInfos => {\n        for (let i = 0; i < deviceInfos.length; i++) {\n          const device = deviceInfos[i];\n          device.guid = device.deviceId ? device.deviceId : _modules_common__WEBPACK_IMPORTED_MODULE_1__["default"].guid();\n          device.alias = device.label ? device.label : \'\';\n          device.type = this._webRTCKind2MediaType(device.kind);\n          this.deviceList.push(device);\n          if (device.kind === \'videoinput\') {\n            this.videoInputDeviceList.push(device);\n          }\n          if (device.kind === \'audioinput\') {\n            this.audioInputDeviceList.push(device);\n          }\n          if (device.kind === \'audiooutput\') {\n            this.audioOutputDeviceList.push(device);\n          }\n          if (this.firstGetDeviceFlag) {\n            if (this.audioInputDeviceList.length > 0) {\n              this.setAudioInputDevice(this.audioInputDeviceList[0]);\n            }\n            if (this.audioOutputDeviceList.length > 0) {\n              this.setAudioInputDevice(this.audioOutputDeviceList[0]);\n            }\n            if (this.videoInputDeviceList.length > 0) {\n              this.setVideoInputDevice(this.videoInputDeviceList[0]);\n            }\n            this.firstGetDeviceFlag = false;\n          }\n        }\n        resolve(this.deviceList);\n      }).catch(reject);\n    });\n  }\n\n  /**\n   * 音视频媒体流采集\n   */\n  getMedia(constraints) {\n    return new Promise((resolve, reject) => {\n      if (!this._isSupport()) {\n        reject(\'浏览器不支持WebRTC!\');\n      }\n      _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug(\'webrtc -getMedia  constraints！\', constraints);\n      navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n        resolve(stream);\n      }).catch(function (err) {\n        _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].error(\'webrtc - 获取媒体流失败！\', err);\n        if ((err === null || err === void 0 ? void 0 : err.name) === \'OverconstrainedError\') {\n          navigator.mediaDevices.getUserMedia({\n            video: true,\n            audio: false\n          }).then(function (stream) {\n            _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug(\'webrtc1 - getMedia suported frame size stream:\', stream);\n            // 获取视频轨道\n            const videoTrack = stream.getVideoTracks()[0];\n\n            // 获取摄像头的设置\n            const settings = videoTrack.getSettings();\n            _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug(\'webrtc - getMedia suported frame size settings\', JSON.stringify(settings));\n            reject(_public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].getBaseResp(_public_constant__WEBPACK_IMPORTED_MODULE_3__.ERROR_CODE.VIDEO_FRAME_SIZE_ERROR));\n            videoTrack.stop();\n          }).catch(err => {\n            _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug(\'webrtc - getMedia suported frame err\', err);\n            // reject(\'获取媒体流失败:\' + err)   \n            reject(_public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].getBaseResp(_public_constant__WEBPACK_IMPORTED_MODULE_3__.ERROR_CODE.GET_MEDIA_FAIL));\n          });\n        } else {\n          // reject(\'获取媒体流失败:\' + err)\n          reject(_public_baseRequest__WEBPACK_IMPORTED_MODULE_2__["default"].getBaseResp(_public_constant__WEBPACK_IMPORTED_MODULE_3__.ERROR_CODE.GET_MEDIA_FAIL));\n        }\n      });\n      this.initFlag = false;\n    });\n  }\n\n  /** 创建PeerConnection */\n  getPeerConnection(onicecandidate, ontrack, onIceGatheringComplete) {\n    const pc = new RTCPeerConnection(null);\n\n    /* 获取到候选者时触发 */\n    pc.onicecandidate = onicecandidate;\n\n    /* 收到对端媒体流时触发 */\n    pc.ontrack = ontrack;\n\n    /* 候选者收集状态变化时候触发 */\n    pc.onicegatheringstatechange = function () {\n      _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug(\'webrtc - PeerConnection初始化 - 当前ICE候选者收集状态为：\', JSON.stringify(pc.iceGatheringState));\n      if (pc.iceGatheringState === \'complete\') {\n        /* 候选者收集完成时候触发 */\n        onIceGatheringComplete();\n      }\n    };\n    return pc;\n  }\n\n  /** 绑定音视频流到PeerConnection */\n  addTracks(pc, stream) {\n    if (pc && stream) {\n      stream.getTracks().forEach(function (track) {\n        pc.addTrack(track, stream);\n      });\n    } else {\n      _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].error(\'webrtc - 音视频流绑定 - 绑定音视频流到PeerConnection失败，PeerConnection或媒体流为空!~\');\n    }\n  }\n\n  /** 绑定candidate */\n  addIceCandidate(pc, candidate) {\n    return new Promise(function (resolve, reject) {\n      if (pc) {\n        pc.addIceCandidate(new RTCIceCandidate(candidate)).then(resolve).catch(reject);\n      } else {\n        reject(\'RTCPeerConnection为空\');\n      }\n    });\n  }\n\n  /** 创建Offer */\n  createOffer(pc) {\n    return new Promise((resolve, reject) => {\n      if (pc) {\n        pc.createOffer().then(desc => {\n          pc.setLocalDescription(desc).then(() => {\n            resolve(desc);\n          }).catch(err => {\n            _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].error(\'webrtc - offer创建 - 设置本地Offer失败!~\');\n            reject(err);\n          });\n        }).catch(err => {\n          _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].error(\'webrtc - offer创建 - 创建本地Offer失败!~\');\n          reject(err);\n        });\n      } else {\n        _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].error(\'webrtc - offer创建 - 创建Offer失败，PeerConnection为空!~\');\n        reject(\'创建Offer失败，PeerConnection为空！\');\n      }\n    });\n  }\n\n  /* 创建应答 */\n  createAnswer(pc, remoteSdp) {\n    return new Promise((resolve, reject) => {\n      if (pc) {\n        const remoteDesc = new RTCSessionDescription(remoteSdp);\n        pc.setRemoteDescription(remoteDesc).then(() => {\n          pc.createAnswer().then(desc => {\n            pc.setLocalDescription(desc).then(() => {\n              resolve(desc);\n            }).catch(err => {\n              _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].error("设置本地Answer失败！", err);\n              reject("设置本地Answer失败！");\n            });\n          }).catch(err => {\n            _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].error("创建本地Answer失败！", err);\n            reject("创建本地Answer失败！");\n          });\n        }).catch(err => {\n          _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].error("设置远端Offer失败！", err);\n          reject("设置远端Offer失败！");\n        });\n      } else {\n        _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].error("创建Answer失败，PeerConnection为空！");\n        reject(\'创建Answer失败，PeerConnection为空！\');\n      }\n    });\n  }\n\n  /** 接收应答 */\n  receiveAnswer(pc, remoteSdp) {\n    return new Promise(function (resolve, reject) {\n      if (pc) {\n        const remoteDesc = new RTCSessionDescription(remoteSdp);\n        pc.setRemoteDescription(remoteDesc).then(resolve).catch(err => {\n          _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].error(\'webrtc - answer接收 - 设置远端Answer失败!~\', err);\n          reject("设置远端Answer失败！");\n        });\n      } else {\n        _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].error(\'webrtc - answer接收 - 接收Answer失败，PeerConnection为空!~\');\n        reject(\'接收Answer失败，PeerConnection为空！\');\n      }\n    });\n  }\n\n  /** 关闭PeerConnection,释放资源 */\n  close(pc) {\n    if (pc) {\n      _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].info(\'webrtc - 释放资源 - 释放PeerConnection资源！\');\n      pc.close();\n      pc.onicecandidate = null;\n      pc.ontrack = null;\n      pc = null;\n    }\n  }\n\n  /**\n      音频流静音/取消静音操作\n      isMute:\n          - true: 静音\n          - false: 取消静音\n  */\n  muteAudio(stream, isMute) {\n    return new Promise(function (resolve, reject) {\n      if (stream) {\n        stream.getAudioTracks().forEach(function (track) {\n          track.enabled = !isMute;\n        });\n        resolve();\n      } else {\n        _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].error(\'webrtc - 静音 - 音频静音失败，媒体流为空！\');\n        reject("webrtc - 音频静音失败，媒体流为空！");\n      }\n    });\n  }\n\n  /**\n      视频黑屏/取消黑屏操作\n      isBlack:\n          - true: 黑屏\n          - false: 取消黑屏\n  */\n  muteVideo(stream, isBlack) {\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug("muteVideo isBlack =", isBlack);\n    return new Promise(function (resolve, reject) {\n      if (stream) {\n        stream.getVideoTracks().forEach(function (track) {\n          track.enabled = !isBlack;\n        });\n        resolve();\n      } else {\n        reject("webrtc - 视频黑屏失败，媒体流为空！");\n      }\n    });\n  }\n\n  /** 获取当前设置的媒体设备信息 */\n  getOptions() {\n    return this.options;\n  }\n\n  /** 设置当前语音输出设备 */\n  setAudioOutputDevice(audioOutputDev) {\n    this.options.audioOutput = audioOutputDev;\n  }\n\n  /** 获取当前语音输出设备 */\n  getAudioOutputDevice() {\n    return this.options.audioOutput;\n  }\n\n  /** 设置当前语音输入设备 */\n  setAudioInputDevice(audioInputDev) {\n    this.options.audioInput = audioInputDev;\n  }\n\n  /** 获取当前语音输入设备 */\n  getAudioInputDevice() {\n    return this.options.audioInput;\n  }\n\n  /** 设置当前视频输入设备 */\n  setVideoInputDevice(videoInputDev) {\n    this.options.videoInput = videoInputDev;\n  }\n\n  /** 获取当前视频输入设备 */\n  getVideoInputDevice() {\n    return this.options.videoInput;\n  }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new webrtc());\n\n//# sourceURL=webpack://lemon/./lemon/protocol/webrtc.js?'
          );

          /***/
        },

      /***/ "./lemon/protocol/websocket.js":
        /*!*************************************!*\
  !*** ./lemon/protocol/websocket.js ***!
  \*************************************/
        /***/ (
          __unused_webpack_module,
          __webpack_exports__,
          __webpack_require__
        ) => {
          "use strict";
          eval(
            '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _common_log__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/log */ "./lemon/common/log.js");\n/* harmony import */ var _common_unifiedErrorHand__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/unifiedErrorHand */ "./lemon/common/unifiedErrorHand.js");\n/* harmony import */ var _public_constant__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../public/constant */ "./lemon/public/constant.js");\n\n\n\nconst CHECK_DATA_LENGTH = 16;\nconst CHECK_DATA_INDEX_MSG_TYPE = 11;\nclass websocket {\n  constructor() {\n    this._url = null;\n    this._username = null;\n    this._password = null;\n    this._realm = null;\n    this._token = null;\n    this.onCallback = null;\n    this._websocket = null;\n    this._reqTimeoutChecker = new reqTimeoutChecker();\n    this.wsHelper = new WebsocketHelper();\n    this._aliveChecker = new aliveChecker(() => {\n      this.timeoutCallback();\n    });\n    this._clientInitiativeChecker = null; // 客户端主动根据心跳间隔主动计时，超出间隔且收到新的业务消息发送心跳\n    this._clientInitiativeStatus = false; // 客户端是否发送心跳状态\n    /**\n     * @type {Map<string,Function>}\n     */\n    this._messageHanlderMap = new Map();\n  }\n\n  /* 初始化与web接入服务器连接 */\n  connect(basePath, username, password, token, realm) {\n    this._url = basePath;\n    this._username = username;\n    this._password = password;\n    this._token = token;\n    this._realm = realm;\n    this.close();\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug("melon login websocket ready connect");\n    return new Promise((resolve, reject) => {\n      if ("WebSocket" in window) {\n        this._websocket = new WebSocket(this._url);\n      } else if ("MozWebSocket" in window) {\n        this._websocket = new MozWebSocket(this._url);\n        this._websocket.melonTag = this._token;\n      } else {\n        reject("browser not support websocket");\n        return;\n      }\n\n      //WebSocket异常处理\n      this._websocket.onerror = e => {\n        _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].error("websocket onerror");\n        const jsonData = _common_unifiedErrorHand__WEBPACK_IMPORTED_MODULE_1__["default"].getBaseRes(_public_constant__WEBPACK_IMPORTED_MODULE_2__.ERROR_CODE.WS_ERROR, e, _public_constant__WEBPACK_IMPORTED_MODULE_2__.ERROR_CMD.CONNECTION);\n        const finish = this === null || this === void 0 ? void 0 : this._dispatchMessage(jsonData);\n        if (finish) {\n          return;\n        }\n        if (this !== null && this !== void 0 && this.onCallback) {\n          this.onCallback(jsonData);\n        }\n      };\n\n      //WebSocket连接成功\n      this._websocket.onopen = function (event) {\n        _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].info("melon login websocket onopen");\n        resolve("websocket onopen");\n      };\n\n      //websocket消息处理\n      this._websocket.onmessage = event => {\n        this._dealmessage(event.data);\n      };\n\n      //关闭连接\n      this._websocket.onclose = e => {\n        _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].info("websocket onclose");\n        _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].info(e);\n        const jsonData = _common_unifiedErrorHand__WEBPACK_IMPORTED_MODULE_1__["default"].getBaseRes(_public_constant__WEBPACK_IMPORTED_MODULE_2__.ERROR_CODE.WS_CLOSE, e, _public_constant__WEBPACK_IMPORTED_MODULE_2__.ERROR_CMD.CONNECTION);\n        const finish = this._dispatchMessage(jsonData);\n        if (finish) {\n          return;\n        }\n        if (this.onCallback) {\n          this.onCallback(jsonData);\n        }\n      };\n      window.onbeforeunload = function () {\n        if (this !== null && this !== void 0 && this.disconnect) {\n          this === null || this === void 0 ? void 0 : this.disconnect();\n        }\n      };\n    });\n  }\n\n  /* 终止连接 */\n  disconnect() {\n    this._aliveChecker.stop();\n    this._reqTimeoutChecker.stop();\n    this._url = null;\n    this._username = null;\n    this._password = null;\n    this._realm = null;\n    this._token = null;\n    this.close();\n    this._websocket = null;\n  }\n\n  /* 关闭websocket */\n  close() {\n    if (this._websocket) {\n      this._websocket.close();\n    }\n  }\n\n  /**\n   * 由 websocket 接收到的消息\n   */\n  _dealmessage(data) {\n    new Response(data).arrayBuffer().then(buffer => {\n      if (buffer.byteLength < CHECK_DATA_LENGTH) {\n        _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].error("onmessage invalide data, length < " + CHECK_DATA_LENGTH);\n        return;\n      }\n      // 获取校验数据\n      let checkData = buffer.slice(0, CHECK_DATA_LENGTH);\n      let dv = new DataView(checkData);\n      // 获取消息类型\n      let msgType = dv.getUint8(CHECK_DATA_INDEX_MSG_TYPE);\n      /* 高并发接收message时,先处理心跳事件，然后处理业务 */\n      new Promise(resolve => {\n        // 消息分发，如果是心跳，则自动回复\n        if (msgType == this.wsHelper.MsgType.HeartBeat) {\n          this._aliveChecker.start();\n          this._websocket.send(this.wsHelper.getWSData(\'\', this.wsHelper.MsgType.HeartBeatResponse));\n          _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug(\'web端向服务端发送心跳回复=======接收心跳message触发\', this.wsHelper.MsgType.HeartBeatResponse, new Date());\n          this.setClientInitiative();\n          resolve({\n            status: \'heartBeat\'\n          });\n        } else {\n          resolve({\n            status: \'operation\'\n          });\n        }\n      }).then(res => {\n        if (res.status === \'heartBeat\') return;\n        // 解析数据\n        let protocolData = buffer.slice(CHECK_DATA_LENGTH, buffer.byteLength);\n        let response = new TextDecoder().decode(protocolData);\n        if (msgType == this.wsHelper.MsgType.TokenCheckResponse) {\n          _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug(JSON.stringify(response));\n          let loginAck = JSON.parse(response);\n          this._reqTimeoutChecker.resolveJson(loginAck.cmd_guid, loginAck);\n          if (loginAck.result == 0) {\n            // 设置超时时间，打开心跳检测\n            this._aliveChecker.setTimeoutTime(loginAck.heartbeat_interval);\n            this._aliveChecker.start();\n            // 打开消息超时检测\n            this._reqTimeoutChecker.start();\n          }\n        } else if (msgType == this.wsHelper.MsgType.Normal) {\n          let jsonData = JSON.parse(response);\n          // 根据判断主动发送心跳\n          if (this._clientInitiativeStatus) {\n            _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug(\'web端向服务端发送心跳回复=======接收心跳message超时,随业务触发主动发送心跳信息\', new Date());\n            this._websocket.send(this.wsHelper.getWSData(\'\', this.wsHelper.MsgType.HeartBeatResponse));\n            this._aliveChecker.start();\n            this.setClientInitiative();\n          }\n          // 呼叫有 call_id，如果是呼叫，把定时超时去掉\n          if (jsonData.call_id && jsonData.cmd_name !== "common_through_msg_ack" && jsonData.cmd_name !== "cc_include_call_ack" && jsonData.cmd_name !== \'cc_member_speak_set_ack\') this._reqTimeoutChecker.removeMessage(jsonData.call_id);\n          let isSync = this._reqTimeoutChecker.resolveJson(jsonData.cmd_guid, jsonData);\n          _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug(\'wsjsonDataws\', jsonData);\n          if (!isSync && this.onCallback) {\n            let finish = this._dispatchMessage(jsonData);\n            if (!finish) {\n              this.onCallback(jsonData);\n            }\n          } else {\n            _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug("web端websocket收到同步数据:\\n " + JSON.stringify(jsonData));\n          }\n        }\n      });\n    });\n  }\n\n  // 发送异步消息【不判断响应超时】\n  sendAsyn(jsonData, msgType) {\n    _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug("send: " + JSON.stringify(jsonData));\n    let strData = JSON.stringify(jsonData);\n    let data = this.wsHelper.getWSData(strData, msgType);\n    if (this._websocket && this._websocket.readyState == 1) {\n      this._websocket.send(data);\n      return true;\n    } else {\n      return false;\n    }\n  }\n  /* 发送同步消息【需要判断响应超时】 */\n  sendSync(jsonData, msgType) {\n    return new Promise((resolve, reject) => {\n      if (this.sendAsyn(jsonData, msgType)) {\n        // 发送消息成功，将消息缓存到消息对了中，用于判断消息超时\n        if (jsonData.cmd_guid) {\n          this._reqTimeoutChecker.setmessage(jsonData.cmd_guid, jsonData.cmd_name, resolve, reject);\n        } else {\n          reject("websocket, no cmd_guid");\n        }\n      } else {\n        reject("websocket is not connected.");\n      }\n    });\n  }\n  addTimerMessage(cmdGuid, cmdName, resolve, reject) {\n    this._reqTimeoutChecker.setmessage(cmdGuid, cmdName, resolve, reject);\n  }\n  removeTimerMessage(guid) {\n    this._reqTimeoutChecker.removeMessage(guid);\n  }\n  timeoutCallback() {\n    this.disconnect();\n    const jsonData = _common_unifiedErrorHand__WEBPACK_IMPORTED_MODULE_1__["default"].getBaseRes(_public_constant__WEBPACK_IMPORTED_MODULE_2__.ERROR_CODE.WS_TIMEOUT, \'[websocket] disconnected, no heartbeat received\', _public_constant__WEBPACK_IMPORTED_MODULE_2__.ERROR_CMD.CONNECTION);\n    const finish = this._dispatchMessage(jsonData);\n    if (finish) {\n      return;\n    }\n    if (this.onCallback) {\n      this.onCallback(jsonData);\n    }\n  }\n  addCallback(callback) {\n    this.onCallback = callback;\n  }\n  /* 初始化与web接入服务器连接 */\n  setClientInitiative() {\n    var _this$_aliveChecker;\n    clearTimeout(this._clientInitiativeChecker);\n    this._clientInitiativeStatus = false;\n    this._clientInitiativeChecker = setTimeout(() => {\n      this._clientInitiativeStatus = true;\n    }, ((_this$_aliveChecker = this._aliveChecker) === null || _this$_aliveChecker === void 0 ? void 0 : _this$_aliveChecker.timeInterval) + 1000);\n  }\n  /**\n   * 注册服务端推送的消息处理，这里是基础设施，不涉及具体的业务，信令的分发和处理由外部自己注册进来\n   * @param {string} cmd_name 信令名\n   * @param {object} module 相应的模块，有事件会分发给模块的onEvent\n   */\n  registerMessageHandler(cmd_name, module) {\n    if (cmd_name && module) {\n      this._messageHanlderMap.set(cmd_name, module);\n    }\n  }\n  /**\n   * 分发处理服务端推送的消息（非http请求的）\n   * @param {object} event \n   * @returns {boolean|undefined} 是否分发出去了\n   */\n  _dispatchMessage(json) {\n    let cmd = json === null || json === void 0 ? void 0 : json.cmd_name;\n    if (cmd) {\n      let module = this._messageHanlderMap.get(cmd);\n      if (module) {\n        try {\n          module.onEvent(json);\n          return true;\n        } catch (error) {\n          _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug(\'ws dispatchMessage error module:\', module);\n          _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug(\'ws dispatchMessage error\', JSON.stringify(error === null || error === void 0 ? void 0 : error.message));\n        }\n        return;\n      }\n      _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug(\'ws dispatchMessage,drop msg\', JSON.stringify(json));\n    }\n  }\n}\n;\nclass reqTimeoutChecker {\n  constructor() {\n    this.timeout = 30;\n    this.checker = null;\n    this.msglist = new Map();\n  }\n  stop() {\n    if (this.checker) {\n      clearInterval(this.checker);\n      this.checker = null;\n      for (let msg of this.msglist) {\n        var seq = msg[0];\n        var data = msg[1];\n\n        //超时调用异常回调\n        if (data.reject) {\n          data.reject("seq:" + seq + " cmd:" + data.cmd + " send time out");\n        }\n      }\n      this.msglist.clear();\n    }\n  }\n  start() {\n    this.stop();\n    this.checker = setInterval(() => {\n      for (let msg of this.msglist) {\n        var guid = msg[0];\n        var data = msg[1];\n        if (data.time < this.timeout) {\n          data.time++;\n        } else {\n          this.msglist.delete(guid);\n          //超时调用异常回调\n          if (data.resolve) {\n            _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].error("guid:" + guid + " cmd:" + data.cmd + " send time out");\n            data.resolve({\n              cmd_guid: guid,\n              result: _public_constant__WEBPACK_IMPORTED_MODULE_2__.ERROR_CODE.REQUEST_TIMEOUT\n            });\n          }\n        }\n      }\n    }, 1000);\n  }\n  setmessage(guid, cmd, resolve, reject) {\n    if (guid) {\n      this.msglist.set(guid, {\n        cmd: cmd,\n        time: 0,\n        resolve: resolve,\n        reject: reject,\n        pieces: []\n      });\n    }\n  }\n  removeMessage(guid) {\n    //通过seq执行resolve\n    if (guid && this.msglist.has(guid)) {\n      this.msglist.delete(guid);\n      return true;\n    }\n    return false;\n  }\n  resolvemessage(guid, cmd) {\n    //通过seq执行resolve\n    if (guid) {\n      if (this.msglist.has(guid)) {\n        var msg = this.msglist.get(guid);\n        if (msg.cmd == cmd) {\n          this.msglist.delete(guid);\n          msg.resolve();\n        }\n      }\n    }\n  }\n  resolveJson(guid, result) {\n    //通过guid执行resolve\n    if (guid) {\n      if (this.msglist.has(guid)) {\n        var msg = this.msglist.get(guid);\n        this._dealPieceData(msg, result);\n        return true;\n      }\n    }\n    return false;\n  }\n  /**\n   * 处理分包的数据\n   * @param {消息队列中的缓存} msg \n   * @param {websocket发来的消息} protocol \n   * @returns \n   */\n  _dealPieceData(msg, protocol) {\n    if (!msg || !protocol) return;\n    if (protocol.package_info && protocol.package_info.last_piece !== 1) {\n      msg.pieces.push(protocol);\n      this._refreshTimer(protocol === null || protocol === void 0 ? void 0 : protocol.cmd_guid);\n      return;\n    }\n    if (msg.pieces.length === 0) {\n      msg.resolve(protocol);\n      _common_unifiedErrorHand__WEBPACK_IMPORTED_MODULE_1__["default"].formatConversion(protocol, \'websocket_one\');\n    } else {\n      msg.pieces.push(protocol);\n      msg.resolve(msg.pieces);\n      _common_unifiedErrorHand__WEBPACK_IMPORTED_MODULE_1__["default"].formatConversion(msg.pieces, \'websocket_two\');\n    }\n    this.removeMessage(protocol === null || protocol === void 0 ? void 0 : protocol.cmd_guid);\n  }\n  _refreshTimer(guid) {\n    if (guid && this.msglist.has(guid)) {\n      var msg = this.msglist.get(guid);\n      _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug(\'_refreshTimer\', msg);\n      if (msg !== null && msg !== void 0 && msg.time) {\n        msg.time = 0;\n      } else {\n        _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].debug(\'_refreshTimer\', msg);\n      }\n    }\n  }\n}\n\n/* 链路心跳, 启动定时器，多久没收到心跳，则视为链接超时*/\nclass aliveChecker {\n  constructor(_timeoutCallback) {\n    this.timeout = 30000;\n    this.timeInterval = 10000;\n    this.checker = null;\n    this.timeoutCallback = _timeoutCallback;\n  }\n  stop() {\n    if (this.checker) {\n      clearInterval(this.checker);\n      this.checker = null;\n    }\n  }\n  start() {\n    this.stop();\n    this.checker = setInterval(() => {\n      //链路超时\n      _common_log__WEBPACK_IMPORTED_MODULE_0__["default"].error("socket time out");\n      this.stop();\n      this.timeoutCallback();\n    }, this.timeout);\n  }\n  setTimeoutTime(heartbeatInterval) {\n    // 丢失超过3次心跳，认为连接断开\n    this.timeInterval = heartbeatInterval * 1000;\n    this.timeout = heartbeatInterval * 1000 * 3 + 1000;\n  }\n}\n;\nclass WebsocketHelper {\n  constructor() {\n    this.MsgType = {\n      Normal: 0,\n      HeartBeat: 1,\n      HeartBeatResponse: 2,\n      TokenCheck: 3,\n      TokenCheckResponse: 4\n    };\n    this.CRC = new CRC();\n  }\n\n  /**\n   * 获取心跳消息\n   * @returns 心跳消息\n   */\n  getWSHeartBeat() {\n    let result = this.getWSData(\'\', helper.MsgType.HeartBeatResponse);\n    return result;\n  }\n  /**\n   * 数据转换为 WebSocket 直接发送的数据\n   * @param {待发送数据} data\n   * @param {消息类型 MsgType} msgType\n   * @returns\n   */\n  getWSData(data, msgType) {\n    // 1. string 转 byte[]\n    let result = this.stringToBytes(data);\n    // 2. 通过数据获得校验消息\n    if (!msgType) msgType = this.MsgType.Normal;\n    let mStruct = this.getMsgStruct(result, msgType);\n    // 3. 拼接校验信息和实际数据\n    result = this.struct2Hex(mStruct).concat(result);\n    // 4. 转换成 websocket 发送的 binary 数据\n    var buffer = new ArrayBuffer(result.length);\n    var view = new DataView(buffer);\n    for (var i = 0; i < result.length; i++) {\n      view.setUint8(i, result[i]);\n    }\n    return view;\n  }\n  /**\n   * 获取校验消息的“结构体”\n   * @param {byte[]数据} dataBytes\n   * @param {消息类型} msgType\n   * @returns\n   */\n  getMsgStruct(dataBytes, msgType) {\n    return {\n      MsgMagicNumber: 0xff66,\n      // 16   - 2 字节\n      MsgPriority: 0x00,\n      // 8    - 1\n      MsgVersion: 0x01,\n      // 8    - 1\n      MsgDataLength: dataBytes.length,\n      // 32   - 4\n      MsgDataFormat: 0,\n      // 16   - 2\n      MsgType: msgType,\n      // 16   - 2\n      MsgChecksum: this.CRC.CRC16(dataBytes),\n      // 16   - 2\n      MsgReserved: 0 // 16   - 2\n    };\n  }\n  /**\n   * 将校验消息“结构体”转换为byte数组\n   * @param {校验消息的结构体} struct\n   * @returns\n   */\n  struct2Hex(struct) {\n    return [struct.MsgMagicNumber >> 8 & 0x00ff, struct.MsgMagicNumber & 0x00ff, struct.MsgPriority, struct.MsgVersion, struct.MsgDataLength >> 24 & 0x000000ff, struct.MsgDataLength >> 16 & 0x000000ff, struct.MsgDataLength >> 8 & 0x000000ff, struct.MsgDataLength & 0x000000ff, struct.MsgDataFormat >> 8 & 0x00ff, struct.MsgDataFormat & 0x00ff, struct.MsgType >> 8 & 0x00ff, struct.MsgType & 0x00ff, struct.MsgChecksum & 0x00ff, struct.MsgChecksum >> 8 & 0x00ff, struct.MsgReserved >> 8 & 0x00ff, struct.MsgReserved & 0x00ff];\n  }\n\n  // TODO 是否需要用 UTF-8 转？\n  // 1. string 转成 byte[]\n  stringToBytes(str) {\n    undefined;\n    var bytes = new Array();\n    var len, c;\n    len = str.length;\n    for (var i = 0; i < len; i++) {\n      undefined;\n      c = str.charCodeAt(i);\n      if (c >= 0x010000 && c <= 0x10ffff) {\n        undefined;\n        bytes.push(c >> 18 & 0x07 | 0xf0);\n        bytes.push(c >> 12 & 0x3f | 0x80);\n        bytes.push(c >> 6 & 0x3f | 0x80);\n        bytes.push(c & 0x3f | 0x80);\n      } else if (c >= 0x000800 && c <= 0x00ffff) {\n        undefined;\n        bytes.push(c >> 12 & 0x0f | 0xe0);\n        bytes.push(c >> 6 & 0x3f | 0x80);\n        bytes.push(c & 0x3f | 0x80);\n      } else if (c >= 0x000080 && c <= 0x0007ff) {\n        undefined;\n        bytes.push(c >> 6 & 0x1f | 0xc0);\n        bytes.push(c & 0x3f | 0x80);\n      } else {\n        undefined;\n        bytes.push(c & 0xff);\n      }\n    }\n    return bytes;\n  }\n}\nclass CRC {\n  constructor() {\n    this._auchCRCHi = [0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40, 0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40, 0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40, 0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40, 0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40, 0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40, 0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40, 0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40, 0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40, 0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40, 0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40, 0x01, 0xc0, 0x80, 0x41, 0x01, 0xc0, 0x80, 0x41, 0x00, 0xc1, 0x81, 0x40];\n    this._auchCRCLo = [0x00, 0xc0, 0xc1, 0x01, 0xc3, 0x03, 0x02, 0xc2, 0xc6, 0x06, 0x07, 0xc7, 0x05, 0xc5, 0xc4, 0x04, 0xcc, 0x0c, 0x0d, 0xcd, 0x0f, 0xcf, 0xce, 0x0e, 0x0a, 0xca, 0xcb, 0x0b, 0xc9, 0x09, 0x08, 0xc8, 0xd8, 0x18, 0x19, 0xd9, 0x1b, 0xdb, 0xda, 0x1a, 0x1e, 0xde, 0xdf, 0x1f, 0xdd, 0x1d, 0x1c, 0xdc, 0x14, 0xd4, 0xd5, 0x15, 0xd7, 0x17, 0x16, 0xd6, 0xd2, 0x12, 0x13, 0xd3, 0x11, 0xd1, 0xd0, 0x10, 0xf0, 0x30, 0x31, 0xf1, 0x33, 0xf3, 0xf2, 0x32, 0x36, 0xf6, 0xf7, 0x37, 0xf5, 0x35, 0x34, 0xf4, 0x3c, 0xfc, 0xfd, 0x3d, 0xff, 0x3f, 0x3e, 0xfe, 0xfa, 0x3a, 0x3b, 0xfb, 0x39, 0xf9, 0xf8, 0x38, 0x28, 0xe8, 0xe9, 0x29, 0xeb, 0x2b, 0x2a, 0xea, 0xee, 0x2e, 0x2f, 0xef, 0x2d, 0xed, 0xec, 0x2c, 0xe4, 0x24, 0x25, 0xe5, 0x27, 0xe7, 0xe6, 0x26, 0x22, 0xe2, 0xe3, 0x23, 0xe1, 0x21, 0x20, 0xe0, 0xa0, 0x60, 0x61, 0xa1, 0x63, 0xa3, 0xa2, 0x62, 0x66, 0xa6, 0xa7, 0x67, 0xa5, 0x65, 0x64, 0xa4, 0x6c, 0xac, 0xad, 0x6d, 0xaf, 0x6f, 0x6e, 0xae, 0xaa, 0x6a, 0x6b, 0xab, 0x69, 0xa9, 0xa8, 0x68, 0x78, 0xb8, 0xb9, 0x79, 0xbb, 0x7b, 0x7a, 0xba, 0xbe, 0x7e, 0x7f, 0xbf, 0x7d, 0xbd, 0xbc, 0x7c, 0xb4, 0x74, 0x75, 0xb5, 0x77, 0xb7, 0xb6, 0x76, 0x72, 0xb2, 0xb3, 0x73, 0xb1, 0x71, 0x70, 0xb0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9c, 0x5c, 0x5d, 0x9d, 0x5f, 0x9f, 0x9e, 0x5e, 0x5a, 0x9a, 0x9b, 0x5b, 0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4b, 0x8b, 0x8a, 0x4a, 0x4e, 0x8e, 0x8f, 0x4f, 0x8d, 0x4d, 0x4c, 0x8c, 0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 0x40];\n  }\n  /**\n   * 查表法CRC\n   */\n  CRC16(buffer) {\n    var hi = 0xff;\n    var lo = 0xff;\n    for (var i = 0; i < buffer.length; i++) {\n      var idx = hi ^ buffer[i];\n      hi = lo ^ this._auchCRCHi[idx];\n      lo = this._auchCRCLo[idx];\n    }\n    return hi << 8 | lo;\n    // return CRC.padLeft((hi << 8 | lo).toString(16), 4, \'0\');\n  }\n\n  padLeft(s, w, pc) {\n    if (pc == undefined) {\n      pc = "0";\n    }\n    for (var i = 0, c = w - s.length; i < c; i++) {\n      s = pc + s;\n    }\n    return s;\n  }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new websocket());\n\n//# sourceURL=webpack://lemon/./lemon/protocol/websocket.js?'
          );

          /***/
        },

      /***/ "./lemon/public/baseRequest.js":
        /*!*************************************!*\
  !*** ./lemon/public/baseRequest.js ***!
  \*************************************/
        /***/ (
          __unused_webpack_module,
          __webpack_exports__,
          __webpack_require__
        ) => {
          "use strict";
          eval(
            '__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _common_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../common/utils */ "./lemon/common/utils.js");\n/* harmony import */ var _modules_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../modules/common */ "./lemon/modules/common.js");\n\n\nclass baseRequest {\n  constructor() {\n    this.user = {};\n    this.baseInfo = {};\n  }\n\n  /** 封装基础请求参数 */\n  getBaseReq() {\n    const {\n      dispatcher_name = \'\',\n      puc_id = \'\',\n      realm = \'\',\n      user_id = \'\',\n      number_type = \'\',\n      user_puc_id = \'\',\n      version = \'\',\n      product_name = \'\'\n    } = this.user || {};\n    return {\n      product_name: product_name || "PUC",\n      version: version || "10",\n      system_id: "000",\n      cmd_guid: _modules_common__WEBPACK_IMPORTED_MODULE_1__["default"].guid(),\n      puc_id,\n      user_id,\n      realm,\n      number_type,\n      user_puc_id: user_puc_id || puc_id,\n      dispatcher_name\n    };\n  }\n\n  /** 获取当前时间戳 */\n  getUTCTime() {\n    const date = new Date();\n    const y = date.getUTCFullYear();\n    const m = date.getUTCMonth() + 1;\n    const d = date.getUTCDate();\n    const hour = date.getUTCHours(); /* 得到小时数 */\n    const minute = date.getUTCMinutes(); /* 得到分钟数 */\n    const second = date.getUTCSeconds(); /* 得到秒数 */\n    return y + "-" + m + "-" + d + "T" + hour + ":" + minute + ":" + second + "Z";\n  }\n  /**\n   * 基础响应，不携带什么数据的\n   * @param {number} result \n   * @param {string} msg \n   */\n  getBaseResp(result, msg) {\n    return {\n      result: result,\n      msg: msg\n    };\n  }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new baseRequest());\n\n//# sourceURL=webpack://lemon/./lemon/public/baseRequest.js?'
          );

          /***/
        },

      /***/ "./lemon/public/constant.js":
        /*!**********************************!*\
  !*** ./lemon/public/constant.js ***!
  \**********************************/
        /***/ (
          __unused_webpack_module,
          __webpack_exports__,
          __webpack_require__
        ) => {
          "use strict";
          eval(
            "__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ALARM_ACTION: () => (/* binding */ ALARM_ACTION),\n/* harmony export */   BDM_CAPACITY: () => (/* binding */ BDM_CAPACITY),\n/* harmony export */   BDM_NUMBER_TYPE: () => (/* binding */ BDM_NUMBER_TYPE),\n/* harmony export */   CALL_DIRECTION: () => (/* binding */ CALL_DIRECTION),\n/* harmony export */   CALL_MODE: () => (/* binding */ CALL_MODE),\n/* harmony export */   CALL_STATUS: () => (/* binding */ CALL_STATUS),\n/* harmony export */   CALL_TYPE: () => (/* binding */ CALL_TYPE),\n/* harmony export */   DATA_ACTION: () => (/* binding */ DATA_ACTION),\n/* harmony export */   DEFAULT_SYS_ID: () => (/* binding */ DEFAULT_SYS_ID),\n/* harmony export */   DEVICE_TYPE: () => (/* binding */ DEVICE_TYPE),\n/* harmony export */   ERROR_CMD: () => (/* binding */ ERROR_CMD),\n/* harmony export */   ERROR_CODE: () => (/* binding */ ERROR_CODE),\n/* harmony export */   GRANT_STATUS: () => (/* binding */ GRANT_STATUS),\n/* harmony export */   MEDIA_CALLBACK_TYPE: () => (/* binding */ MEDIA_CALLBACK_TYPE),\n/* harmony export */   MONITOR_GROUP_MEMBER_TYPE: () => (/* binding */ MONITOR_GROUP_MEMBER_TYPE),\n/* harmony export */   MONITOR_SRC: () => (/* binding */ MONITOR_SRC),\n/* harmony export */   MONITOR_STATE: () => (/* binding */ MONITOR_STATE),\n/* harmony export */   MONITOR_TYPE: () => (/* binding */ MONITOR_TYPE),\n/* harmony export */   NUMBER_TYPE: () => (/* binding */ NUMBER_TYPE),\n/* harmony export */   ONLINE_STATE: () => (/* binding */ ONLINE_STATE),\n/* harmony export */   ORG_ONLINE_CNT_INTERVAL: () => (/* binding */ ORG_ONLINE_CNT_INTERVAL),\n/* harmony export */   PUC_SYSTEM_TYPE: () => (/* binding */ PUC_SYSTEM_TYPE),\n/* harmony export */   QUERY_TYPE: () => (/* binding */ QUERY_TYPE),\n/* harmony export */   SYSTEM_TYPE: () => (/* binding */ SYSTEM_TYPE),\n/* harmony export */   VIDEO_FRAME_SIZE: () => (/* binding */ VIDEO_FRAME_SIZE),\n/* harmony export */   api_constant: () => (/* binding */ api_constant),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   fuzzyQry: () => (/* binding */ fuzzyQry),\n/* harmony export */   id_key_name: () => (/* binding */ id_key_name)\n/* harmony export */ });\n/* harmony import */ var _littleLemon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../littleLemon */ \"./lemon/littleLemon.js\");\n//存一些接口需要的固定的字段\n\nvar api_constant = {\n  PRODUCT_NAME: 'PUC',\n  WEB_PRODUCT_NAME: 'WebPUC',\n  VERSION: '10',\n  VERSION_SEQ: '0'\n};\n/**\n * @enum {number} \n * @description 在线状态\n */\nvar ONLINE_STATE = {\n  ON: 1,\n  OFF: 0\n};\n\n/**\n * 是否是模糊查询\n * @enum {number}\n * \n */\nvar fuzzyQry = {\n  y: 1,\n  n: 0\n};\n\n/**\n * 设备状态变更类型枚举\n * @enum {number}\n * @property  {string} ONLINE 上下状态变更类型，并非是否在线状态值\n * @property  {string} ADD 新增了数据\n * @property  {string} UPDATE 数据被更新了\n * @property  {string} DELETE 数据被删除了\n * \n */\nvar DATA_ACTION = {\n  ONLINE: 0,\n  ADD: 1,\n  UPDATE: 2,\n  DELETE: 3\n};\nconst BDM_NUMBER_TYPE = 6; //目前全系统各网关number_type的数量二进制位数，暂时用6，即32种，如果不够可以直接增加这个数值\nconst BDM_CAPACITY = 0b1 << BDM_NUMBER_TYPE - 1; //  服务端bdm中number_type在web端的容量\n/**\n * @enum {number}\n * @description number_type枚举\n */\n\nvar NUMBER_TYPE = {\n  INDIVIDUAL: 0b0,\n  // 个号0\n  GROUP: 0b1,\n  // 组号1\n  EXTERNAL: 0b10,\n  // 外部号码2\n  ALL_CALL: 0b11,\n  // 全呼号码3\n  DYNAMIC_GROUP: 0b100,\n  // 动态组组号4\n  DISPATCHER: 0b111,\n  // 调度员7\n  CROSS_PATCH: 0b1000,\n  // 群组8\n  CONFERENCE: 0b1011,\n  // 会议号码11\n  THIRD_CONFERENCE: 0b1101,\n  // 会议号码13\n  DISPATCHER_GROUP: 0b1110,\n  // 调度员组14\n  DC: 0b1111,\n  // 坐席15\n  DUAL_MODEL: 0b10000,\n  // 双模终端16\n  RECORD: 0b10011,\n  // 录音回放号码19\n  WEB_USER: 0b10100,\n  // web侧调度号码20\n  SYS_PATCH: 0b10101,\n  // 派接组号码21\n  ROIP_INDIVIDUAL: 0b10110,\n  // ROIP终端22\n  ROIP_GROUP: 0b10111,\n  // ROIP组23\n  ROAM_GROUP: 0b11000,\n  // 漫游组24\n  CROSS_SYS_GROUP: 0b11001,\n  // 跨系统组25\n  CAMERA: BDM_CAPACITY + 8 // 摄像头8\n};\n\nvar DEVICE_TYPE = {\n  TERMINAL: 0,\n  // 手台\n  CAMERA: 8 // 摄像头\n};\n/**\n * 系统类型\n * @enum {number}\n */\nvar PUC_SYSTEM_TYPE = {\n  DMR2: 1,\n  // 常规中转台\n  DMR3_TRUNKING: 2,\n  // DMR3集群系统\n  PDT: 3,\n  // PDT集群系统系统、PDT系统互联调度、PDT互联调度\n  HMF: 6,\n  // HMF集群系统\n  PSTN: 10,\n  // sip标准电话对接\n  DMR2_XPT: 15,\n  // XPT系统\n  IMS: 21,\n  // POC 36K\n  GB: 33,\n  // 国标上级域\n  MCS: 36,\n  // POC 9000\n  GB_SUB: 37,\n  // 国标下级域\n  VEDIO_CONF: 40,\n  // 视频会议\n  ONVIF: 42,\n  // Onvif摄像头\n  RD_GPS: 43,\n  // 第三方GPS\n  TETRA_TETRONIC: 47,\n  // 西班牙Tetra系统\n  RTSP_SERVER: 49,\n  // RTSP服务端，供第三方拉流\n  RTSP_CLIENT: 50,\n  // RTSP客户端，拉第三方流\n  EPACK: 53,\n  // epack系统\n  CIMFAX: 54,\n  // 先尚传真\n  HUAWEI_IVS: 57,\n  // 华为IVS系统\n  GB_V1: 58,\n  // 大运会版本使用\n  EM4: 59,\n  // 四线网关\n  GB_DEVICE: 60,\n  // 国标单摄像头对接\n  DMR2_DFSI: 62,\n  // 常规车台\n  DMR3_DFSI: 63,\n  // DMR3车台\n  PDT_ISSI: 64,\n  // PDT系统互联调度服务\n  TETRA_DFSI: 65,\n  // Tetra车台\n  UVHF: 66,\n  // 美国电台\n  PDT_DFSI: 67 // PDT车台\n};\n/**\n * 呼叫状态\n * @enum {number}\n */\nvar CALL_STATUS = {\n  /* 空闲 */\n  FREE: '0',\n  /* 在线未接通 */\n  NORMAL: '1',\n  /* 正在发起呼叫 */\n  SETUP_CALLING: '2',\n  /* 别人有话权 */\n  TALKING: '3',\n  /* 本人有话权 */\n  TX: '4',\n  /* 正在申请话权 */\n  DEMANDING: '5',\n  /* 正在释放话权 */\n  CEASING: '6',\n  /* 不在线，无法连接到 */\n  DISCONNECT: '7',\n  /* 紧急呼叫 */\n  EMERGENCY: '8',\n  /* 来电 */\n  INCOMING: '9'\n};\n\n/**\n * 呼叫状态\n * @enum {number}\n */\nvar CALL_DIRECTION = {\n  /* 空闲 */\n  NORMAL: '0',\n  /* 呼出 */\n  CALLOUT: '1',\n  /* 呼入 */\n  CALLIN: '2',\n  /* 监听 */\n  MONITOR: '3'\n};\n\n/**\n * 呼叫模式\n * @enum {number}\n */\nvar CALL_MODE = {\n  /* 音频呼叫 */\n  AUDIO: 0,\n  /* 视频呼叫 */\n  VIDEO: 1,\n  /* 音视频呼叫 */\n  AUDIO_VIDEO: 2\n};\n\n/**\n * 呼叫模式\n * @enum {number}\n */\nvar CALL_TYPE = {\n  /* 个呼 */\n  INDIVIDUAL: 0,\n  /* 普通组呼 */\n  GROUP: 1,\n  /* 系统全呼 */\n  SYSTEM: 2,\n  /* 广播呼叫 */\n  BROADCAST: 3,\n  /* 外部呼叫 */\n  EXTERNAL: 4,\n  /* 紧急呼叫 */\n  EMERGENCY: 7,\n  /* 群组呼叫 */\n  CROSSPATCH: 8,\n  /* 调度台呼叫 */\n  INTERCOM: 9,\n  /* 可视单呼 */\n  INDIVIDUAL_VIDEO_AND_VOC: 11,\n  /* 视频单呼(无语音) */\n  INDIVIDUAL_VIDEO: 12,\n  /* 视频组呼(带语音) */\n  GROUP_VIDEO_AND_VOC: 13,\n  /* 仅视频组呼(无语音) */\n  GROUP_VIDEO: 14,\n  /* 不同源可视组呼 */\n  GROUP_DIFFERENT_SOURCE: 15,\n  /* 语音组播 */\n  BROADCAST_VOC: 16,\n  /* 视频组播 */\n  BROADCAST_VIDEO: 17,\n  /* 仅视频组播 */\n  BROADCAST_ONLY_VIDEO: 18,\n  /* 视频上拉 */\n  PULL_VIDEO_CALL: 19,\n  /* 视频回传 */\n  VIDEO_CALLBACK: 21,\n  /* 视频推送 */\n  PUSH_VIDEO_CALL: 22,\n  /* 视频上拉带语音',供eLTE使用和webbs使用 */\n  PULL_VIDEO_CALL_WITH_VOICE: 23,\n  /* 视频回传', 供eLTE使用 */\n  VIDEO_FEEDBACK_WITH_VOICE: 24,\n  /* 调度台呼叫调度台_视频和语音 */\n  INTERCOM_VIDEO_AND_VOC: 25,\n  /* 调度台呼叫调度台_仅视频 */\n  INTERCOM_VIDEO_CALL: 26,\n  /* 会议呼叫_仅音 */\n  CONFERENCE_CALL_WITH_VOICE: 27,\n  /* 会议呼叫_视频和语音 */\n  CONFERENCE_CALL_WITH_VIDEO_AND_VOICE: 28,\n  /* 包容呼叫 */\n  INCLUDE_CALL: 29,\n  /* 加入会议呼叫 */\n  JOIN_CONFERENCE_CALL: 30,\n  /* 会议呼叫 */\n  CONFERENCE_CALL: 31,\n  /* 三方视频平台回放 */\n  THIRD_PLATFORM_VIDEO_PLAYBACK: 36,\n  /* 国际视频上拉并转发 */\n  INTERNATION_PULL_VIDEO: 37\n};\n\n/**\n * 呼叫模式\n * @enum {number}\n */\nvar MEDIA_CALLBACK_TYPE = {\n  /* 对方音频流 */\n  WEBRTC_AUDIO_DST: 'audio_dst',\n  /* 本地视频流 */\n  WEBRTC_VIDEO_SRC: 'video_src',\n  /* 对方视频流 */\n  WEBRTC_VIDEO_DST: 'video_dst'\n};\n\n/**\n * 错误码\n * @enum {number}\n */\nvar ERROR_CODE = {\n  //成功码\n  SUCCESS: 0,\n  /* 对方音频流 */\n  AUDIO_SDP_FAILED: 60000001,\n  /* 本地视频流 */\n  VIDEO_SDP_FAILED: 60000002,\n  /* 未登录 */\n  UN_LOGIN: 60000003,\n  /* 服务器内部错误 */\n  SERVER_ERROR: 60000004,\n  /* 存放音频候选者时报错 */\n  ADD_AUDIO_CANDIDATE_FAILED: 60000005,\n  /* 存放视频候选者时报错 */\n  ADD_VIDEO_CANDIDATE_FAILED: 60000006,\n  /* 接收并处理音频SDP时报错 */\n  RECEIVE_AUDIO_ANSWER_FAILED: 60000007,\n  /* 接收并处理视频SDP时报错 */\n  RECEIVE_VIDEO_ANSWER_FAILED: 60000008,\n  //-----------------登录相关start\n  LOGIN_REPEAT: 52400061,\n  //重复登录\n  //-----------------登录相关end\n\n  //----------------ws相关start\n\n  //-----------------ws相关end\n\n  /* 1 - 49  SDK 通用错误码 */\n  /*参数无效，如id无法解析 */\n  PARAM_INVALID: 1,\n  /*网络错误或者数字证书未导入 */\n  NETWORK_ERROR: 3,\n  /* 未登录 */\n  NOT_LOGIN: 4,\n  /* 没有权限访问,可能是token失效了 */\n  UNAUTHORIZED: 5,\n  /* 请求失败 */\n  REQUEST_FAIL: 6,\n  /*请求超时 */\n  REQUEST_TIMEOUT: 10,\n  /* 50-99 登录模块 */\n  WS_CLOSE: 50,\n  //ws关闭\n  WS_ERROR: 51,\n  //ws异常\n  WS_TIMEOUT: 52,\n  //WS 超时\n\n  /* 100- 149 基础数据 */\n  // 级别不匹配，上下级的问题，即puc_id不匹配问题\n  LEVEL_CROSS_ERROR: 101,\n  // 系统不匹配，有些参数需要在同一系统\n  SYSTEM_CROSS_ERROR: 102,\n  // 对应的系统未找到，如第三方会议需要指定系统\n  SYSTEM_NOT_FOUND: 103,\n  MEMBER_TYPE_ERROE: 104,\n  //成员类型错误\n  MEMBER_ADD_ERROE: 105,\n  //添加成员失败\n  /* 150- 199 呼叫值守 */\n  VIDEO_FRAME_SIZE_ERROR: 151,\n  //视频呼叫传入的分辨率与硬件支持的分辨率不匹配\n  NUMBER_TYPE_NOR_MATCH: 152,\n  //号码类型不匹配，如发会议呼叫，号码类型却不是会议号码\n  GET_MEDIA_FAIL: 153,\n  //获取媒体流失败\n  CALL_NOT_EXIT: 154,\n  // 传入的callid 不对，找不到呼叫\n  MONITOR_FAIL: 161,\n  //值守/取消值守操作失败\n  MONITOR_NUMBER_DELETE: 162,\n  //值守对象被删除\n  FLOOR_NO_ALLOW_APPLY: 171,\n  //不允许申请话权   当前是全双工\n  FLOOR_STATUS_NO_APPLY: 172,\n  //不允许申请话权   当前的话权状态、呼叫状态不允许申请\n  FLOOR_NO_ALLOW_RELEASE: 173,\n  //不允许释放话权   当前是全双工\n  FLOOR_STATUS_NO_RELEASE: 174,\n  //不允许释放话权   当前的话权状态、呼叫状态不允许申请\n  FORCE_FLOOR_NO_ALLOW_APPLY: 175,\n  // 不允许强插话权  单呼\n  /* 200-219 消息 */\n  /* 220-239 报表 */\n  CALL_REORD_FILE_URL_EMPTY: 220,\n  //录音文件路径为空\n  MUL_MESSAGE_FILE_NOT_EIXT: 221,\n  //多媒体文件不存在\n  /* 240-259 告警 */\n  /* 告警已经处理过了 */\n  ALARM_PROCEED: 240,\n  /* 260-279 信道监控 */\n  /* 350-399 gis */\n  /* 单次上拉失败 */\n  GET_GPS_INFO_FAIL: 350,\n  /* 无效GPS数据 */\n  INVALID_GPS_DATA: 351\n};\nvar ERROR_CMD = {\n  CONNECTION: \"sdk_connection\",\n  // 连接出问题了，需要上层特殊处理\n  CALL: \"sdk_call\",\n  MEDIA: \"sdk_media\",\n  ERROR: \"sdk_error\"\n};\n\n/**\n * 话权授权状态\n * @enum {number}\n */\nvar GRANT_STATUS = {\n  /* PTT空闲 */\n  PTT_IDLE: 0,\n  /* 自己得到授权 */\n  GRANTED: 1,\n  /* 另一方得到授权 */\n  GRANT_TO_ANOTHER_USER: 2,\n  /* 未得到授权 */\n  NOT_GRANTED: 3,\n  /* 请求排队中  (不使用) */\n  QUEUED: 4\n};\n/**\n * \n */\nvar id_key_name = {\n  device: 'device_id',\n  group: 'group_id',\n  dispatcher: 'dispatcher_account'\n};\n/**\n * 定时查询系统组织节点下的在线数总数间隔时间\n */\nvar ORG_ONLINE_CNT_INTERVAL = 5000;\n\n/**\n * @enum {number}\n */\nvar ALARM_ACTION = {\n  RECEIVE: 0,\n  // 收到新告警\n  UPDATE: 1 // 告警更新，包括设备取消告警、其它调度员处理告警\n};\n/**\n * @enum {number}\n */\nvar SYSTEM_TYPE = {\n  DMR2: 1,\n  // 常规中转台\n  DMR3_TRUNKING: 2,\n  // DMR3集群系统\n  PDT: 3,\n  // PDT集群系统系统、PDT系统互联调度、PDT互联调度\n  HMF: 6,\n  // HMF集群系统\n  PSTN: 10,\n  // sip标准电话对接\n  DMR2_XPT: 15,\n  // XPT系统\n  IMS: 21,\n  // POC 36K\n  GB: 33,\n  // 国标上级域\n  MCS: 36,\n  // POC 9000\n  GB_SUB: 37,\n  // 国标下级域\n  VEDIO_CONF: 40,\n  // 视频会议\n  ONVIF: 42,\n  // Onvif摄像头\n  RD_GPS: 43,\n  // 第三方GPS\n  TETRA_TETRONIC: 47,\n  // 西班牙Tetra系统\n  RTSP_SERVER: 49,\n  // RTSP服务端，供第三方拉流\n  RTSP_CLIENT: 50,\n  // RTSP客户端，拉第三方流\n  EPACK: 53,\n  // epack系统\n  CIMFAX: 54,\n  // 先尚传真\n  HUAWEI_IVS: 57,\n  // 华为IVS系统\n  GB_V1: 58,\n  // 大运会版本使用\n  EM4: 59,\n  // 四线网关\n  GB_DEVICE: 60,\n  // 国标单摄像头对接\n  DMR2_DFSI: 62,\n  // 常规车台\n  DMR3_DFSI: 63,\n  // DMR3车台\n  PDT_ISSI: 64,\n  // PDT系统互联调度服务\n  TETRA_DFSI: 65,\n  // Tetra车台\n  UVHF: 66,\n  // 美国电台\n  PDT_DFSI: 67 // PDT车台\n};\n\n/**\n * 值守在线状态\n * @type {{offline: number, online: number}}\n */\nvar MONITOR_STATE = {\n  OFFLINE: 0,\n  // 离线\n  ONLINE: 1 // 在线\n};\n\nvar MONITOR_SRC = {\n  INIT: 0,\n  // 初始化\n  RESOURCE_TREE: 1,\n  // 资源树\n  CHANNEL_MONITOR: 2 // 信道监控\n};\n\nvar MONITOR_TYPE = {\n  UNSUBSCRIBE: 0,\n  // 取消\n  SUBSCRIBE: 1 // 订阅\n};\n\nvar MONITOR_GROUP_MEMBER_TYPE = {\n  DARK: 0,\n  // 熄灭\n  BRIGHT: 1 // 点亮\n};\n\n/** 视频分辨率枚举 */\nvar VIDEO_FRAME_SIZE = {\n  QCIF: 0,\n  QVGA: 1,\n  CIF: 2,\n  VGA: 3,\n  F4CIF: 4,\n  D1: 5,\n  F720P: 6,\n  F1080P: 7\n};\n\n// 调度有没有系统归属，需要system_id时用这个值\nvar DEFAULT_SYS_ID = '000';\n/**\n * 仅供{@link basedata#query}使用\n */\nconst QUERY_TYPE = {\n  // 模糊查询设备\n  DEVICE: 0,\n  // 模糊查询静态组\n  STATIC_GROUP: 1,\n  // 模糊查询调度台\n  PUC: 2,\n  // 模糊查询动态组\n  DYNAMIC_GROUP: 3,\n  // 模糊查询派接组台\n  CROSS_GROUP: 4,\n  // 模糊查询 群组\n  CROSS_PATCH_GROUP: 5,\n  // 模糊查询 全部\n  ALL: 6\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (null);\n\n//# sourceURL=webpack://lemon/./lemon/public/constant.js?"
          );

          /***/
        },

      /***/ "./node_modules/crypto-js/aes.js":
        /*!***************************************!*\
  !*** ./node_modules/crypto-js/aes.js ***!
  \***************************************/
        /***/ function (module, exports, __webpack_require__) {
          eval(
            ';(function (root, factory, undef) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"), __webpack_require__(/*! ./enc-base64 */ "./node_modules/crypto-js/enc-base64.js"), __webpack_require__(/*! ./md5 */ "./node_modules/crypto-js/md5.js"), __webpack_require__(/*! ./evpkdf */ "./node_modules/crypto-js/evpkdf.js"), __webpack_require__(/*! ./cipher-core */ "./node_modules/crypto-js/cipher-core.js"));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var BlockCipher = C_lib.BlockCipher;\n\t    var C_algo = C.algo;\n\n\t    // Lookup tables\n\t    var SBOX = [];\n\t    var INV_SBOX = [];\n\t    var SUB_MIX_0 = [];\n\t    var SUB_MIX_1 = [];\n\t    var SUB_MIX_2 = [];\n\t    var SUB_MIX_3 = [];\n\t    var INV_SUB_MIX_0 = [];\n\t    var INV_SUB_MIX_1 = [];\n\t    var INV_SUB_MIX_2 = [];\n\t    var INV_SUB_MIX_3 = [];\n\n\t    // Compute lookup tables\n\t    (function () {\n\t        // Compute double table\n\t        var d = [];\n\t        for (var i = 0; i < 256; i++) {\n\t            if (i < 128) {\n\t                d[i] = i << 1;\n\t            } else {\n\t                d[i] = (i << 1) ^ 0x11b;\n\t            }\n\t        }\n\n\t        // Walk GF(2^8)\n\t        var x = 0;\n\t        var xi = 0;\n\t        for (var i = 0; i < 256; i++) {\n\t            // Compute sbox\n\t            var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);\n\t            sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;\n\t            SBOX[x] = sx;\n\t            INV_SBOX[sx] = x;\n\n\t            // Compute multiplication\n\t            var x2 = d[x];\n\t            var x4 = d[x2];\n\t            var x8 = d[x4];\n\n\t            // Compute sub bytes, mix columns tables\n\t            var t = (d[sx] * 0x101) ^ (sx * 0x1010100);\n\t            SUB_MIX_0[x] = (t << 24) | (t >>> 8);\n\t            SUB_MIX_1[x] = (t << 16) | (t >>> 16);\n\t            SUB_MIX_2[x] = (t << 8)  | (t >>> 24);\n\t            SUB_MIX_3[x] = t;\n\n\t            // Compute inv sub bytes, inv mix columns tables\n\t            var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);\n\t            INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);\n\t            INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);\n\t            INV_SUB_MIX_2[sx] = (t << 8)  | (t >>> 24);\n\t            INV_SUB_MIX_3[sx] = t;\n\n\t            // Compute next counter\n\t            if (!x) {\n\t                x = xi = 1;\n\t            } else {\n\t                x = x2 ^ d[d[d[x8 ^ x2]]];\n\t                xi ^= d[d[xi]];\n\t            }\n\t        }\n\t    }());\n\n\t    // Precomputed Rcon lookup\n\t    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];\n\n\t    /**\n\t     * AES block cipher algorithm.\n\t     */\n\t    var AES = C_algo.AES = BlockCipher.extend({\n\t        _doReset: function () {\n\t            var t;\n\n\t            // Skip reset of nRounds has been set before and key did not change\n\t            if (this._nRounds && this._keyPriorReset === this._key) {\n\t                return;\n\t            }\n\n\t            // Shortcuts\n\t            var key = this._keyPriorReset = this._key;\n\t            var keyWords = key.words;\n\t            var keySize = key.sigBytes / 4;\n\n\t            // Compute number of rounds\n\t            var nRounds = this._nRounds = keySize + 6;\n\n\t            // Compute number of key schedule rows\n\t            var ksRows = (nRounds + 1) * 4;\n\n\t            // Compute key schedule\n\t            var keySchedule = this._keySchedule = [];\n\t            for (var ksRow = 0; ksRow < ksRows; ksRow++) {\n\t                if (ksRow < keySize) {\n\t                    keySchedule[ksRow] = keyWords[ksRow];\n\t                } else {\n\t                    t = keySchedule[ksRow - 1];\n\n\t                    if (!(ksRow % keySize)) {\n\t                        // Rot word\n\t                        t = (t << 8) | (t >>> 24);\n\n\t                        // Sub word\n\t                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];\n\n\t                        // Mix Rcon\n\t                        t ^= RCON[(ksRow / keySize) | 0] << 24;\n\t                    } else if (keySize > 6 && ksRow % keySize == 4) {\n\t                        // Sub word\n\t                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];\n\t                    }\n\n\t                    keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;\n\t                }\n\t            }\n\n\t            // Compute inv key schedule\n\t            var invKeySchedule = this._invKeySchedule = [];\n\t            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {\n\t                var ksRow = ksRows - invKsRow;\n\n\t                if (invKsRow % 4) {\n\t                    var t = keySchedule[ksRow];\n\t                } else {\n\t                    var t = keySchedule[ksRow - 4];\n\t                }\n\n\t                if (invKsRow < 4 || ksRow <= 4) {\n\t                    invKeySchedule[invKsRow] = t;\n\t                } else {\n\t                    invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^\n\t                                               INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];\n\t                }\n\t            }\n\t        },\n\n\t        encryptBlock: function (M, offset) {\n\t            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);\n\t        },\n\n\t        decryptBlock: function (M, offset) {\n\t            // Swap 2nd and 4th rows\n\t            var t = M[offset + 1];\n\t            M[offset + 1] = M[offset + 3];\n\t            M[offset + 3] = t;\n\n\t            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);\n\n\t            // Inv swap 2nd and 4th rows\n\t            var t = M[offset + 1];\n\t            M[offset + 1] = M[offset + 3];\n\t            M[offset + 3] = t;\n\t        },\n\n\t        _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {\n\t            // Shortcut\n\t            var nRounds = this._nRounds;\n\n\t            // Get input, add round key\n\t            var s0 = M[offset]     ^ keySchedule[0];\n\t            var s1 = M[offset + 1] ^ keySchedule[1];\n\t            var s2 = M[offset + 2] ^ keySchedule[2];\n\t            var s3 = M[offset + 3] ^ keySchedule[3];\n\n\t            // Key schedule row counter\n\t            var ksRow = 4;\n\n\t            // Rounds\n\t            for (var round = 1; round < nRounds; round++) {\n\t                // Shift rows, sub bytes, mix columns, add round key\n\t                var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[(s1 >>> 16) & 0xff] ^ SUB_MIX_2[(s2 >>> 8) & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];\n\t                var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[(s2 >>> 16) & 0xff] ^ SUB_MIX_2[(s3 >>> 8) & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];\n\t                var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[(s3 >>> 16) & 0xff] ^ SUB_MIX_2[(s0 >>> 8) & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];\n\t                var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[(s0 >>> 16) & 0xff] ^ SUB_MIX_2[(s1 >>> 8) & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];\n\n\t                // Update state\n\t                s0 = t0;\n\t                s1 = t1;\n\t                s2 = t2;\n\t                s3 = t3;\n\t            }\n\n\t            // Shift rows, sub bytes, add round key\n\t            var t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];\n\t            var t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];\n\t            var t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];\n\t            var t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];\n\n\t            // Set output\n\t            M[offset]     = t0;\n\t            M[offset + 1] = t1;\n\t            M[offset + 2] = t2;\n\t            M[offset + 3] = t3;\n\t        },\n\n\t        keySize: 256/32\n\t    });\n\n\t    /**\n\t     * Shortcut functions to the cipher\'s object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.AES = BlockCipher._createHelper(AES);\n\t}());\n\n\n\treturn CryptoJS.AES;\n\n}));\n\n//# sourceURL=webpack://lemon/./node_modules/crypto-js/aes.js?'
          );

          /***/
        },

      /***/ "./node_modules/crypto-js/cipher-core.js":
        /*!***********************************************!*\
  !*** ./node_modules/crypto-js/cipher-core.js ***!
  \***********************************************/
        /***/ function (module, exports, __webpack_require__) {
          eval(
            ";(function (root, factory, undef) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__webpack_require__(/*! ./core */ \"./node_modules/crypto-js/core.js\"), __webpack_require__(/*! ./evpkdf */ \"./node_modules/crypto-js/evpkdf.js\"));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Cipher core components.\n\t */\n\tCryptoJS.lib.Cipher || (function (undefined) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var WordArray = C_lib.WordArray;\n\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;\n\t    var C_enc = C.enc;\n\t    var Utf8 = C_enc.Utf8;\n\t    var Base64 = C_enc.Base64;\n\t    var C_algo = C.algo;\n\t    var EvpKDF = C_algo.EvpKDF;\n\n\t    /**\n\t     * Abstract base cipher template.\n\t     *\n\t     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)\n\t     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)\n\t     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.\n\t     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.\n\t     */\n\t    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {WordArray} iv The IV to use for this operation.\n\t         */\n\t        cfg: Base.extend(),\n\n\t        /**\n\t         * Creates this cipher in encryption mode.\n\t         *\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {Cipher} A cipher instance.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });\n\t         */\n\t        createEncryptor: function (key, cfg) {\n\t            return this.create(this._ENC_XFORM_MODE, key, cfg);\n\t        },\n\n\t        /**\n\t         * Creates this cipher in decryption mode.\n\t         *\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {Cipher} A cipher instance.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });\n\t         */\n\t        createDecryptor: function (key, cfg) {\n\t            return this.create(this._DEC_XFORM_MODE, key, cfg);\n\t        },\n\n\t        /**\n\t         * Initializes a newly created cipher.\n\t         *\n\t         * @param {number} xformMode Either the encryption or decryption transormation mode constant.\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });\n\t         */\n\t        init: function (xformMode, key, cfg) {\n\t            // Apply config defaults\n\t            this.cfg = this.cfg.extend(cfg);\n\n\t            // Store transform mode and key\n\t            this._xformMode = xformMode;\n\t            this._key = key;\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this cipher to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     cipher.reset();\n\t         */\n\t        reset: function () {\n\t            // Reset data buffer\n\t            BufferedBlockAlgorithm.reset.call(this);\n\n\t            // Perform concrete-cipher logic\n\t            this._doReset();\n\t        },\n\n\t        /**\n\t         * Adds data to be encrypted or decrypted.\n\t         *\n\t         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.\n\t         *\n\t         * @return {WordArray} The data after processing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var encrypted = cipher.process('data');\n\t         *     var encrypted = cipher.process(wordArray);\n\t         */\n\t        process: function (dataUpdate) {\n\t            // Append\n\t            this._append(dataUpdate);\n\n\t            // Process available blocks\n\t            return this._process();\n\t        },\n\n\t        /**\n\t         * Finalizes the encryption or decryption process.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.\n\t         *\n\t         * @return {WordArray} The data after final processing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var encrypted = cipher.finalize();\n\t         *     var encrypted = cipher.finalize('data');\n\t         *     var encrypted = cipher.finalize(wordArray);\n\t         */\n\t        finalize: function (dataUpdate) {\n\t            // Final data update\n\t            if (dataUpdate) {\n\t                this._append(dataUpdate);\n\t            }\n\n\t            // Perform concrete-cipher logic\n\t            var finalProcessedData = this._doFinalize();\n\n\t            return finalProcessedData;\n\t        },\n\n\t        keySize: 128/32,\n\n\t        ivSize: 128/32,\n\n\t        _ENC_XFORM_MODE: 1,\n\n\t        _DEC_XFORM_MODE: 2,\n\n\t        /**\n\t         * Creates shortcut functions to a cipher's object interface.\n\t         *\n\t         * @param {Cipher} cipher The cipher to create a helper for.\n\t         *\n\t         * @return {Object} An object with encrypt and decrypt shortcut functions.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);\n\t         */\n\t        _createHelper: (function () {\n\t            function selectCipherStrategy(key) {\n\t                if (typeof key == 'string') {\n\t                    return PasswordBasedCipher;\n\t                } else {\n\t                    return SerializableCipher;\n\t                }\n\t            }\n\n\t            return function (cipher) {\n\t                return {\n\t                    encrypt: function (message, key, cfg) {\n\t                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);\n\t                    },\n\n\t                    decrypt: function (ciphertext, key, cfg) {\n\t                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);\n\t                    }\n\t                };\n\t            };\n\t        }())\n\t    });\n\n\t    /**\n\t     * Abstract base stream cipher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)\n\t     */\n\t    var StreamCipher = C_lib.StreamCipher = Cipher.extend({\n\t        _doFinalize: function () {\n\t            // Process partial blocks\n\t            var finalProcessedBlocks = this._process(!!'flush');\n\n\t            return finalProcessedBlocks;\n\t        },\n\n\t        blockSize: 1\n\t    });\n\n\t    /**\n\t     * Mode namespace.\n\t     */\n\t    var C_mode = C.mode = {};\n\n\t    /**\n\t     * Abstract base block cipher mode template.\n\t     */\n\t    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({\n\t        /**\n\t         * Creates this mode for encryption.\n\t         *\n\t         * @param {Cipher} cipher A block cipher instance.\n\t         * @param {Array} iv The IV words.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);\n\t         */\n\t        createEncryptor: function (cipher, iv) {\n\t            return this.Encryptor.create(cipher, iv);\n\t        },\n\n\t        /**\n\t         * Creates this mode for decryption.\n\t         *\n\t         * @param {Cipher} cipher A block cipher instance.\n\t         * @param {Array} iv The IV words.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);\n\t         */\n\t        createDecryptor: function (cipher, iv) {\n\t            return this.Decryptor.create(cipher, iv);\n\t        },\n\n\t        /**\n\t         * Initializes a newly created mode.\n\t         *\n\t         * @param {Cipher} cipher A block cipher instance.\n\t         * @param {Array} iv The IV words.\n\t         *\n\t         * @example\n\t         *\n\t         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);\n\t         */\n\t        init: function (cipher, iv) {\n\t            this._cipher = cipher;\n\t            this._iv = iv;\n\t        }\n\t    });\n\n\t    /**\n\t     * Cipher Block Chaining mode.\n\t     */\n\t    var CBC = C_mode.CBC = (function () {\n\t        /**\n\t         * Abstract base CBC mode.\n\t         */\n\t        var CBC = BlockCipherMode.extend();\n\n\t        /**\n\t         * CBC encryptor.\n\t         */\n\t        CBC.Encryptor = CBC.extend({\n\t            /**\n\t             * Processes the data block at offset.\n\t             *\n\t             * @param {Array} words The data words to operate on.\n\t             * @param {number} offset The offset where the block starts.\n\t             *\n\t             * @example\n\t             *\n\t             *     mode.processBlock(data.words, offset);\n\t             */\n\t            processBlock: function (words, offset) {\n\t                // Shortcuts\n\t                var cipher = this._cipher;\n\t                var blockSize = cipher.blockSize;\n\n\t                // XOR and encrypt\n\t                xorBlock.call(this, words, offset, blockSize);\n\t                cipher.encryptBlock(words, offset);\n\n\t                // Remember this block to use with next block\n\t                this._prevBlock = words.slice(offset, offset + blockSize);\n\t            }\n\t        });\n\n\t        /**\n\t         * CBC decryptor.\n\t         */\n\t        CBC.Decryptor = CBC.extend({\n\t            /**\n\t             * Processes the data block at offset.\n\t             *\n\t             * @param {Array} words The data words to operate on.\n\t             * @param {number} offset The offset where the block starts.\n\t             *\n\t             * @example\n\t             *\n\t             *     mode.processBlock(data.words, offset);\n\t             */\n\t            processBlock: function (words, offset) {\n\t                // Shortcuts\n\t                var cipher = this._cipher;\n\t                var blockSize = cipher.blockSize;\n\n\t                // Remember this block to use with next block\n\t                var thisBlock = words.slice(offset, offset + blockSize);\n\n\t                // Decrypt and XOR\n\t                cipher.decryptBlock(words, offset);\n\t                xorBlock.call(this, words, offset, blockSize);\n\n\t                // This block becomes the previous block\n\t                this._prevBlock = thisBlock;\n\t            }\n\t        });\n\n\t        function xorBlock(words, offset, blockSize) {\n\t            var block;\n\n\t            // Shortcut\n\t            var iv = this._iv;\n\n\t            // Choose mixing block\n\t            if (iv) {\n\t                block = iv;\n\n\t                // Remove IV for subsequent blocks\n\t                this._iv = undefined;\n\t            } else {\n\t                block = this._prevBlock;\n\t            }\n\n\t            // XOR blocks\n\t            for (var i = 0; i < blockSize; i++) {\n\t                words[offset + i] ^= block[i];\n\t            }\n\t        }\n\n\t        return CBC;\n\t    }());\n\n\t    /**\n\t     * Padding namespace.\n\t     */\n\t    var C_pad = C.pad = {};\n\n\t    /**\n\t     * PKCS #5/7 padding strategy.\n\t     */\n\t    var Pkcs7 = C_pad.Pkcs7 = {\n\t        /**\n\t         * Pads data using the algorithm defined in PKCS #5/7.\n\t         *\n\t         * @param {WordArray} data The data to pad.\n\t         * @param {number} blockSize The multiple that the data should be padded to.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);\n\t         */\n\t        pad: function (data, blockSize) {\n\t            // Shortcut\n\t            var blockSizeBytes = blockSize * 4;\n\n\t            // Count padding bytes\n\t            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;\n\n\t            // Create padding word\n\t            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;\n\n\t            // Create padding\n\t            var paddingWords = [];\n\t            for (var i = 0; i < nPaddingBytes; i += 4) {\n\t                paddingWords.push(paddingWord);\n\t            }\n\t            var padding = WordArray.create(paddingWords, nPaddingBytes);\n\n\t            // Add padding\n\t            data.concat(padding);\n\t        },\n\n\t        /**\n\t         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.\n\t         *\n\t         * @param {WordArray} data The data to unpad.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     CryptoJS.pad.Pkcs7.unpad(wordArray);\n\t         */\n\t        unpad: function (data) {\n\t            // Get number of padding bytes from last byte\n\t            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;\n\n\t            // Remove padding\n\t            data.sigBytes -= nPaddingBytes;\n\t        }\n\t    };\n\n\t    /**\n\t     * Abstract base block cipher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)\n\t     */\n\t    var BlockCipher = C_lib.BlockCipher = Cipher.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {Mode} mode The block mode to use. Default: CBC\n\t         * @property {Padding} padding The padding strategy to use. Default: Pkcs7\n\t         */\n\t        cfg: Cipher.cfg.extend({\n\t            mode: CBC,\n\t            padding: Pkcs7\n\t        }),\n\n\t        reset: function () {\n\t            var modeCreator;\n\n\t            // Reset cipher\n\t            Cipher.reset.call(this);\n\n\t            // Shortcuts\n\t            var cfg = this.cfg;\n\t            var iv = cfg.iv;\n\t            var mode = cfg.mode;\n\n\t            // Reset block mode\n\t            if (this._xformMode == this._ENC_XFORM_MODE) {\n\t                modeCreator = mode.createEncryptor;\n\t            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\n\t                modeCreator = mode.createDecryptor;\n\t                // Keep at least one block in the buffer for unpadding\n\t                this._minBufferSize = 1;\n\t            }\n\n\t            if (this._mode && this._mode.__creator == modeCreator) {\n\t                this._mode.init(this, iv && iv.words);\n\t            } else {\n\t                this._mode = modeCreator.call(mode, this, iv && iv.words);\n\t                this._mode.__creator = modeCreator;\n\t            }\n\t        },\n\n\t        _doProcessBlock: function (words, offset) {\n\t            this._mode.processBlock(words, offset);\n\t        },\n\n\t        _doFinalize: function () {\n\t            var finalProcessedBlocks;\n\n\t            // Shortcut\n\t            var padding = this.cfg.padding;\n\n\t            // Finalize\n\t            if (this._xformMode == this._ENC_XFORM_MODE) {\n\t                // Pad data\n\t                padding.pad(this._data, this.blockSize);\n\n\t                // Process final blocks\n\t                finalProcessedBlocks = this._process(!!'flush');\n\t            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {\n\t                // Process final blocks\n\t                finalProcessedBlocks = this._process(!!'flush');\n\n\t                // Unpad data\n\t                padding.unpad(finalProcessedBlocks);\n\t            }\n\n\t            return finalProcessedBlocks;\n\t        },\n\n\t        blockSize: 128/32\n\t    });\n\n\t    /**\n\t     * A collection of cipher parameters.\n\t     *\n\t     * @property {WordArray} ciphertext The raw ciphertext.\n\t     * @property {WordArray} key The key to this ciphertext.\n\t     * @property {WordArray} iv The IV used in the ciphering operation.\n\t     * @property {WordArray} salt The salt used with a key derivation function.\n\t     * @property {Cipher} algorithm The cipher algorithm.\n\t     * @property {Mode} mode The block mode used in the ciphering operation.\n\t     * @property {Padding} padding The padding scheme used in the ciphering operation.\n\t     * @property {number} blockSize The block size of the cipher.\n\t     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.\n\t     */\n\t    var CipherParams = C_lib.CipherParams = Base.extend({\n\t        /**\n\t         * Initializes a newly created cipher params object.\n\t         *\n\t         * @param {Object} cipherParams An object with any of the possible cipher parameters.\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipherParams = CryptoJS.lib.CipherParams.create({\n\t         *         ciphertext: ciphertextWordArray,\n\t         *         key: keyWordArray,\n\t         *         iv: ivWordArray,\n\t         *         salt: saltWordArray,\n\t         *         algorithm: CryptoJS.algo.AES,\n\t         *         mode: CryptoJS.mode.CBC,\n\t         *         padding: CryptoJS.pad.PKCS7,\n\t         *         blockSize: 4,\n\t         *         formatter: CryptoJS.format.OpenSSL\n\t         *     });\n\t         */\n\t        init: function (cipherParams) {\n\t            this.mixIn(cipherParams);\n\t        },\n\n\t        /**\n\t         * Converts this cipher params object to a string.\n\t         *\n\t         * @param {Format} formatter (Optional) The formatting strategy to use.\n\t         *\n\t         * @return {string} The stringified cipher params.\n\t         *\n\t         * @throws Error If neither the formatter nor the default formatter is set.\n\t         *\n\t         * @example\n\t         *\n\t         *     var string = cipherParams + '';\n\t         *     var string = cipherParams.toString();\n\t         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);\n\t         */\n\t        toString: function (formatter) {\n\t            return (formatter || this.formatter).stringify(this);\n\t        }\n\t    });\n\n\t    /**\n\t     * Format namespace.\n\t     */\n\t    var C_format = C.format = {};\n\n\t    /**\n\t     * OpenSSL formatting strategy.\n\t     */\n\t    var OpenSSLFormatter = C_format.OpenSSL = {\n\t        /**\n\t         * Converts a cipher params object to an OpenSSL-compatible string.\n\t         *\n\t         * @param {CipherParams} cipherParams The cipher params object.\n\t         *\n\t         * @return {string} The OpenSSL-compatible string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);\n\t         */\n\t        stringify: function (cipherParams) {\n\t            var wordArray;\n\n\t            // Shortcuts\n\t            var ciphertext = cipherParams.ciphertext;\n\t            var salt = cipherParams.salt;\n\n\t            // Format\n\t            if (salt) {\n\t                wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);\n\t            } else {\n\t                wordArray = ciphertext;\n\t            }\n\n\t            return wordArray.toString(Base64);\n\t        },\n\n\t        /**\n\t         * Converts an OpenSSL-compatible string to a cipher params object.\n\t         *\n\t         * @param {string} openSSLStr The OpenSSL-compatible string.\n\t         *\n\t         * @return {CipherParams} The cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);\n\t         */\n\t        parse: function (openSSLStr) {\n\t            var salt;\n\n\t            // Parse base64\n\t            var ciphertext = Base64.parse(openSSLStr);\n\n\t            // Shortcut\n\t            var ciphertextWords = ciphertext.words;\n\n\t            // Test for salt\n\t            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {\n\t                // Extract salt\n\t                salt = WordArray.create(ciphertextWords.slice(2, 4));\n\n\t                // Remove salt from ciphertext\n\t                ciphertextWords.splice(0, 4);\n\t                ciphertext.sigBytes -= 16;\n\t            }\n\n\t            return CipherParams.create({ ciphertext: ciphertext, salt: salt });\n\t        }\n\t    };\n\n\t    /**\n\t     * A cipher wrapper that returns ciphertext as a serializable cipher params object.\n\t     */\n\t    var SerializableCipher = C_lib.SerializableCipher = Base.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL\n\t         */\n\t        cfg: Base.extend({\n\t            format: OpenSSLFormatter\n\t        }),\n\n\t        /**\n\t         * Encrypts a message.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {WordArray|string} message The message to encrypt.\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {CipherParams} A cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t         */\n\t        encrypt: function (cipher, message, key, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Encrypt\n\t            var encryptor = cipher.createEncryptor(key, cfg);\n\t            var ciphertext = encryptor.finalize(message);\n\n\t            // Shortcut\n\t            var cipherCfg = encryptor.cfg;\n\n\t            // Create and return serializable cipher params\n\t            return CipherParams.create({\n\t                ciphertext: ciphertext,\n\t                key: key,\n\t                iv: cipherCfg.iv,\n\t                algorithm: cipher,\n\t                mode: cipherCfg.mode,\n\t                padding: cipherCfg.padding,\n\t                blockSize: cipher.blockSize,\n\t                formatter: cfg.format\n\t            });\n\t        },\n\n\t        /**\n\t         * Decrypts serialized ciphertext.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n\t         * @param {WordArray} key The key.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {WordArray} The plaintext.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });\n\t         */\n\t        decrypt: function (cipher, ciphertext, key, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Convert string to CipherParams\n\t            ciphertext = this._parse(ciphertext, cfg.format);\n\n\t            // Decrypt\n\t            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);\n\n\t            return plaintext;\n\t        },\n\n\t        /**\n\t         * Converts serialized ciphertext to CipherParams,\n\t         * else assumed CipherParams already and returns ciphertext unchanged.\n\t         *\n\t         * @param {CipherParams|string} ciphertext The ciphertext.\n\t         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.\n\t         *\n\t         * @return {CipherParams} The unserialized ciphertext.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);\n\t         */\n\t        _parse: function (ciphertext, format) {\n\t            if (typeof ciphertext == 'string') {\n\t                return format.parse(ciphertext, this);\n\t            } else {\n\t                return ciphertext;\n\t            }\n\t        }\n\t    });\n\n\t    /**\n\t     * Key derivation function namespace.\n\t     */\n\t    var C_kdf = C.kdf = {};\n\n\t    /**\n\t     * OpenSSL key derivation function.\n\t     */\n\t    var OpenSSLKdf = C_kdf.OpenSSL = {\n\t        /**\n\t         * Derives a key and IV from a password.\n\t         *\n\t         * @param {string} password The password to derive from.\n\t         * @param {number} keySize The size in words of the key to generate.\n\t         * @param {number} ivSize The size in words of the IV to generate.\n\t         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.\n\t         *\n\t         * @return {CipherParams} A cipher params object with the key, IV, and salt.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);\n\t         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');\n\t         */\n\t        execute: function (password, keySize, ivSize, salt) {\n\t            // Generate random salt\n\t            if (!salt) {\n\t                salt = WordArray.random(64/8);\n\t            }\n\n\t            // Derive key and IV\n\t            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);\n\n\t            // Separate key and IV\n\t            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);\n\t            key.sigBytes = keySize * 4;\n\n\t            // Return params\n\t            return CipherParams.create({ key: key, iv: iv, salt: salt });\n\t        }\n\t    };\n\n\t    /**\n\t     * A serializable cipher wrapper that derives the key from a password,\n\t     * and returns ciphertext as a serializable cipher params object.\n\t     */\n\t    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL\n\t         */\n\t        cfg: SerializableCipher.cfg.extend({\n\t            kdf: OpenSSLKdf\n\t        }),\n\n\t        /**\n\t         * Encrypts a message using a password.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {WordArray|string} message The message to encrypt.\n\t         * @param {string} password The password.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {CipherParams} A cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');\n\t         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });\n\t         */\n\t        encrypt: function (cipher, message, password, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Derive key and other params\n\t            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);\n\n\t            // Add IV to config\n\t            cfg.iv = derivedParams.iv;\n\n\t            // Encrypt\n\t            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);\n\n\t            // Mix in derived params\n\t            ciphertext.mixIn(derivedParams);\n\n\t            return ciphertext;\n\t        },\n\n\t        /**\n\t         * Decrypts serialized ciphertext using a password.\n\t         *\n\t         * @param {Cipher} cipher The cipher algorithm to use.\n\t         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.\n\t         * @param {string} password The password.\n\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.\n\t         *\n\t         * @return {WordArray} The plaintext.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });\n\t         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });\n\t         */\n\t        decrypt: function (cipher, ciphertext, password, cfg) {\n\t            // Apply config defaults\n\t            cfg = this.cfg.extend(cfg);\n\n\t            // Convert string to CipherParams\n\t            ciphertext = this._parse(ciphertext, cfg.format);\n\n\t            // Derive key and other params\n\t            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);\n\n\t            // Add IV to config\n\t            cfg.iv = derivedParams.iv;\n\n\t            // Decrypt\n\t            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);\n\n\t            return plaintext;\n\t        }\n\t    });\n\t}());\n\n\n}));\n\n//# sourceURL=webpack://lemon/./node_modules/crypto-js/cipher-core.js?"
          );

          /***/
        },

      /***/ "./node_modules/crypto-js/core.js":
        /*!****************************************!*\
  !*** ./node_modules/crypto-js/core.js ***!
  \****************************************/
        /***/ function (module, exports, __webpack_require__) {
          eval(
            ";(function (root, factory) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory();\n\t}\n\telse {}\n}(this, function () {\n\n\t/*globals window, global, require*/\n\n\t/**\n\t * CryptoJS core components.\n\t */\n\tvar CryptoJS = CryptoJS || (function (Math, undefined) {\n\n\t    var crypto;\n\n\t    // Native crypto from window (Browser)\n\t    if (typeof window !== 'undefined' && window.crypto) {\n\t        crypto = window.crypto;\n\t    }\n\n\t    // Native crypto in web worker (Browser)\n\t    if (typeof self !== 'undefined' && self.crypto) {\n\t        crypto = self.crypto;\n\t    }\n\n\t    // Native crypto from worker\n\t    if (typeof globalThis !== 'undefined' && globalThis.crypto) {\n\t        crypto = globalThis.crypto;\n\t    }\n\n\t    // Native (experimental IE 11) crypto from window (Browser)\n\t    if (!crypto && typeof window !== 'undefined' && window.msCrypto) {\n\t        crypto = window.msCrypto;\n\t    }\n\n\t    // Native crypto from global (NodeJS)\n\t    if (!crypto && typeof __webpack_require__.g !== 'undefined' && __webpack_require__.g.crypto) {\n\t        crypto = __webpack_require__.g.crypto;\n\t    }\n\n\t    // Native crypto import via require (NodeJS)\n\t    if (!crypto && \"function\" === 'function') {\n\t        try {\n\t            crypto = __webpack_require__(/*! crypto */ \"?9157\");\n\t        } catch (err) {}\n\t    }\n\n\t    /*\n\t     * Cryptographically secure pseudorandom number generator\n\t     *\n\t     * As Math.random() is cryptographically not safe to use\n\t     */\n\t    var cryptoSecureRandomInt = function () {\n\t        if (crypto) {\n\t            // Use getRandomValues method (Browser)\n\t            if (typeof crypto.getRandomValues === 'function') {\n\t                try {\n\t                    return crypto.getRandomValues(new Uint32Array(1))[0];\n\t                } catch (err) {}\n\t            }\n\n\t            // Use randomBytes method (NodeJS)\n\t            if (typeof crypto.randomBytes === 'function') {\n\t                try {\n\t                    return crypto.randomBytes(4).readInt32LE();\n\t                } catch (err) {}\n\t            }\n\t        }\n\n\t        throw new Error('Native crypto module could not be used to get secure random number.');\n\t    };\n\n\t    /*\n\t     * Local polyfill of Object.create\n\n\t     */\n\t    var create = Object.create || (function () {\n\t        function F() {}\n\n\t        return function (obj) {\n\t            var subtype;\n\n\t            F.prototype = obj;\n\n\t            subtype = new F();\n\n\t            F.prototype = null;\n\n\t            return subtype;\n\t        };\n\t    }());\n\n\t    /**\n\t     * CryptoJS namespace.\n\t     */\n\t    var C = {};\n\n\t    /**\n\t     * Library namespace.\n\t     */\n\t    var C_lib = C.lib = {};\n\n\t    /**\n\t     * Base object for prototypal inheritance.\n\t     */\n\t    var Base = C_lib.Base = (function () {\n\n\n\t        return {\n\t            /**\n\t             * Creates a new object that inherits from this object.\n\t             *\n\t             * @param {Object} overrides Properties to copy into the new object.\n\t             *\n\t             * @return {Object} The new object.\n\t             *\n\t             * @static\n\t             *\n\t             * @example\n\t             *\n\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t             *         field: 'value',\n\t             *\n\t             *         method: function () {\n\t             *         }\n\t             *     });\n\t             */\n\t            extend: function (overrides) {\n\t                // Spawn\n\t                var subtype = create(this);\n\n\t                // Augment\n\t                if (overrides) {\n\t                    subtype.mixIn(overrides);\n\t                }\n\n\t                // Create default initializer\n\t                if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {\n\t                    subtype.init = function () {\n\t                        subtype.$super.init.apply(this, arguments);\n\t                    };\n\t                }\n\n\t                // Initializer's prototype is the subtype object\n\t                subtype.init.prototype = subtype;\n\n\t                // Reference supertype\n\t                subtype.$super = this;\n\n\t                return subtype;\n\t            },\n\n\t            /**\n\t             * Extends this object and runs the init method.\n\t             * Arguments to create() will be passed to init().\n\t             *\n\t             * @return {Object} The new object.\n\t             *\n\t             * @static\n\t             *\n\t             * @example\n\t             *\n\t             *     var instance = MyType.create();\n\t             */\n\t            create: function () {\n\t                var instance = this.extend();\n\t                instance.init.apply(instance, arguments);\n\n\t                return instance;\n\t            },\n\n\t            /**\n\t             * Initializes a newly created object.\n\t             * Override this method to add some logic when your objects are created.\n\t             *\n\t             * @example\n\t             *\n\t             *     var MyType = CryptoJS.lib.Base.extend({\n\t             *         init: function () {\n\t             *             // ...\n\t             *         }\n\t             *     });\n\t             */\n\t            init: function () {\n\t            },\n\n\t            /**\n\t             * Copies properties into this object.\n\t             *\n\t             * @param {Object} properties The properties to mix in.\n\t             *\n\t             * @example\n\t             *\n\t             *     MyType.mixIn({\n\t             *         field: 'value'\n\t             *     });\n\t             */\n\t            mixIn: function (properties) {\n\t                for (var propertyName in properties) {\n\t                    if (properties.hasOwnProperty(propertyName)) {\n\t                        this[propertyName] = properties[propertyName];\n\t                    }\n\t                }\n\n\t                // IE won't copy toString using the loop above\n\t                if (properties.hasOwnProperty('toString')) {\n\t                    this.toString = properties.toString;\n\t                }\n\t            },\n\n\t            /**\n\t             * Creates a copy of this object.\n\t             *\n\t             * @return {Object} The clone.\n\t             *\n\t             * @example\n\t             *\n\t             *     var clone = instance.clone();\n\t             */\n\t            clone: function () {\n\t                return this.init.prototype.extend(this);\n\t            }\n\t        };\n\t    }());\n\n\t    /**\n\t     * An array of 32-bit words.\n\t     *\n\t     * @property {Array} words The array of 32-bit words.\n\t     * @property {number} sigBytes The number of significant bytes in this word array.\n\t     */\n\t    var WordArray = C_lib.WordArray = Base.extend({\n\t        /**\n\t         * Initializes a newly created word array.\n\t         *\n\t         * @param {Array} words (Optional) An array of 32-bit words.\n\t         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.lib.WordArray.create();\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);\n\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);\n\t         */\n\t        init: function (words, sigBytes) {\n\t            words = this.words = words || [];\n\n\t            if (sigBytes != undefined) {\n\t                this.sigBytes = sigBytes;\n\t            } else {\n\t                this.sigBytes = words.length * 4;\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts this word array to a string.\n\t         *\n\t         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex\n\t         *\n\t         * @return {string} The stringified word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     var string = wordArray + '';\n\t         *     var string = wordArray.toString();\n\t         *     var string = wordArray.toString(CryptoJS.enc.Utf8);\n\t         */\n\t        toString: function (encoder) {\n\t            return (encoder || Hex).stringify(this);\n\t        },\n\n\t        /**\n\t         * Concatenates a word array to this word array.\n\t         *\n\t         * @param {WordArray} wordArray The word array to append.\n\t         *\n\t         * @return {WordArray} This word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     wordArray1.concat(wordArray2);\n\t         */\n\t        concat: function (wordArray) {\n\t            // Shortcuts\n\t            var thisWords = this.words;\n\t            var thatWords = wordArray.words;\n\t            var thisSigBytes = this.sigBytes;\n\t            var thatSigBytes = wordArray.sigBytes;\n\n\t            // Clamp excess bits\n\t            this.clamp();\n\n\t            // Concat\n\t            if (thisSigBytes % 4) {\n\t                // Copy one byte at a time\n\t                for (var i = 0; i < thatSigBytes; i++) {\n\t                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);\n\t                }\n\t            } else {\n\t                // Copy one word at a time\n\t                for (var j = 0; j < thatSigBytes; j += 4) {\n\t                    thisWords[(thisSigBytes + j) >>> 2] = thatWords[j >>> 2];\n\t                }\n\t            }\n\t            this.sigBytes += thatSigBytes;\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Removes insignificant bits.\n\t         *\n\t         * @example\n\t         *\n\t         *     wordArray.clamp();\n\t         */\n\t        clamp: function () {\n\t            // Shortcuts\n\t            var words = this.words;\n\t            var sigBytes = this.sigBytes;\n\n\t            // Clamp\n\t            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);\n\t            words.length = Math.ceil(sigBytes / 4);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this word array.\n\t         *\n\t         * @return {WordArray} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = wordArray.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\t            clone.words = this.words.slice(0);\n\n\t            return clone;\n\t        },\n\n\t        /**\n\t         * Creates a word array filled with random bytes.\n\t         *\n\t         * @param {number} nBytes The number of random bytes to generate.\n\t         *\n\t         * @return {WordArray} The random word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.lib.WordArray.random(16);\n\t         */\n\t        random: function (nBytes) {\n\t            var words = [];\n\n\t            for (var i = 0; i < nBytes; i += 4) {\n\t                words.push(cryptoSecureRandomInt());\n\t            }\n\n\t            return new WordArray.init(words, nBytes);\n\t        }\n\t    });\n\n\t    /**\n\t     * Encoder namespace.\n\t     */\n\t    var C_enc = C.enc = {};\n\n\t    /**\n\t     * Hex encoding strategy.\n\t     */\n\t    var Hex = C_enc.Hex = {\n\t        /**\n\t         * Converts a word array to a hex string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The hex string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var hexChars = [];\n\t            for (var i = 0; i < sigBytes; i++) {\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                hexChars.push((bite >>> 4).toString(16));\n\t                hexChars.push((bite & 0x0f).toString(16));\n\t            }\n\n\t            return hexChars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a hex string to a word array.\n\t         *\n\t         * @param {string} hexStr The hex string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);\n\t         */\n\t        parse: function (hexStr) {\n\t            // Shortcut\n\t            var hexStrLength = hexStr.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < hexStrLength; i += 2) {\n\t                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);\n\t            }\n\n\t            return new WordArray.init(words, hexStrLength / 2);\n\t        }\n\t    };\n\n\t    /**\n\t     * Latin1 encoding strategy.\n\t     */\n\t    var Latin1 = C_enc.Latin1 = {\n\t        /**\n\t         * Converts a word array to a Latin1 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The Latin1 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var latin1Chars = [];\n\t            for (var i = 0; i < sigBytes; i++) {\n\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;\n\t                latin1Chars.push(String.fromCharCode(bite));\n\t            }\n\n\t            return latin1Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a Latin1 string to a word array.\n\t         *\n\t         * @param {string} latin1Str The Latin1 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);\n\t         */\n\t        parse: function (latin1Str) {\n\t            // Shortcut\n\t            var latin1StrLength = latin1Str.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < latin1StrLength; i++) {\n\t                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);\n\t            }\n\n\t            return new WordArray.init(words, latin1StrLength);\n\t        }\n\t    };\n\n\t    /**\n\t     * UTF-8 encoding strategy.\n\t     */\n\t    var Utf8 = C_enc.Utf8 = {\n\t        /**\n\t         * Converts a word array to a UTF-8 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The UTF-8 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            try {\n\t                return decodeURIComponent(escape(Latin1.stringify(wordArray)));\n\t            } catch (e) {\n\t                throw new Error('Malformed UTF-8 data');\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts a UTF-8 string to a word array.\n\t         *\n\t         * @param {string} utf8Str The UTF-8 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);\n\t         */\n\t        parse: function (utf8Str) {\n\t            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));\n\t        }\n\t    };\n\n\t    /**\n\t     * Abstract buffered block algorithm template.\n\t     *\n\t     * The property blockSize must be implemented in a concrete subtype.\n\t     *\n\t     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0\n\t     */\n\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({\n\t        /**\n\t         * Resets this block algorithm's data buffer to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     bufferedBlockAlgorithm.reset();\n\t         */\n\t        reset: function () {\n\t            // Initial values\n\t            this._data = new WordArray.init();\n\t            this._nDataBytes = 0;\n\t        },\n\n\t        /**\n\t         * Adds new data to this block algorithm's buffer.\n\t         *\n\t         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.\n\t         *\n\t         * @example\n\t         *\n\t         *     bufferedBlockAlgorithm._append('data');\n\t         *     bufferedBlockAlgorithm._append(wordArray);\n\t         */\n\t        _append: function (data) {\n\t            // Convert string to WordArray, else assume WordArray already\n\t            if (typeof data == 'string') {\n\t                data = Utf8.parse(data);\n\t            }\n\n\t            // Append\n\t            this._data.concat(data);\n\t            this._nDataBytes += data.sigBytes;\n\t        },\n\n\t        /**\n\t         * Processes available data blocks.\n\t         *\n\t         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.\n\t         *\n\t         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.\n\t         *\n\t         * @return {WordArray} The processed data.\n\t         *\n\t         * @example\n\t         *\n\t         *     var processedData = bufferedBlockAlgorithm._process();\n\t         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');\n\t         */\n\t        _process: function (doFlush) {\n\t            var processedWords;\n\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\t            var dataSigBytes = data.sigBytes;\n\t            var blockSize = this.blockSize;\n\t            var blockSizeBytes = blockSize * 4;\n\n\t            // Count blocks ready\n\t            var nBlocksReady = dataSigBytes / blockSizeBytes;\n\t            if (doFlush) {\n\t                // Round up to include partial blocks\n\t                nBlocksReady = Math.ceil(nBlocksReady);\n\t            } else {\n\t                // Round down to include only full blocks,\n\t                // less the number of blocks that must remain in the buffer\n\t                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);\n\t            }\n\n\t            // Count words ready\n\t            var nWordsReady = nBlocksReady * blockSize;\n\n\t            // Count bytes ready\n\t            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);\n\n\t            // Process blocks\n\t            if (nWordsReady) {\n\t                for (var offset = 0; offset < nWordsReady; offset += blockSize) {\n\t                    // Perform concrete-algorithm logic\n\t                    this._doProcessBlock(dataWords, offset);\n\t                }\n\n\t                // Remove processed words\n\t                processedWords = dataWords.splice(0, nWordsReady);\n\t                data.sigBytes -= nBytesReady;\n\t            }\n\n\t            // Return processed words\n\t            return new WordArray.init(processedWords, nBytesReady);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this object.\n\t         *\n\t         * @return {Object} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = bufferedBlockAlgorithm.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\t            clone._data = this._data.clone();\n\n\t            return clone;\n\t        },\n\n\t        _minBufferSize: 0\n\t    });\n\n\t    /**\n\t     * Abstract hasher template.\n\t     *\n\t     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)\n\t     */\n\t    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({\n\t        /**\n\t         * Configuration options.\n\t         */\n\t        cfg: Base.extend(),\n\n\t        /**\n\t         * Initializes a newly created hasher.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hasher = CryptoJS.algo.SHA256.create();\n\t         */\n\t        init: function (cfg) {\n\t            // Apply config defaults\n\t            this.cfg = this.cfg.extend(cfg);\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this hasher to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     hasher.reset();\n\t         */\n\t        reset: function () {\n\t            // Reset data buffer\n\t            BufferedBlockAlgorithm.reset.call(this);\n\n\t            // Perform concrete-hasher logic\n\t            this._doReset();\n\t        },\n\n\t        /**\n\t         * Updates this hasher with a message.\n\t         *\n\t         * @param {WordArray|string} messageUpdate The message to append.\n\t         *\n\t         * @return {Hasher} This hasher.\n\t         *\n\t         * @example\n\t         *\n\t         *     hasher.update('message');\n\t         *     hasher.update(wordArray);\n\t         */\n\t        update: function (messageUpdate) {\n\t            // Append\n\t            this._append(messageUpdate);\n\n\t            // Update the hash\n\t            this._process();\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Finalizes the hash computation.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n\t         *\n\t         * @return {WordArray} The hash.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hash = hasher.finalize();\n\t         *     var hash = hasher.finalize('message');\n\t         *     var hash = hasher.finalize(wordArray);\n\t         */\n\t        finalize: function (messageUpdate) {\n\t            // Final message update\n\t            if (messageUpdate) {\n\t                this._append(messageUpdate);\n\t            }\n\n\t            // Perform concrete-hasher logic\n\t            var hash = this._doFinalize();\n\n\t            return hash;\n\t        },\n\n\t        blockSize: 512/32,\n\n\t        /**\n\t         * Creates a shortcut function to a hasher's object interface.\n\t         *\n\t         * @param {Hasher} hasher The hasher to create a helper for.\n\t         *\n\t         * @return {Function} The shortcut function.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);\n\t         */\n\t        _createHelper: function (hasher) {\n\t            return function (message, cfg) {\n\t                return new hasher.init(cfg).finalize(message);\n\t            };\n\t        },\n\n\t        /**\n\t         * Creates a shortcut function to the HMAC's object interface.\n\t         *\n\t         * @param {Hasher} hasher The hasher to use in this HMAC helper.\n\t         *\n\t         * @return {Function} The shortcut function.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);\n\t         */\n\t        _createHmacHelper: function (hasher) {\n\t            return function (message, key) {\n\t                return new C_algo.HMAC.init(hasher, key).finalize(message);\n\t            };\n\t        }\n\t    });\n\n\t    /**\n\t     * Algorithm namespace.\n\t     */\n\t    var C_algo = C.algo = {};\n\n\t    return C;\n\t}(Math));\n\n\n\treturn CryptoJS;\n\n}));\n\n//# sourceURL=webpack://lemon/./node_modules/crypto-js/core.js?"
          );

          /***/
        },

      /***/ "./node_modules/crypto-js/enc-base64.js":
        /*!**********************************************!*\
  !*** ./node_modules/crypto-js/enc-base64.js ***!
  \**********************************************/
        /***/ function (module, exports, __webpack_require__) {
          eval(
            ";(function (root, factory) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__webpack_require__(/*! ./core */ \"./node_modules/crypto-js/core.js\"));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_enc = C.enc;\n\n\t    /**\n\t     * Base64 encoding strategy.\n\t     */\n\t    var Base64 = C_enc.Base64 = {\n\t        /**\n\t         * Converts a word array to a Base64 string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The Base64 string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\t            var map = this._map;\n\n\t            // Clamp excess bits\n\t            wordArray.clamp();\n\n\t            // Convert\n\t            var base64Chars = [];\n\t            for (var i = 0; i < sigBytes; i += 3) {\n\t                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;\n\t                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;\n\t                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;\n\n\t                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;\n\n\t                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {\n\t                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));\n\t                }\n\t            }\n\n\t            // Add padding\n\t            var paddingChar = map.charAt(64);\n\t            if (paddingChar) {\n\t                while (base64Chars.length % 4) {\n\t                    base64Chars.push(paddingChar);\n\t                }\n\t            }\n\n\t            return base64Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a Base64 string to a word array.\n\t         *\n\t         * @param {string} base64Str The Base64 string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);\n\t         */\n\t        parse: function (base64Str) {\n\t            // Shortcuts\n\t            var base64StrLength = base64Str.length;\n\t            var map = this._map;\n\t            var reverseMap = this._reverseMap;\n\n\t            if (!reverseMap) {\n\t                    reverseMap = this._reverseMap = [];\n\t                    for (var j = 0; j < map.length; j++) {\n\t                        reverseMap[map.charCodeAt(j)] = j;\n\t                    }\n\t            }\n\n\t            // Ignore padding\n\t            var paddingChar = map.charAt(64);\n\t            if (paddingChar) {\n\t                var paddingIndex = base64Str.indexOf(paddingChar);\n\t                if (paddingIndex !== -1) {\n\t                    base64StrLength = paddingIndex;\n\t                }\n\t            }\n\n\t            // Convert\n\t            return parseLoop(base64Str, base64StrLength, reverseMap);\n\n\t        },\n\n\t        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='\n\t    };\n\n\t    function parseLoop(base64Str, base64StrLength, reverseMap) {\n\t      var words = [];\n\t      var nBytes = 0;\n\t      for (var i = 0; i < base64StrLength; i++) {\n\t          if (i % 4) {\n\t              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);\n\t              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);\n\t              var bitsCombined = bits1 | bits2;\n\t              words[nBytes >>> 2] |= bitsCombined << (24 - (nBytes % 4) * 8);\n\t              nBytes++;\n\t          }\n\t      }\n\t      return WordArray.create(words, nBytes);\n\t    }\n\t}());\n\n\n\treturn CryptoJS.enc.Base64;\n\n}));\n\n//# sourceURL=webpack://lemon/./node_modules/crypto-js/enc-base64.js?"
          );

          /***/
        },

      /***/ "./node_modules/crypto-js/enc-base64url.js":
        /*!*************************************************!*\
  !*** ./node_modules/crypto-js/enc-base64url.js ***!
  \*************************************************/
        /***/ function (module, exports, __webpack_require__) {
          eval(
            ";(function (root, factory) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__webpack_require__(/*! ./core */ \"./node_modules/crypto-js/core.js\"));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_enc = C.enc;\n\n\t    /**\n\t     * Base64url encoding strategy.\n\t     */\n\t    var Base64url = C_enc.Base64url = {\n\t        /**\n\t         * Converts a word array to a Base64url string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @param {boolean} urlSafe Whether to use url safe\n\t         *\n\t         * @return {string} The Base64url string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var base64String = CryptoJS.enc.Base64url.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray, urlSafe=true) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\t            var map = urlSafe ? this._safe_map : this._map;\n\n\t            // Clamp excess bits\n\t            wordArray.clamp();\n\n\t            // Convert\n\t            var base64Chars = [];\n\t            for (var i = 0; i < sigBytes; i += 3) {\n\t                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;\n\t                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;\n\t                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;\n\n\t                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;\n\n\t                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {\n\t                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));\n\t                }\n\t            }\n\n\t            // Add padding\n\t            var paddingChar = map.charAt(64);\n\t            if (paddingChar) {\n\t                while (base64Chars.length % 4) {\n\t                    base64Chars.push(paddingChar);\n\t                }\n\t            }\n\n\t            return base64Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a Base64url string to a word array.\n\t         *\n\t         * @param {string} base64Str The Base64url string.\n\t         *\n\t         * @param {boolean} urlSafe Whether to use url safe\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Base64url.parse(base64String);\n\t         */\n\t        parse: function (base64Str, urlSafe=true) {\n\t            // Shortcuts\n\t            var base64StrLength = base64Str.length;\n\t            var map = urlSafe ? this._safe_map : this._map;\n\t            var reverseMap = this._reverseMap;\n\n\t            if (!reverseMap) {\n\t                reverseMap = this._reverseMap = [];\n\t                for (var j = 0; j < map.length; j++) {\n\t                    reverseMap[map.charCodeAt(j)] = j;\n\t                }\n\t            }\n\n\t            // Ignore padding\n\t            var paddingChar = map.charAt(64);\n\t            if (paddingChar) {\n\t                var paddingIndex = base64Str.indexOf(paddingChar);\n\t                if (paddingIndex !== -1) {\n\t                    base64StrLength = paddingIndex;\n\t                }\n\t            }\n\n\t            // Convert\n\t            return parseLoop(base64Str, base64StrLength, reverseMap);\n\n\t        },\n\n\t        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',\n\t        _safe_map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_',\n\t    };\n\n\t    function parseLoop(base64Str, base64StrLength, reverseMap) {\n\t        var words = [];\n\t        var nBytes = 0;\n\t        for (var i = 0; i < base64StrLength; i++) {\n\t            if (i % 4) {\n\t                var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << ((i % 4) * 2);\n\t                var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> (6 - (i % 4) * 2);\n\t                var bitsCombined = bits1 | bits2;\n\t                words[nBytes >>> 2] |= bitsCombined << (24 - (nBytes % 4) * 8);\n\t                nBytes++;\n\t            }\n\t        }\n\t        return WordArray.create(words, nBytes);\n\t    }\n\t}());\n\n\treturn CryptoJS.enc.Base64url;\n\n}));\n\n//# sourceURL=webpack://lemon/./node_modules/crypto-js/enc-base64url.js?"
          );

          /***/
        },

      /***/ "./node_modules/crypto-js/enc-utf16.js":
        /*!*********************************************!*\
  !*** ./node_modules/crypto-js/enc-utf16.js ***!
  \*********************************************/
        /***/ function (module, exports, __webpack_require__) {
          eval(
            ";(function (root, factory) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__webpack_require__(/*! ./core */ \"./node_modules/crypto-js/core.js\"));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_enc = C.enc;\n\n\t    /**\n\t     * UTF-16 BE encoding strategy.\n\t     */\n\t    var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {\n\t        /**\n\t         * Converts a word array to a UTF-16 BE string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The UTF-16 BE string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var utf16Chars = [];\n\t            for (var i = 0; i < sigBytes; i += 2) {\n\t                var codePoint = (words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff;\n\t                utf16Chars.push(String.fromCharCode(codePoint));\n\t            }\n\n\t            return utf16Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a UTF-16 BE string to a word array.\n\t         *\n\t         * @param {string} utf16Str The UTF-16 BE string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);\n\t         */\n\t        parse: function (utf16Str) {\n\t            // Shortcut\n\t            var utf16StrLength = utf16Str.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < utf16StrLength; i++) {\n\t                words[i >>> 1] |= utf16Str.charCodeAt(i) << (16 - (i % 2) * 16);\n\t            }\n\n\t            return WordArray.create(words, utf16StrLength * 2);\n\t        }\n\t    };\n\n\t    /**\n\t     * UTF-16 LE encoding strategy.\n\t     */\n\t    C_enc.Utf16LE = {\n\t        /**\n\t         * Converts a word array to a UTF-16 LE string.\n\t         *\n\t         * @param {WordArray} wordArray The word array.\n\t         *\n\t         * @return {string} The UTF-16 LE string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);\n\t         */\n\t        stringify: function (wordArray) {\n\t            // Shortcuts\n\t            var words = wordArray.words;\n\t            var sigBytes = wordArray.sigBytes;\n\n\t            // Convert\n\t            var utf16Chars = [];\n\t            for (var i = 0; i < sigBytes; i += 2) {\n\t                var codePoint = swapEndian((words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff);\n\t                utf16Chars.push(String.fromCharCode(codePoint));\n\t            }\n\n\t            return utf16Chars.join('');\n\t        },\n\n\t        /**\n\t         * Converts a UTF-16 LE string to a word array.\n\t         *\n\t         * @param {string} utf16Str The UTF-16 LE string.\n\t         *\n\t         * @return {WordArray} The word array.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);\n\t         */\n\t        parse: function (utf16Str) {\n\t            // Shortcut\n\t            var utf16StrLength = utf16Str.length;\n\n\t            // Convert\n\t            var words = [];\n\t            for (var i = 0; i < utf16StrLength; i++) {\n\t                words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << (16 - (i % 2) * 16));\n\t            }\n\n\t            return WordArray.create(words, utf16StrLength * 2);\n\t        }\n\t    };\n\n\t    function swapEndian(word) {\n\t        return ((word << 8) & 0xff00ff00) | ((word >>> 8) & 0x00ff00ff);\n\t    }\n\t}());\n\n\n\treturn CryptoJS.enc.Utf16;\n\n}));\n\n//# sourceURL=webpack://lemon/./node_modules/crypto-js/enc-utf16.js?"
          );

          /***/
        },

      /***/ "./node_modules/crypto-js/evpkdf.js":
        /*!******************************************!*\
  !*** ./node_modules/crypto-js/evpkdf.js ***!
  \******************************************/
        /***/ function (module, exports, __webpack_require__) {
          eval(
            ';(function (root, factory, undef) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"), __webpack_require__(/*! ./sha1 */ "./node_modules/crypto-js/sha1.js"), __webpack_require__(/*! ./hmac */ "./node_modules/crypto-js/hmac.js"));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_algo = C.algo;\n\t    var MD5 = C_algo.MD5;\n\n\t    /**\n\t     * This key derivation function is meant to conform with EVP_BytesToKey.\n\t     * www.openssl.org/docs/crypto/EVP_BytesToKey.html\n\t     */\n\t    var EvpKDF = C_algo.EvpKDF = Base.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n\t         * @property {Hasher} hasher The hash algorithm to use. Default: MD5\n\t         * @property {number} iterations The number of iterations to perform. Default: 1\n\t         */\n\t        cfg: Base.extend({\n\t            keySize: 128/32,\n\t            hasher: MD5,\n\t            iterations: 1\n\t        }),\n\n\t        /**\n\t         * Initializes a newly created key derivation function.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create();\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });\n\t         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });\n\t         */\n\t        init: function (cfg) {\n\t            this.cfg = this.cfg.extend(cfg);\n\t        },\n\n\t        /**\n\t         * Derives a key from a password.\n\t         *\n\t         * @param {WordArray|string} password The password.\n\t         * @param {WordArray|string} salt A salt.\n\t         *\n\t         * @return {WordArray} The derived key.\n\t         *\n\t         * @example\n\t         *\n\t         *     var key = kdf.compute(password, salt);\n\t         */\n\t        compute: function (password, salt) {\n\t            var block;\n\n\t            // Shortcut\n\t            var cfg = this.cfg;\n\n\t            // Init hasher\n\t            var hasher = cfg.hasher.create();\n\n\t            // Initial values\n\t            var derivedKey = WordArray.create();\n\n\t            // Shortcuts\n\t            var derivedKeyWords = derivedKey.words;\n\t            var keySize = cfg.keySize;\n\t            var iterations = cfg.iterations;\n\n\t            // Generate key\n\t            while (derivedKeyWords.length < keySize) {\n\t                if (block) {\n\t                    hasher.update(block);\n\t                }\n\t                block = hasher.update(password).finalize(salt);\n\t                hasher.reset();\n\n\t                // Iterations\n\t                for (var i = 1; i < iterations; i++) {\n\t                    block = hasher.finalize(block);\n\t                    hasher.reset();\n\t                }\n\n\t                derivedKey.concat(block);\n\t            }\n\t            derivedKey.sigBytes = keySize * 4;\n\n\t            return derivedKey;\n\t        }\n\t    });\n\n\t    /**\n\t     * Derives a key from a password.\n\t     *\n\t     * @param {WordArray|string} password The password.\n\t     * @param {WordArray|string} salt A salt.\n\t     * @param {Object} cfg (Optional) The configuration options to use for this computation.\n\t     *\n\t     * @return {WordArray} The derived key.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var key = CryptoJS.EvpKDF(password, salt);\n\t     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });\n\t     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });\n\t     */\n\t    C.EvpKDF = function (password, salt, cfg) {\n\t        return EvpKDF.create(cfg).compute(password, salt);\n\t    };\n\t}());\n\n\n\treturn CryptoJS.EvpKDF;\n\n}));\n\n//# sourceURL=webpack://lemon/./node_modules/crypto-js/evpkdf.js?'
          );

          /***/
        },

      /***/ "./node_modules/crypto-js/format-hex.js":
        /*!**********************************************!*\
  !*** ./node_modules/crypto-js/format-hex.js ***!
  \**********************************************/
        /***/ function (module, exports, __webpack_require__) {
          eval(
            ';(function (root, factory, undef) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"), __webpack_require__(/*! ./cipher-core */ "./node_modules/crypto-js/cipher-core.js"));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\t(function (undefined) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var CipherParams = C_lib.CipherParams;\n\t    var C_enc = C.enc;\n\t    var Hex = C_enc.Hex;\n\t    var C_format = C.format;\n\n\t    var HexFormatter = C_format.Hex = {\n\t        /**\n\t         * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.\n\t         *\n\t         * @param {CipherParams} cipherParams The cipher params object.\n\t         *\n\t         * @return {string} The hexadecimally encoded string.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);\n\t         */\n\t        stringify: function (cipherParams) {\n\t            return cipherParams.ciphertext.toString(Hex);\n\t        },\n\n\t        /**\n\t         * Converts a hexadecimally encoded ciphertext string to a cipher params object.\n\t         *\n\t         * @param {string} input The hexadecimally encoded string.\n\t         *\n\t         * @return {CipherParams} The cipher params object.\n\t         *\n\t         * @static\n\t         *\n\t         * @example\n\t         *\n\t         *     var cipherParams = CryptoJS.format.Hex.parse(hexString);\n\t         */\n\t        parse: function (input) {\n\t            var ciphertext = Hex.parse(input);\n\t            return CipherParams.create({ ciphertext: ciphertext });\n\t        }\n\t    };\n\t}());\n\n\n\treturn CryptoJS.format.Hex;\n\n}));\n\n//# sourceURL=webpack://lemon/./node_modules/crypto-js/format-hex.js?'
          );

          /***/
        },

      /***/ "./node_modules/crypto-js/hmac.js":
        /*!****************************************!*\
  !*** ./node_modules/crypto-js/hmac.js ***!
  \****************************************/
        /***/ function (module, exports, __webpack_require__) {
          eval(
            ";(function (root, factory) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__webpack_require__(/*! ./core */ \"./node_modules/crypto-js/core.js\"));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var C_enc = C.enc;\n\t    var Utf8 = C_enc.Utf8;\n\t    var C_algo = C.algo;\n\n\t    /**\n\t     * HMAC algorithm.\n\t     */\n\t    var HMAC = C_algo.HMAC = Base.extend({\n\t        /**\n\t         * Initializes a newly created HMAC.\n\t         *\n\t         * @param {Hasher} hasher The hash algorithm to use.\n\t         * @param {WordArray|string} key The secret key.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);\n\t         */\n\t        init: function (hasher, key) {\n\t            // Init hasher\n\t            hasher = this._hasher = new hasher.init();\n\n\t            // Convert string to WordArray, else assume WordArray already\n\t            if (typeof key == 'string') {\n\t                key = Utf8.parse(key);\n\t            }\n\n\t            // Shortcuts\n\t            var hasherBlockSize = hasher.blockSize;\n\t            var hasherBlockSizeBytes = hasherBlockSize * 4;\n\n\t            // Allow arbitrary length keys\n\t            if (key.sigBytes > hasherBlockSizeBytes) {\n\t                key = hasher.finalize(key);\n\t            }\n\n\t            // Clamp excess bits\n\t            key.clamp();\n\n\t            // Clone key for inner and outer pads\n\t            var oKey = this._oKey = key.clone();\n\t            var iKey = this._iKey = key.clone();\n\n\t            // Shortcuts\n\t            var oKeyWords = oKey.words;\n\t            var iKeyWords = iKey.words;\n\n\t            // XOR keys with pad constants\n\t            for (var i = 0; i < hasherBlockSize; i++) {\n\t                oKeyWords[i] ^= 0x5c5c5c5c;\n\t                iKeyWords[i] ^= 0x36363636;\n\t            }\n\t            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;\n\n\t            // Set initial values\n\t            this.reset();\n\t        },\n\n\t        /**\n\t         * Resets this HMAC to its initial state.\n\t         *\n\t         * @example\n\t         *\n\t         *     hmacHasher.reset();\n\t         */\n\t        reset: function () {\n\t            // Shortcut\n\t            var hasher = this._hasher;\n\n\t            // Reset\n\t            hasher.reset();\n\t            hasher.update(this._iKey);\n\t        },\n\n\t        /**\n\t         * Updates this HMAC with a message.\n\t         *\n\t         * @param {WordArray|string} messageUpdate The message to append.\n\t         *\n\t         * @return {HMAC} This HMAC instance.\n\t         *\n\t         * @example\n\t         *\n\t         *     hmacHasher.update('message');\n\t         *     hmacHasher.update(wordArray);\n\t         */\n\t        update: function (messageUpdate) {\n\t            this._hasher.update(messageUpdate);\n\n\t            // Chainable\n\t            return this;\n\t        },\n\n\t        /**\n\t         * Finalizes the HMAC computation.\n\t         * Note that the finalize operation is effectively a destructive, read-once operation.\n\t         *\n\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.\n\t         *\n\t         * @return {WordArray} The HMAC.\n\t         *\n\t         * @example\n\t         *\n\t         *     var hmac = hmacHasher.finalize();\n\t         *     var hmac = hmacHasher.finalize('message');\n\t         *     var hmac = hmacHasher.finalize(wordArray);\n\t         */\n\t        finalize: function (messageUpdate) {\n\t            // Shortcut\n\t            var hasher = this._hasher;\n\n\t            // Compute HMAC\n\t            var innerHash = hasher.finalize(messageUpdate);\n\t            hasher.reset();\n\t            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));\n\n\t            return hmac;\n\t        }\n\t    });\n\t}());\n\n\n}));\n\n//# sourceURL=webpack://lemon/./node_modules/crypto-js/hmac.js?"
          );

          /***/
        },

      /***/ "./node_modules/crypto-js/index.js":
        /*!*****************************************!*\
  !*** ./node_modules/crypto-js/index.js ***!
  \*****************************************/
        /***/ function (module, exports, __webpack_require__) {
          eval(
            ';(function (root, factory, undef) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"), __webpack_require__(/*! ./x64-core */ "./node_modules/crypto-js/x64-core.js"), __webpack_require__(/*! ./lib-typedarrays */ "./node_modules/crypto-js/lib-typedarrays.js"), __webpack_require__(/*! ./enc-utf16 */ "./node_modules/crypto-js/enc-utf16.js"), __webpack_require__(/*! ./enc-base64 */ "./node_modules/crypto-js/enc-base64.js"), __webpack_require__(/*! ./enc-base64url */ "./node_modules/crypto-js/enc-base64url.js"), __webpack_require__(/*! ./md5 */ "./node_modules/crypto-js/md5.js"), __webpack_require__(/*! ./sha1 */ "./node_modules/crypto-js/sha1.js"), __webpack_require__(/*! ./sha256 */ "./node_modules/crypto-js/sha256.js"), __webpack_require__(/*! ./sha224 */ "./node_modules/crypto-js/sha224.js"), __webpack_require__(/*! ./sha512 */ "./node_modules/crypto-js/sha512.js"), __webpack_require__(/*! ./sha384 */ "./node_modules/crypto-js/sha384.js"), __webpack_require__(/*! ./sha3 */ "./node_modules/crypto-js/sha3.js"), __webpack_require__(/*! ./ripemd160 */ "./node_modules/crypto-js/ripemd160.js"), __webpack_require__(/*! ./hmac */ "./node_modules/crypto-js/hmac.js"), __webpack_require__(/*! ./pbkdf2 */ "./node_modules/crypto-js/pbkdf2.js"), __webpack_require__(/*! ./evpkdf */ "./node_modules/crypto-js/evpkdf.js"), __webpack_require__(/*! ./cipher-core */ "./node_modules/crypto-js/cipher-core.js"), __webpack_require__(/*! ./mode-cfb */ "./node_modules/crypto-js/mode-cfb.js"), __webpack_require__(/*! ./mode-ctr */ "./node_modules/crypto-js/mode-ctr.js"), __webpack_require__(/*! ./mode-ctr-gladman */ "./node_modules/crypto-js/mode-ctr-gladman.js"), __webpack_require__(/*! ./mode-ofb */ "./node_modules/crypto-js/mode-ofb.js"), __webpack_require__(/*! ./mode-ecb */ "./node_modules/crypto-js/mode-ecb.js"), __webpack_require__(/*! ./pad-ansix923 */ "./node_modules/crypto-js/pad-ansix923.js"), __webpack_require__(/*! ./pad-iso10126 */ "./node_modules/crypto-js/pad-iso10126.js"), __webpack_require__(/*! ./pad-iso97971 */ "./node_modules/crypto-js/pad-iso97971.js"), __webpack_require__(/*! ./pad-zeropadding */ "./node_modules/crypto-js/pad-zeropadding.js"), __webpack_require__(/*! ./pad-nopadding */ "./node_modules/crypto-js/pad-nopadding.js"), __webpack_require__(/*! ./format-hex */ "./node_modules/crypto-js/format-hex.js"), __webpack_require__(/*! ./aes */ "./node_modules/crypto-js/aes.js"), __webpack_require__(/*! ./tripledes */ "./node_modules/crypto-js/tripledes.js"), __webpack_require__(/*! ./rc4 */ "./node_modules/crypto-js/rc4.js"), __webpack_require__(/*! ./rabbit */ "./node_modules/crypto-js/rabbit.js"), __webpack_require__(/*! ./rabbit-legacy */ "./node_modules/crypto-js/rabbit-legacy.js"));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\treturn CryptoJS;\n\n}));\n\n//# sourceURL=webpack://lemon/./node_modules/crypto-js/index.js?'
          );

          /***/
        },

      /***/ "./node_modules/crypto-js/lib-typedarrays.js":
        /*!***************************************************!*\
  !*** ./node_modules/crypto-js/lib-typedarrays.js ***!
  \***************************************************/
        /***/ function (module, exports, __webpack_require__) {
          eval(
            ';(function (root, factory) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Check if typed arrays are supported\n\t    if (typeof ArrayBuffer != \'function\') {\n\t        return;\n\t    }\n\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\n\t    // Reference original init\n\t    var superInit = WordArray.init;\n\n\t    // Augment WordArray.init to handle typed arrays\n\t    var subInit = WordArray.init = function (typedArray) {\n\t        // Convert buffers to uint8\n\t        if (typedArray instanceof ArrayBuffer) {\n\t            typedArray = new Uint8Array(typedArray);\n\t        }\n\n\t        // Convert other array views to uint8\n\t        if (\n\t            typedArray instanceof Int8Array ||\n\t            (typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray) ||\n\t            typedArray instanceof Int16Array ||\n\t            typedArray instanceof Uint16Array ||\n\t            typedArray instanceof Int32Array ||\n\t            typedArray instanceof Uint32Array ||\n\t            typedArray instanceof Float32Array ||\n\t            typedArray instanceof Float64Array\n\t        ) {\n\t            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);\n\t        }\n\n\t        // Handle Uint8Array\n\t        if (typedArray instanceof Uint8Array) {\n\t            // Shortcut\n\t            var typedArrayByteLength = typedArray.byteLength;\n\n\t            // Extract bytes\n\t            var words = [];\n\t            for (var i = 0; i < typedArrayByteLength; i++) {\n\t                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);\n\t            }\n\n\t            // Initialize this word array\n\t            superInit.call(this, words, typedArrayByteLength);\n\t        } else {\n\t            // Else call normal init\n\t            superInit.apply(this, arguments);\n\t        }\n\t    };\n\n\t    subInit.prototype = WordArray;\n\t}());\n\n\n\treturn CryptoJS.lib.WordArray;\n\n}));\n\n//# sourceURL=webpack://lemon/./node_modules/crypto-js/lib-typedarrays.js?'
          );

          /***/
        },

      /***/ "./node_modules/crypto-js/md5.js":
        /*!***************************************!*\
  !*** ./node_modules/crypto-js/md5.js ***!
  \***************************************/
        /***/ function (module, exports, __webpack_require__) {
          eval(
            ";(function (root, factory) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__webpack_require__(/*! ./core */ \"./node_modules/crypto-js/core.js\"));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\t(function (Math) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_algo = C.algo;\n\n\t    // Constants table\n\t    var T = [];\n\n\t    // Compute constants\n\t    (function () {\n\t        for (var i = 0; i < 64; i++) {\n\t            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;\n\t        }\n\t    }());\n\n\t    /**\n\t     * MD5 hash algorithm.\n\t     */\n\t    var MD5 = C_algo.MD5 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash = new WordArray.init([\n\t                0x67452301, 0xefcdab89,\n\t                0x98badcfe, 0x10325476\n\t            ]);\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Swap endian\n\t            for (var i = 0; i < 16; i++) {\n\t                // Shortcuts\n\t                var offset_i = offset + i;\n\t                var M_offset_i = M[offset_i];\n\n\t                M[offset_i] = (\n\t                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |\n\t                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)\n\t                );\n\t            }\n\n\t            // Shortcuts\n\t            var H = this._hash.words;\n\n\t            var M_offset_0  = M[offset + 0];\n\t            var M_offset_1  = M[offset + 1];\n\t            var M_offset_2  = M[offset + 2];\n\t            var M_offset_3  = M[offset + 3];\n\t            var M_offset_4  = M[offset + 4];\n\t            var M_offset_5  = M[offset + 5];\n\t            var M_offset_6  = M[offset + 6];\n\t            var M_offset_7  = M[offset + 7];\n\t            var M_offset_8  = M[offset + 8];\n\t            var M_offset_9  = M[offset + 9];\n\t            var M_offset_10 = M[offset + 10];\n\t            var M_offset_11 = M[offset + 11];\n\t            var M_offset_12 = M[offset + 12];\n\t            var M_offset_13 = M[offset + 13];\n\t            var M_offset_14 = M[offset + 14];\n\t            var M_offset_15 = M[offset + 15];\n\n\t            // Working varialbes\n\t            var a = H[0];\n\t            var b = H[1];\n\t            var c = H[2];\n\t            var d = H[3];\n\n\t            // Computation\n\t            a = FF(a, b, c, d, M_offset_0,  7,  T[0]);\n\t            d = FF(d, a, b, c, M_offset_1,  12, T[1]);\n\t            c = FF(c, d, a, b, M_offset_2,  17, T[2]);\n\t            b = FF(b, c, d, a, M_offset_3,  22, T[3]);\n\t            a = FF(a, b, c, d, M_offset_4,  7,  T[4]);\n\t            d = FF(d, a, b, c, M_offset_5,  12, T[5]);\n\t            c = FF(c, d, a, b, M_offset_6,  17, T[6]);\n\t            b = FF(b, c, d, a, M_offset_7,  22, T[7]);\n\t            a = FF(a, b, c, d, M_offset_8,  7,  T[8]);\n\t            d = FF(d, a, b, c, M_offset_9,  12, T[9]);\n\t            c = FF(c, d, a, b, M_offset_10, 17, T[10]);\n\t            b = FF(b, c, d, a, M_offset_11, 22, T[11]);\n\t            a = FF(a, b, c, d, M_offset_12, 7,  T[12]);\n\t            d = FF(d, a, b, c, M_offset_13, 12, T[13]);\n\t            c = FF(c, d, a, b, M_offset_14, 17, T[14]);\n\t            b = FF(b, c, d, a, M_offset_15, 22, T[15]);\n\n\t            a = GG(a, b, c, d, M_offset_1,  5,  T[16]);\n\t            d = GG(d, a, b, c, M_offset_6,  9,  T[17]);\n\t            c = GG(c, d, a, b, M_offset_11, 14, T[18]);\n\t            b = GG(b, c, d, a, M_offset_0,  20, T[19]);\n\t            a = GG(a, b, c, d, M_offset_5,  5,  T[20]);\n\t            d = GG(d, a, b, c, M_offset_10, 9,  T[21]);\n\t            c = GG(c, d, a, b, M_offset_15, 14, T[22]);\n\t            b = GG(b, c, d, a, M_offset_4,  20, T[23]);\n\t            a = GG(a, b, c, d, M_offset_9,  5,  T[24]);\n\t            d = GG(d, a, b, c, M_offset_14, 9,  T[25]);\n\t            c = GG(c, d, a, b, M_offset_3,  14, T[26]);\n\t            b = GG(b, c, d, a, M_offset_8,  20, T[27]);\n\t            a = GG(a, b, c, d, M_offset_13, 5,  T[28]);\n\t            d = GG(d, a, b, c, M_offset_2,  9,  T[29]);\n\t            c = GG(c, d, a, b, M_offset_7,  14, T[30]);\n\t            b = GG(b, c, d, a, M_offset_12, 20, T[31]);\n\n\t            a = HH(a, b, c, d, M_offset_5,  4,  T[32]);\n\t            d = HH(d, a, b, c, M_offset_8,  11, T[33]);\n\t            c = HH(c, d, a, b, M_offset_11, 16, T[34]);\n\t            b = HH(b, c, d, a, M_offset_14, 23, T[35]);\n\t            a = HH(a, b, c, d, M_offset_1,  4,  T[36]);\n\t            d = HH(d, a, b, c, M_offset_4,  11, T[37]);\n\t            c = HH(c, d, a, b, M_offset_7,  16, T[38]);\n\t            b = HH(b, c, d, a, M_offset_10, 23, T[39]);\n\t            a = HH(a, b, c, d, M_offset_13, 4,  T[40]);\n\t            d = HH(d, a, b, c, M_offset_0,  11, T[41]);\n\t            c = HH(c, d, a, b, M_offset_3,  16, T[42]);\n\t            b = HH(b, c, d, a, M_offset_6,  23, T[43]);\n\t            a = HH(a, b, c, d, M_offset_9,  4,  T[44]);\n\t            d = HH(d, a, b, c, M_offset_12, 11, T[45]);\n\t            c = HH(c, d, a, b, M_offset_15, 16, T[46]);\n\t            b = HH(b, c, d, a, M_offset_2,  23, T[47]);\n\n\t            a = II(a, b, c, d, M_offset_0,  6,  T[48]);\n\t            d = II(d, a, b, c, M_offset_7,  10, T[49]);\n\t            c = II(c, d, a, b, M_offset_14, 15, T[50]);\n\t            b = II(b, c, d, a, M_offset_5,  21, T[51]);\n\t            a = II(a, b, c, d, M_offset_12, 6,  T[52]);\n\t            d = II(d, a, b, c, M_offset_3,  10, T[53]);\n\t            c = II(c, d, a, b, M_offset_10, 15, T[54]);\n\t            b = II(b, c, d, a, M_offset_1,  21, T[55]);\n\t            a = II(a, b, c, d, M_offset_8,  6,  T[56]);\n\t            d = II(d, a, b, c, M_offset_15, 10, T[57]);\n\t            c = II(c, d, a, b, M_offset_6,  15, T[58]);\n\t            b = II(b, c, d, a, M_offset_13, 21, T[59]);\n\t            a = II(a, b, c, d, M_offset_4,  6,  T[60]);\n\t            d = II(d, a, b, c, M_offset_11, 10, T[61]);\n\t            c = II(c, d, a, b, M_offset_2,  15, T[62]);\n\t            b = II(b, c, d, a, M_offset_9,  21, T[63]);\n\n\t            // Intermediate hash value\n\t            H[0] = (H[0] + a) | 0;\n\t            H[1] = (H[1] + b) | 0;\n\t            H[2] = (H[2] + c) | 0;\n\t            H[3] = (H[3] + d) | 0;\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\n\t            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);\n\t            var nBitsTotalL = nBitsTotal;\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (\n\t                (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |\n\t                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)\n\t            );\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (\n\t                (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |\n\t                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)\n\t            );\n\n\t            data.sigBytes = (dataWords.length + 1) * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Shortcuts\n\t            var hash = this._hash;\n\t            var H = hash.words;\n\n\t            // Swap endian\n\t            for (var i = 0; i < 4; i++) {\n\t                // Shortcut\n\t                var H_i = H[i];\n\n\t                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |\n\t                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);\n\t            }\n\n\t            // Return final computed hash\n\t            return hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        }\n\t    });\n\n\t    function FF(a, b, c, d, x, s, t) {\n\t        var n = a + ((b & c) | (~b & d)) + x + t;\n\t        return ((n << s) | (n >>> (32 - s))) + b;\n\t    }\n\n\t    function GG(a, b, c, d, x, s, t) {\n\t        var n = a + ((b & d) | (c & ~d)) + x + t;\n\t        return ((n << s) | (n >>> (32 - s))) + b;\n\t    }\n\n\t    function HH(a, b, c, d, x, s, t) {\n\t        var n = a + (b ^ c ^ d) + x + t;\n\t        return ((n << s) | (n >>> (32 - s))) + b;\n\t    }\n\n\t    function II(a, b, c, d, x, s, t) {\n\t        var n = a + (c ^ (b | ~d)) + x + t;\n\t        return ((n << s) | (n >>> (32 - s))) + b;\n\t    }\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.MD5('message');\n\t     *     var hash = CryptoJS.MD5(wordArray);\n\t     */\n\t    C.MD5 = Hasher._createHelper(MD5);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacMD5(message, key);\n\t     */\n\t    C.HmacMD5 = Hasher._createHmacHelper(MD5);\n\t}(Math));\n\n\n\treturn CryptoJS.MD5;\n\n}));\n\n//# sourceURL=webpack://lemon/./node_modules/crypto-js/md5.js?"
          );

          /***/
        },

      /***/ "./node_modules/crypto-js/mode-cfb.js":
        /*!********************************************!*\
  !*** ./node_modules/crypto-js/mode-cfb.js ***!
  \********************************************/
        /***/ function (module, exports, __webpack_require__) {
          eval(
            ';(function (root, factory, undef) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"), __webpack_require__(/*! ./cipher-core */ "./node_modules/crypto-js/cipher-core.js"));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Cipher Feedback block mode.\n\t */\n\tCryptoJS.mode.CFB = (function () {\n\t    var CFB = CryptoJS.lib.BlockCipherMode.extend();\n\n\t    CFB.Encryptor = CFB.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher;\n\t            var blockSize = cipher.blockSize;\n\n\t            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);\n\n\t            // Remember this block to use with next block\n\t            this._prevBlock = words.slice(offset, offset + blockSize);\n\t        }\n\t    });\n\n\t    CFB.Decryptor = CFB.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher;\n\t            var blockSize = cipher.blockSize;\n\n\t            // Remember this block to use with next block\n\t            var thisBlock = words.slice(offset, offset + blockSize);\n\n\t            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);\n\n\t            // This block becomes the previous block\n\t            this._prevBlock = thisBlock;\n\t        }\n\t    });\n\n\t    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {\n\t        var keystream;\n\n\t        // Shortcut\n\t        var iv = this._iv;\n\n\t        // Generate keystream\n\t        if (iv) {\n\t            keystream = iv.slice(0);\n\n\t            // Remove IV for subsequent blocks\n\t            this._iv = undefined;\n\t        } else {\n\t            keystream = this._prevBlock;\n\t        }\n\t        cipher.encryptBlock(keystream, 0);\n\n\t        // Encrypt\n\t        for (var i = 0; i < blockSize; i++) {\n\t            words[offset + i] ^= keystream[i];\n\t        }\n\t    }\n\n\t    return CFB;\n\t}());\n\n\n\treturn CryptoJS.mode.CFB;\n\n}));\n\n//# sourceURL=webpack://lemon/./node_modules/crypto-js/mode-cfb.js?'
          );

          /***/
        },

      /***/ "./node_modules/crypto-js/mode-ctr-gladman.js":
        /*!****************************************************!*\
  !*** ./node_modules/crypto-js/mode-ctr-gladman.js ***!
  \****************************************************/
        /***/ function (module, exports, __webpack_require__) {
          eval(
            ';(function (root, factory, undef) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"), __webpack_require__(/*! ./cipher-core */ "./node_modules/crypto-js/cipher-core.js"));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\t/** @preserve\n\t * Counter block mode compatible with  Dr Brian Gladman fileenc.c\n\t * derived from CryptoJS.mode.CTR\n\t * Jan Hruby jhruby.web@gmail.com\n\t */\n\tCryptoJS.mode.CTRGladman = (function () {\n\t    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();\n\n\t\tfunction incWord(word)\n\t\t{\n\t\t\tif (((word >> 24) & 0xff) === 0xff) { //overflow\n\t\t\tvar b1 = (word >> 16)&0xff;\n\t\t\tvar b2 = (word >> 8)&0xff;\n\t\t\tvar b3 = word & 0xff;\n\n\t\t\tif (b1 === 0xff) // overflow b1\n\t\t\t{\n\t\t\tb1 = 0;\n\t\t\tif (b2 === 0xff)\n\t\t\t{\n\t\t\t\tb2 = 0;\n\t\t\t\tif (b3 === 0xff)\n\t\t\t\t{\n\t\t\t\t\tb3 = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t++b3;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t++b2;\n\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t++b1;\n\t\t\t}\n\n\t\t\tword = 0;\n\t\t\tword += (b1 << 16);\n\t\t\tword += (b2 << 8);\n\t\t\tword += b3;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\tword += (0x01 << 24);\n\t\t\t}\n\t\t\treturn word;\n\t\t}\n\n\t\tfunction incCounter(counter)\n\t\t{\n\t\t\tif ((counter[0] = incWord(counter[0])) === 0)\n\t\t\t{\n\t\t\t\t// encr_data in fileenc.c from  Dr Brian Gladman\'s counts only with DWORD j < 8\n\t\t\t\tcounter[1] = incWord(counter[1]);\n\t\t\t}\n\t\t\treturn counter;\n\t\t}\n\n\t    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher\n\t            var blockSize = cipher.blockSize;\n\t            var iv = this._iv;\n\t            var counter = this._counter;\n\n\t            // Generate keystream\n\t            if (iv) {\n\t                counter = this._counter = iv.slice(0);\n\n\t                // Remove IV for subsequent blocks\n\t                this._iv = undefined;\n\t            }\n\n\t\t\t\tincCounter(counter);\n\n\t\t\t\tvar keystream = counter.slice(0);\n\t            cipher.encryptBlock(keystream, 0);\n\n\t            // Encrypt\n\t            for (var i = 0; i < blockSize; i++) {\n\t                words[offset + i] ^= keystream[i];\n\t            }\n\t        }\n\t    });\n\n\t    CTRGladman.Decryptor = Encryptor;\n\n\t    return CTRGladman;\n\t}());\n\n\n\n\n\treturn CryptoJS.mode.CTRGladman;\n\n}));\n\n//# sourceURL=webpack://lemon/./node_modules/crypto-js/mode-ctr-gladman.js?'
          );

          /***/
        },

      /***/ "./node_modules/crypto-js/mode-ctr.js":
        /*!********************************************!*\
  !*** ./node_modules/crypto-js/mode-ctr.js ***!
  \********************************************/
        /***/ function (module, exports, __webpack_require__) {
          eval(
            ';(function (root, factory, undef) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"), __webpack_require__(/*! ./cipher-core */ "./node_modules/crypto-js/cipher-core.js"));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Counter block mode.\n\t */\n\tCryptoJS.mode.CTR = (function () {\n\t    var CTR = CryptoJS.lib.BlockCipherMode.extend();\n\n\t    var Encryptor = CTR.Encryptor = CTR.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher\n\t            var blockSize = cipher.blockSize;\n\t            var iv = this._iv;\n\t            var counter = this._counter;\n\n\t            // Generate keystream\n\t            if (iv) {\n\t                counter = this._counter = iv.slice(0);\n\n\t                // Remove IV for subsequent blocks\n\t                this._iv = undefined;\n\t            }\n\t            var keystream = counter.slice(0);\n\t            cipher.encryptBlock(keystream, 0);\n\n\t            // Increment counter\n\t            counter[blockSize - 1] = (counter[blockSize - 1] + 1) | 0\n\n\t            // Encrypt\n\t            for (var i = 0; i < blockSize; i++) {\n\t                words[offset + i] ^= keystream[i];\n\t            }\n\t        }\n\t    });\n\n\t    CTR.Decryptor = Encryptor;\n\n\t    return CTR;\n\t}());\n\n\n\treturn CryptoJS.mode.CTR;\n\n}));\n\n//# sourceURL=webpack://lemon/./node_modules/crypto-js/mode-ctr.js?'
          );

          /***/
        },

      /***/ "./node_modules/crypto-js/mode-ecb.js":
        /*!********************************************!*\
  !*** ./node_modules/crypto-js/mode-ecb.js ***!
  \********************************************/
        /***/ function (module, exports, __webpack_require__) {
          eval(
            ';(function (root, factory, undef) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"), __webpack_require__(/*! ./cipher-core */ "./node_modules/crypto-js/cipher-core.js"));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Electronic Codebook block mode.\n\t */\n\tCryptoJS.mode.ECB = (function () {\n\t    var ECB = CryptoJS.lib.BlockCipherMode.extend();\n\n\t    ECB.Encryptor = ECB.extend({\n\t        processBlock: function (words, offset) {\n\t            this._cipher.encryptBlock(words, offset);\n\t        }\n\t    });\n\n\t    ECB.Decryptor = ECB.extend({\n\t        processBlock: function (words, offset) {\n\t            this._cipher.decryptBlock(words, offset);\n\t        }\n\t    });\n\n\t    return ECB;\n\t}());\n\n\n\treturn CryptoJS.mode.ECB;\n\n}));\n\n//# sourceURL=webpack://lemon/./node_modules/crypto-js/mode-ecb.js?'
          );

          /***/
        },

      /***/ "./node_modules/crypto-js/mode-ofb.js":
        /*!********************************************!*\
  !*** ./node_modules/crypto-js/mode-ofb.js ***!
  \********************************************/
        /***/ function (module, exports, __webpack_require__) {
          eval(
            ';(function (root, factory, undef) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"), __webpack_require__(/*! ./cipher-core */ "./node_modules/crypto-js/cipher-core.js"));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Output Feedback block mode.\n\t */\n\tCryptoJS.mode.OFB = (function () {\n\t    var OFB = CryptoJS.lib.BlockCipherMode.extend();\n\n\t    var Encryptor = OFB.Encryptor = OFB.extend({\n\t        processBlock: function (words, offset) {\n\t            // Shortcuts\n\t            var cipher = this._cipher\n\t            var blockSize = cipher.blockSize;\n\t            var iv = this._iv;\n\t            var keystream = this._keystream;\n\n\t            // Generate keystream\n\t            if (iv) {\n\t                keystream = this._keystream = iv.slice(0);\n\n\t                // Remove IV for subsequent blocks\n\t                this._iv = undefined;\n\t            }\n\t            cipher.encryptBlock(keystream, 0);\n\n\t            // Encrypt\n\t            for (var i = 0; i < blockSize; i++) {\n\t                words[offset + i] ^= keystream[i];\n\t            }\n\t        }\n\t    });\n\n\t    OFB.Decryptor = Encryptor;\n\n\t    return OFB;\n\t}());\n\n\n\treturn CryptoJS.mode.OFB;\n\n}));\n\n//# sourceURL=webpack://lemon/./node_modules/crypto-js/mode-ofb.js?'
          );

          /***/
        },

      /***/ "./node_modules/crypto-js/pad-ansix923.js":
        /*!************************************************!*\
  !*** ./node_modules/crypto-js/pad-ansix923.js ***!
  \************************************************/
        /***/ function (module, exports, __webpack_require__) {
          eval(
            ';(function (root, factory, undef) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"), __webpack_require__(/*! ./cipher-core */ "./node_modules/crypto-js/cipher-core.js"));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * ANSI X.923 padding strategy.\n\t */\n\tCryptoJS.pad.AnsiX923 = {\n\t    pad: function (data, blockSize) {\n\t        // Shortcuts\n\t        var dataSigBytes = data.sigBytes;\n\t        var blockSizeBytes = blockSize * 4;\n\n\t        // Count padding bytes\n\t        var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;\n\n\t        // Compute last byte position\n\t        var lastBytePos = dataSigBytes + nPaddingBytes - 1;\n\n\t        // Pad\n\t        data.clamp();\n\t        data.words[lastBytePos >>> 2] |= nPaddingBytes << (24 - (lastBytePos % 4) * 8);\n\t        data.sigBytes += nPaddingBytes;\n\t    },\n\n\t    unpad: function (data) {\n\t        // Get number of padding bytes from last byte\n\t        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;\n\n\t        // Remove padding\n\t        data.sigBytes -= nPaddingBytes;\n\t    }\n\t};\n\n\n\treturn CryptoJS.pad.Ansix923;\n\n}));\n\n//# sourceURL=webpack://lemon/./node_modules/crypto-js/pad-ansix923.js?'
          );

          /***/
        },

      /***/ "./node_modules/crypto-js/pad-iso10126.js":
        /*!************************************************!*\
  !*** ./node_modules/crypto-js/pad-iso10126.js ***!
  \************************************************/
        /***/ function (module, exports, __webpack_require__) {
          eval(
            ';(function (root, factory, undef) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"), __webpack_require__(/*! ./cipher-core */ "./node_modules/crypto-js/cipher-core.js"));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * ISO 10126 padding strategy.\n\t */\n\tCryptoJS.pad.Iso10126 = {\n\t    pad: function (data, blockSize) {\n\t        // Shortcut\n\t        var blockSizeBytes = blockSize * 4;\n\n\t        // Count padding bytes\n\t        var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;\n\n\t        // Pad\n\t        data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).\n\t             concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));\n\t    },\n\n\t    unpad: function (data) {\n\t        // Get number of padding bytes from last byte\n\t        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;\n\n\t        // Remove padding\n\t        data.sigBytes -= nPaddingBytes;\n\t    }\n\t};\n\n\n\treturn CryptoJS.pad.Iso10126;\n\n}));\n\n//# sourceURL=webpack://lemon/./node_modules/crypto-js/pad-iso10126.js?'
          );

          /***/
        },

      /***/ "./node_modules/crypto-js/pad-iso97971.js":
        /*!************************************************!*\
  !*** ./node_modules/crypto-js/pad-iso97971.js ***!
  \************************************************/
        /***/ function (module, exports, __webpack_require__) {
          eval(
            ';(function (root, factory, undef) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"), __webpack_require__(/*! ./cipher-core */ "./node_modules/crypto-js/cipher-core.js"));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * ISO/IEC 9797-1 Padding Method 2.\n\t */\n\tCryptoJS.pad.Iso97971 = {\n\t    pad: function (data, blockSize) {\n\t        // Add 0x80 byte\n\t        data.concat(CryptoJS.lib.WordArray.create([0x80000000], 1));\n\n\t        // Zero pad the rest\n\t        CryptoJS.pad.ZeroPadding.pad(data, blockSize);\n\t    },\n\n\t    unpad: function (data) {\n\t        // Remove zero padding\n\t        CryptoJS.pad.ZeroPadding.unpad(data);\n\n\t        // Remove one more byte -- the 0x80 byte\n\t        data.sigBytes--;\n\t    }\n\t};\n\n\n\treturn CryptoJS.pad.Iso97971;\n\n}));\n\n//# sourceURL=webpack://lemon/./node_modules/crypto-js/pad-iso97971.js?'
          );

          /***/
        },

      /***/ "./node_modules/crypto-js/pad-nopadding.js":
        /*!*************************************************!*\
  !*** ./node_modules/crypto-js/pad-nopadding.js ***!
  \*************************************************/
        /***/ function (module, exports, __webpack_require__) {
          eval(
            ';(function (root, factory, undef) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"), __webpack_require__(/*! ./cipher-core */ "./node_modules/crypto-js/cipher-core.js"));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * A noop padding strategy.\n\t */\n\tCryptoJS.pad.NoPadding = {\n\t    pad: function () {\n\t    },\n\n\t    unpad: function () {\n\t    }\n\t};\n\n\n\treturn CryptoJS.pad.NoPadding;\n\n}));\n\n//# sourceURL=webpack://lemon/./node_modules/crypto-js/pad-nopadding.js?'
          );

          /***/
        },

      /***/ "./node_modules/crypto-js/pad-zeropadding.js":
        /*!***************************************************!*\
  !*** ./node_modules/crypto-js/pad-zeropadding.js ***!
  \***************************************************/
        /***/ function (module, exports, __webpack_require__) {
          eval(
            ';(function (root, factory, undef) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"), __webpack_require__(/*! ./cipher-core */ "./node_modules/crypto-js/cipher-core.js"));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\t/**\n\t * Zero padding strategy.\n\t */\n\tCryptoJS.pad.ZeroPadding = {\n\t    pad: function (data, blockSize) {\n\t        // Shortcut\n\t        var blockSizeBytes = blockSize * 4;\n\n\t        // Pad\n\t        data.clamp();\n\t        data.sigBytes += blockSizeBytes - ((data.sigBytes % blockSizeBytes) || blockSizeBytes);\n\t    },\n\n\t    unpad: function (data) {\n\t        // Shortcut\n\t        var dataWords = data.words;\n\n\t        // Unpad\n\t        var i = data.sigBytes - 1;\n\t        for (var i = data.sigBytes - 1; i >= 0; i--) {\n\t            if (((dataWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff)) {\n\t                data.sigBytes = i + 1;\n\t                break;\n\t            }\n\t        }\n\t    }\n\t};\n\n\n\treturn CryptoJS.pad.ZeroPadding;\n\n}));\n\n//# sourceURL=webpack://lemon/./node_modules/crypto-js/pad-zeropadding.js?'
          );

          /***/
        },

      /***/ "./node_modules/crypto-js/pbkdf2.js":
        /*!******************************************!*\
  !*** ./node_modules/crypto-js/pbkdf2.js ***!
  \******************************************/
        /***/ function (module, exports, __webpack_require__) {
          eval(
            ';(function (root, factory, undef) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"), __webpack_require__(/*! ./sha1 */ "./node_modules/crypto-js/sha1.js"), __webpack_require__(/*! ./hmac */ "./node_modules/crypto-js/hmac.js"));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_algo = C.algo;\n\t    var SHA1 = C_algo.SHA1;\n\t    var HMAC = C_algo.HMAC;\n\n\t    /**\n\t     * Password-Based Key Derivation Function 2 algorithm.\n\t     */\n\t    var PBKDF2 = C_algo.PBKDF2 = Base.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)\n\t         * @property {Hasher} hasher The hasher to use. Default: SHA1\n\t         * @property {number} iterations The number of iterations to perform. Default: 1\n\t         */\n\t        cfg: Base.extend({\n\t            keySize: 128/32,\n\t            hasher: SHA1,\n\t            iterations: 1\n\t        }),\n\n\t        /**\n\t         * Initializes a newly created key derivation function.\n\t         *\n\t         * @param {Object} cfg (Optional) The configuration options to use for the derivation.\n\t         *\n\t         * @example\n\t         *\n\t         *     var kdf = CryptoJS.algo.PBKDF2.create();\n\t         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });\n\t         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });\n\t         */\n\t        init: function (cfg) {\n\t            this.cfg = this.cfg.extend(cfg);\n\t        },\n\n\t        /**\n\t         * Computes the Password-Based Key Derivation Function 2.\n\t         *\n\t         * @param {WordArray|string} password The password.\n\t         * @param {WordArray|string} salt A salt.\n\t         *\n\t         * @return {WordArray} The derived key.\n\t         *\n\t         * @example\n\t         *\n\t         *     var key = kdf.compute(password, salt);\n\t         */\n\t        compute: function (password, salt) {\n\t            // Shortcut\n\t            var cfg = this.cfg;\n\n\t            // Init HMAC\n\t            var hmac = HMAC.create(cfg.hasher, password);\n\n\t            // Initial values\n\t            var derivedKey = WordArray.create();\n\t            var blockIndex = WordArray.create([0x00000001]);\n\n\t            // Shortcuts\n\t            var derivedKeyWords = derivedKey.words;\n\t            var blockIndexWords = blockIndex.words;\n\t            var keySize = cfg.keySize;\n\t            var iterations = cfg.iterations;\n\n\t            // Generate key\n\t            while (derivedKeyWords.length < keySize) {\n\t                var block = hmac.update(salt).finalize(blockIndex);\n\t                hmac.reset();\n\n\t                // Shortcuts\n\t                var blockWords = block.words;\n\t                var blockWordsLength = blockWords.length;\n\n\t                // Iterations\n\t                var intermediate = block;\n\t                for (var i = 1; i < iterations; i++) {\n\t                    intermediate = hmac.finalize(intermediate);\n\t                    hmac.reset();\n\n\t                    // Shortcut\n\t                    var intermediateWords = intermediate.words;\n\n\t                    // XOR intermediate with block\n\t                    for (var j = 0; j < blockWordsLength; j++) {\n\t                        blockWords[j] ^= intermediateWords[j];\n\t                    }\n\t                }\n\n\t                derivedKey.concat(block);\n\t                blockIndexWords[0]++;\n\t            }\n\t            derivedKey.sigBytes = keySize * 4;\n\n\t            return derivedKey;\n\t        }\n\t    });\n\n\t    /**\n\t     * Computes the Password-Based Key Derivation Function 2.\n\t     *\n\t     * @param {WordArray|string} password The password.\n\t     * @param {WordArray|string} salt A salt.\n\t     * @param {Object} cfg (Optional) The configuration options to use for this computation.\n\t     *\n\t     * @return {WordArray} The derived key.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var key = CryptoJS.PBKDF2(password, salt);\n\t     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });\n\t     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });\n\t     */\n\t    C.PBKDF2 = function (password, salt, cfg) {\n\t        return PBKDF2.create(cfg).compute(password, salt);\n\t    };\n\t}());\n\n\n\treturn CryptoJS.PBKDF2;\n\n}));\n\n//# sourceURL=webpack://lemon/./node_modules/crypto-js/pbkdf2.js?'
          );

          /***/
        },

      /***/ "./node_modules/crypto-js/rabbit-legacy.js":
        /*!*************************************************!*\
  !*** ./node_modules/crypto-js/rabbit-legacy.js ***!
  \*************************************************/
        /***/ function (module, exports, __webpack_require__) {
          eval(
            ';(function (root, factory, undef) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"), __webpack_require__(/*! ./enc-base64 */ "./node_modules/crypto-js/enc-base64.js"), __webpack_require__(/*! ./md5 */ "./node_modules/crypto-js/md5.js"), __webpack_require__(/*! ./evpkdf */ "./node_modules/crypto-js/evpkdf.js"), __webpack_require__(/*! ./cipher-core */ "./node_modules/crypto-js/cipher-core.js"));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var StreamCipher = C_lib.StreamCipher;\n\t    var C_algo = C.algo;\n\n\t    // Reusable objects\n\t    var S  = [];\n\t    var C_ = [];\n\t    var G  = [];\n\n\t    /**\n\t     * Rabbit stream cipher algorithm.\n\t     *\n\t     * This is a legacy version that neglected to convert the key to little-endian.\n\t     * This error doesn\'t affect the cipher\'s security,\n\t     * but it does affect its compatibility with other implementations.\n\t     */\n\t    var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({\n\t        _doReset: function () {\n\t            // Shortcuts\n\t            var K = this._key.words;\n\t            var iv = this.cfg.iv;\n\n\t            // Generate initial state values\n\t            var X = this._X = [\n\t                K[0], (K[3] << 16) | (K[2] >>> 16),\n\t                K[1], (K[0] << 16) | (K[3] >>> 16),\n\t                K[2], (K[1] << 16) | (K[0] >>> 16),\n\t                K[3], (K[2] << 16) | (K[1] >>> 16)\n\t            ];\n\n\t            // Generate initial counter values\n\t            var C = this._C = [\n\t                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),\n\t                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),\n\t                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),\n\t                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)\n\t            ];\n\n\t            // Carry bit\n\t            this._b = 0;\n\n\t            // Iterate the system four times\n\t            for (var i = 0; i < 4; i++) {\n\t                nextState.call(this);\n\t            }\n\n\t            // Modify the counters\n\t            for (var i = 0; i < 8; i++) {\n\t                C[i] ^= X[(i + 4) & 7];\n\t            }\n\n\t            // IV setup\n\t            if (iv) {\n\t                // Shortcuts\n\t                var IV = iv.words;\n\t                var IV_0 = IV[0];\n\t                var IV_1 = IV[1];\n\n\t                // Generate four subvectors\n\t                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);\n\t                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);\n\t                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);\n\t                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);\n\n\t                // Modify counter values\n\t                C[0] ^= i0;\n\t                C[1] ^= i1;\n\t                C[2] ^= i2;\n\t                C[3] ^= i3;\n\t                C[4] ^= i0;\n\t                C[5] ^= i1;\n\t                C[6] ^= i2;\n\t                C[7] ^= i3;\n\n\t                // Iterate the system four times\n\t                for (var i = 0; i < 4; i++) {\n\t                    nextState.call(this);\n\t                }\n\t            }\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcut\n\t            var X = this._X;\n\n\t            // Iterate the system\n\t            nextState.call(this);\n\n\t            // Generate four keystream words\n\t            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);\n\t            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);\n\t            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);\n\t            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);\n\n\t            for (var i = 0; i < 4; i++) {\n\t                // Swap endian\n\t                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |\n\t                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);\n\n\t                // Encrypt\n\t                M[offset + i] ^= S[i];\n\t            }\n\t        },\n\n\t        blockSize: 128/32,\n\n\t        ivSize: 64/32\n\t    });\n\n\t    function nextState() {\n\t        // Shortcuts\n\t        var X = this._X;\n\t        var C = this._C;\n\n\t        // Save old counter values\n\t        for (var i = 0; i < 8; i++) {\n\t            C_[i] = C[i];\n\t        }\n\n\t        // Calculate new counter values\n\t        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;\n\t        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;\n\t        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;\n\t        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;\n\t        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;\n\t        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;\n\t        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;\n\t        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;\n\t        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;\n\n\t        // Calculate the g-values\n\t        for (var i = 0; i < 8; i++) {\n\t            var gx = X[i] + C[i];\n\n\t            // Construct high and low argument for squaring\n\t            var ga = gx & 0xffff;\n\t            var gb = gx >>> 16;\n\n\t            // Calculate high and low result of squaring\n\t            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;\n\t            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);\n\n\t            // High XOR low\n\t            G[i] = gh ^ gl;\n\t        }\n\n\t        // Calculate new state values\n\t        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;\n\t        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;\n\t        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;\n\t        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;\n\t        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;\n\t        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;\n\t        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;\n\t        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;\n\t    }\n\n\t    /**\n\t     * Shortcut functions to the cipher\'s object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);\n\t}());\n\n\n\treturn CryptoJS.RabbitLegacy;\n\n}));\n\n//# sourceURL=webpack://lemon/./node_modules/crypto-js/rabbit-legacy.js?'
          );

          /***/
        },

      /***/ "./node_modules/crypto-js/rabbit.js":
        /*!******************************************!*\
  !*** ./node_modules/crypto-js/rabbit.js ***!
  \******************************************/
        /***/ function (module, exports, __webpack_require__) {
          eval(
            ';(function (root, factory, undef) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"), __webpack_require__(/*! ./enc-base64 */ "./node_modules/crypto-js/enc-base64.js"), __webpack_require__(/*! ./md5 */ "./node_modules/crypto-js/md5.js"), __webpack_require__(/*! ./evpkdf */ "./node_modules/crypto-js/evpkdf.js"), __webpack_require__(/*! ./cipher-core */ "./node_modules/crypto-js/cipher-core.js"));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var StreamCipher = C_lib.StreamCipher;\n\t    var C_algo = C.algo;\n\n\t    // Reusable objects\n\t    var S  = [];\n\t    var C_ = [];\n\t    var G  = [];\n\n\t    /**\n\t     * Rabbit stream cipher algorithm\n\t     */\n\t    var Rabbit = C_algo.Rabbit = StreamCipher.extend({\n\t        _doReset: function () {\n\t            // Shortcuts\n\t            var K = this._key.words;\n\t            var iv = this.cfg.iv;\n\n\t            // Swap endian\n\t            for (var i = 0; i < 4; i++) {\n\t                K[i] = (((K[i] << 8)  | (K[i] >>> 24)) & 0x00ff00ff) |\n\t                       (((K[i] << 24) | (K[i] >>> 8))  & 0xff00ff00);\n\t            }\n\n\t            // Generate initial state values\n\t            var X = this._X = [\n\t                K[0], (K[3] << 16) | (K[2] >>> 16),\n\t                K[1], (K[0] << 16) | (K[3] >>> 16),\n\t                K[2], (K[1] << 16) | (K[0] >>> 16),\n\t                K[3], (K[2] << 16) | (K[1] >>> 16)\n\t            ];\n\n\t            // Generate initial counter values\n\t            var C = this._C = [\n\t                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),\n\t                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),\n\t                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),\n\t                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)\n\t            ];\n\n\t            // Carry bit\n\t            this._b = 0;\n\n\t            // Iterate the system four times\n\t            for (var i = 0; i < 4; i++) {\n\t                nextState.call(this);\n\t            }\n\n\t            // Modify the counters\n\t            for (var i = 0; i < 8; i++) {\n\t                C[i] ^= X[(i + 4) & 7];\n\t            }\n\n\t            // IV setup\n\t            if (iv) {\n\t                // Shortcuts\n\t                var IV = iv.words;\n\t                var IV_0 = IV[0];\n\t                var IV_1 = IV[1];\n\n\t                // Generate four subvectors\n\t                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);\n\t                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);\n\t                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);\n\t                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);\n\n\t                // Modify counter values\n\t                C[0] ^= i0;\n\t                C[1] ^= i1;\n\t                C[2] ^= i2;\n\t                C[3] ^= i3;\n\t                C[4] ^= i0;\n\t                C[5] ^= i1;\n\t                C[6] ^= i2;\n\t                C[7] ^= i3;\n\n\t                // Iterate the system four times\n\t                for (var i = 0; i < 4; i++) {\n\t                    nextState.call(this);\n\t                }\n\t            }\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcut\n\t            var X = this._X;\n\n\t            // Iterate the system\n\t            nextState.call(this);\n\n\t            // Generate four keystream words\n\t            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);\n\t            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);\n\t            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);\n\t            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);\n\n\t            for (var i = 0; i < 4; i++) {\n\t                // Swap endian\n\t                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |\n\t                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);\n\n\t                // Encrypt\n\t                M[offset + i] ^= S[i];\n\t            }\n\t        },\n\n\t        blockSize: 128/32,\n\n\t        ivSize: 64/32\n\t    });\n\n\t    function nextState() {\n\t        // Shortcuts\n\t        var X = this._X;\n\t        var C = this._C;\n\n\t        // Save old counter values\n\t        for (var i = 0; i < 8; i++) {\n\t            C_[i] = C[i];\n\t        }\n\n\t        // Calculate new counter values\n\t        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;\n\t        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;\n\t        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;\n\t        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;\n\t        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;\n\t        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;\n\t        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;\n\t        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;\n\t        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;\n\n\t        // Calculate the g-values\n\t        for (var i = 0; i < 8; i++) {\n\t            var gx = X[i] + C[i];\n\n\t            // Construct high and low argument for squaring\n\t            var ga = gx & 0xffff;\n\t            var gb = gx >>> 16;\n\n\t            // Calculate high and low result of squaring\n\t            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;\n\t            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);\n\n\t            // High XOR low\n\t            G[i] = gh ^ gl;\n\t        }\n\n\t        // Calculate new state values\n\t        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;\n\t        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;\n\t        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;\n\t        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;\n\t        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;\n\t        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;\n\t        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;\n\t        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;\n\t    }\n\n\t    /**\n\t     * Shortcut functions to the cipher\'s object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.Rabbit = StreamCipher._createHelper(Rabbit);\n\t}());\n\n\n\treturn CryptoJS.Rabbit;\n\n}));\n\n//# sourceURL=webpack://lemon/./node_modules/crypto-js/rabbit.js?'
          );

          /***/
        },

      /***/ "./node_modules/crypto-js/rc4.js":
        /*!***************************************!*\
  !*** ./node_modules/crypto-js/rc4.js ***!
  \***************************************/
        /***/ function (module, exports, __webpack_require__) {
          eval(
            ';(function (root, factory, undef) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"), __webpack_require__(/*! ./enc-base64 */ "./node_modules/crypto-js/enc-base64.js"), __webpack_require__(/*! ./md5 */ "./node_modules/crypto-js/md5.js"), __webpack_require__(/*! ./evpkdf */ "./node_modules/crypto-js/evpkdf.js"), __webpack_require__(/*! ./cipher-core */ "./node_modules/crypto-js/cipher-core.js"));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var StreamCipher = C_lib.StreamCipher;\n\t    var C_algo = C.algo;\n\n\t    /**\n\t     * RC4 stream cipher algorithm.\n\t     */\n\t    var RC4 = C_algo.RC4 = StreamCipher.extend({\n\t        _doReset: function () {\n\t            // Shortcuts\n\t            var key = this._key;\n\t            var keyWords = key.words;\n\t            var keySigBytes = key.sigBytes;\n\n\t            // Init sbox\n\t            var S = this._S = [];\n\t            for (var i = 0; i < 256; i++) {\n\t                S[i] = i;\n\t            }\n\n\t            // Key setup\n\t            for (var i = 0, j = 0; i < 256; i++) {\n\t                var keyByteIndex = i % keySigBytes;\n\t                var keyByte = (keyWords[keyByteIndex >>> 2] >>> (24 - (keyByteIndex % 4) * 8)) & 0xff;\n\n\t                j = (j + S[i] + keyByte) % 256;\n\n\t                // Swap\n\t                var t = S[i];\n\t                S[i] = S[j];\n\t                S[j] = t;\n\t            }\n\n\t            // Counters\n\t            this._i = this._j = 0;\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            M[offset] ^= generateKeystreamWord.call(this);\n\t        },\n\n\t        keySize: 256/32,\n\n\t        ivSize: 0\n\t    });\n\n\t    function generateKeystreamWord() {\n\t        // Shortcuts\n\t        var S = this._S;\n\t        var i = this._i;\n\t        var j = this._j;\n\n\t        // Generate keystream word\n\t        var keystreamWord = 0;\n\t        for (var n = 0; n < 4; n++) {\n\t            i = (i + 1) % 256;\n\t            j = (j + S[i]) % 256;\n\n\t            // Swap\n\t            var t = S[i];\n\t            S[i] = S[j];\n\t            S[j] = t;\n\n\t            keystreamWord |= S[(S[i] + S[j]) % 256] << (24 - n * 8);\n\t        }\n\n\t        // Update counters\n\t        this._i = i;\n\t        this._j = j;\n\n\t        return keystreamWord;\n\t    }\n\n\t    /**\n\t     * Shortcut functions to the cipher\'s object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.RC4 = StreamCipher._createHelper(RC4);\n\n\t    /**\n\t     * Modified RC4 stream cipher algorithm.\n\t     */\n\t    var RC4Drop = C_algo.RC4Drop = RC4.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {number} drop The number of keystream words to drop. Default 192\n\t         */\n\t        cfg: RC4.cfg.extend({\n\t            drop: 192\n\t        }),\n\n\t        _doReset: function () {\n\t            RC4._doReset.call(this);\n\n\t            // Drop\n\t            for (var i = this.cfg.drop; i > 0; i--) {\n\t                generateKeystreamWord.call(this);\n\t            }\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut functions to the cipher\'s object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.RC4Drop = StreamCipher._createHelper(RC4Drop);\n\t}());\n\n\n\treturn CryptoJS.RC4;\n\n}));\n\n//# sourceURL=webpack://lemon/./node_modules/crypto-js/rc4.js?'
          );

          /***/
        },

      /***/ "./node_modules/crypto-js/ripemd160.js":
        /*!*********************************************!*\
  !*** ./node_modules/crypto-js/ripemd160.js ***!
  \*********************************************/
        /***/ function (module, exports, __webpack_require__) {
          eval(
            ";(function (root, factory) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__webpack_require__(/*! ./core */ \"./node_modules/crypto-js/core.js\"));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\t/** @preserve\n\t(c) 2012 by Cédric Mesnil. All rights reserved.\n\n\tRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n\t    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\t    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n\tTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t*/\n\n\t(function (Math) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_algo = C.algo;\n\n\t    // Constants table\n\t    var _zl = WordArray.create([\n\t        0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,\n\t        7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,\n\t        3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,\n\t        1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,\n\t        4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13]);\n\t    var _zr = WordArray.create([\n\t        5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,\n\t        6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,\n\t        15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,\n\t        8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,\n\t        12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11]);\n\t    var _sl = WordArray.create([\n\t         11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,\n\t        7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,\n\t        11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,\n\t          11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,\n\t        9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ]);\n\t    var _sr = WordArray.create([\n\t        8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,\n\t        9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,\n\t        9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,\n\t        15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,\n\t        8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ]);\n\n\t    var _hl =  WordArray.create([ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);\n\t    var _hr =  WordArray.create([ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);\n\n\t    /**\n\t     * RIPEMD160 hash algorithm.\n\t     */\n\t    var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash  = WordArray.create([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\n\t            // Swap endian\n\t            for (var i = 0; i < 16; i++) {\n\t                // Shortcuts\n\t                var offset_i = offset + i;\n\t                var M_offset_i = M[offset_i];\n\n\t                // Swap\n\t                M[offset_i] = (\n\t                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |\n\t                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)\n\t                );\n\t            }\n\t            // Shortcut\n\t            var H  = this._hash.words;\n\t            var hl = _hl.words;\n\t            var hr = _hr.words;\n\t            var zl = _zl.words;\n\t            var zr = _zr.words;\n\t            var sl = _sl.words;\n\t            var sr = _sr.words;\n\n\t            // Working variables\n\t            var al, bl, cl, dl, el;\n\t            var ar, br, cr, dr, er;\n\n\t            ar = al = H[0];\n\t            br = bl = H[1];\n\t            cr = cl = H[2];\n\t            dr = dl = H[3];\n\t            er = el = H[4];\n\t            // Computation\n\t            var t;\n\t            for (var i = 0; i < 80; i += 1) {\n\t                t = (al +  M[offset+zl[i]])|0;\n\t                if (i<16){\n\t\t            t +=  f1(bl,cl,dl) + hl[0];\n\t                } else if (i<32) {\n\t\t            t +=  f2(bl,cl,dl) + hl[1];\n\t                } else if (i<48) {\n\t\t            t +=  f3(bl,cl,dl) + hl[2];\n\t                } else if (i<64) {\n\t\t            t +=  f4(bl,cl,dl) + hl[3];\n\t                } else {// if (i<80) {\n\t\t            t +=  f5(bl,cl,dl) + hl[4];\n\t                }\n\t                t = t|0;\n\t                t =  rotl(t,sl[i]);\n\t                t = (t+el)|0;\n\t                al = el;\n\t                el = dl;\n\t                dl = rotl(cl, 10);\n\t                cl = bl;\n\t                bl = t;\n\n\t                t = (ar + M[offset+zr[i]])|0;\n\t                if (i<16){\n\t\t            t +=  f5(br,cr,dr) + hr[0];\n\t                } else if (i<32) {\n\t\t            t +=  f4(br,cr,dr) + hr[1];\n\t                } else if (i<48) {\n\t\t            t +=  f3(br,cr,dr) + hr[2];\n\t                } else if (i<64) {\n\t\t            t +=  f2(br,cr,dr) + hr[3];\n\t                } else {// if (i<80) {\n\t\t            t +=  f1(br,cr,dr) + hr[4];\n\t                }\n\t                t = t|0;\n\t                t =  rotl(t,sr[i]) ;\n\t                t = (t+er)|0;\n\t                ar = er;\n\t                er = dr;\n\t                dr = rotl(cr, 10);\n\t                cr = br;\n\t                br = t;\n\t            }\n\t            // Intermediate hash value\n\t            t    = (H[1] + cl + dr)|0;\n\t            H[1] = (H[2] + dl + er)|0;\n\t            H[2] = (H[3] + el + ar)|0;\n\t            H[3] = (H[4] + al + br)|0;\n\t            H[4] = (H[0] + bl + cr)|0;\n\t            H[0] =  t;\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (\n\t                (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |\n\t                (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)\n\t            );\n\t            data.sigBytes = (dataWords.length + 1) * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Shortcuts\n\t            var hash = this._hash;\n\t            var H = hash.words;\n\n\t            // Swap endian\n\t            for (var i = 0; i < 5; i++) {\n\t                // Shortcut\n\t                var H_i = H[i];\n\n\t                // Swap\n\t                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |\n\t                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);\n\t            }\n\n\t            // Return final computed hash\n\t            return hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        }\n\t    });\n\n\n\t    function f1(x, y, z) {\n\t        return ((x) ^ (y) ^ (z));\n\n\t    }\n\n\t    function f2(x, y, z) {\n\t        return (((x)&(y)) | ((~x)&(z)));\n\t    }\n\n\t    function f3(x, y, z) {\n\t        return (((x) | (~(y))) ^ (z));\n\t    }\n\n\t    function f4(x, y, z) {\n\t        return (((x) & (z)) | ((y)&(~(z))));\n\t    }\n\n\t    function f5(x, y, z) {\n\t        return ((x) ^ ((y) |(~(z))));\n\n\t    }\n\n\t    function rotl(x,n) {\n\t        return (x<<n) | (x>>>(32-n));\n\t    }\n\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.RIPEMD160('message');\n\t     *     var hash = CryptoJS.RIPEMD160(wordArray);\n\t     */\n\t    C.RIPEMD160 = Hasher._createHelper(RIPEMD160);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacRIPEMD160(message, key);\n\t     */\n\t    C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);\n\t}(Math));\n\n\n\treturn CryptoJS.RIPEMD160;\n\n}));\n\n//# sourceURL=webpack://lemon/./node_modules/crypto-js/ripemd160.js?"
          );

          /***/
        },

      /***/ "./node_modules/crypto-js/sha1.js":
        /*!****************************************!*\
  !*** ./node_modules/crypto-js/sha1.js ***!
  \****************************************/
        /***/ function (module, exports, __webpack_require__) {
          eval(
            ";(function (root, factory) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__webpack_require__(/*! ./core */ \"./node_modules/crypto-js/core.js\"));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_algo = C.algo;\n\n\t    // Reusable object\n\t    var W = [];\n\n\t    /**\n\t     * SHA-1 hash algorithm.\n\t     */\n\t    var SHA1 = C_algo.SHA1 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash = new WordArray.init([\n\t                0x67452301, 0xefcdab89,\n\t                0x98badcfe, 0x10325476,\n\t                0xc3d2e1f0\n\t            ]);\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcut\n\t            var H = this._hash.words;\n\n\t            // Working variables\n\t            var a = H[0];\n\t            var b = H[1];\n\t            var c = H[2];\n\t            var d = H[3];\n\t            var e = H[4];\n\n\t            // Computation\n\t            for (var i = 0; i < 80; i++) {\n\t                if (i < 16) {\n\t                    W[i] = M[offset + i] | 0;\n\t                } else {\n\t                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];\n\t                    W[i] = (n << 1) | (n >>> 31);\n\t                }\n\n\t                var t = ((a << 5) | (a >>> 27)) + e + W[i];\n\t                if (i < 20) {\n\t                    t += ((b & c) | (~b & d)) + 0x5a827999;\n\t                } else if (i < 40) {\n\t                    t += (b ^ c ^ d) + 0x6ed9eba1;\n\t                } else if (i < 60) {\n\t                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;\n\t                } else /* if (i < 80) */ {\n\t                    t += (b ^ c ^ d) - 0x359d3e2a;\n\t                }\n\n\t                e = d;\n\t                d = c;\n\t                c = (b << 30) | (b >>> 2);\n\t                b = a;\n\t                a = t;\n\t            }\n\n\t            // Intermediate hash value\n\t            H[0] = (H[0] + a) | 0;\n\t            H[1] = (H[1] + b) | 0;\n\t            H[2] = (H[2] + c) | 0;\n\t            H[3] = (H[3] + d) | 0;\n\t            H[4] = (H[4] + e) | 0;\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\n\t            data.sigBytes = dataWords.length * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Return final computed hash\n\t            return this._hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA1('message');\n\t     *     var hash = CryptoJS.SHA1(wordArray);\n\t     */\n\t    C.SHA1 = Hasher._createHelper(SHA1);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA1(message, key);\n\t     */\n\t    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);\n\t}());\n\n\n\treturn CryptoJS.SHA1;\n\n}));\n\n//# sourceURL=webpack://lemon/./node_modules/crypto-js/sha1.js?"
          );

          /***/
        },

      /***/ "./node_modules/crypto-js/sha224.js":
        /*!******************************************!*\
  !*** ./node_modules/crypto-js/sha224.js ***!
  \******************************************/
        /***/ function (module, exports, __webpack_require__) {
          eval(
            ";(function (root, factory, undef) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__webpack_require__(/*! ./core */ \"./node_modules/crypto-js/core.js\"), __webpack_require__(/*! ./sha256 */ \"./node_modules/crypto-js/sha256.js\"));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var C_algo = C.algo;\n\t    var SHA256 = C_algo.SHA256;\n\n\t    /**\n\t     * SHA-224 hash algorithm.\n\t     */\n\t    var SHA224 = C_algo.SHA224 = SHA256.extend({\n\t        _doReset: function () {\n\t            this._hash = new WordArray.init([\n\t                0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n\t                0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4\n\t            ]);\n\t        },\n\n\t        _doFinalize: function () {\n\t            var hash = SHA256._doFinalize.call(this);\n\n\t            hash.sigBytes -= 4;\n\n\t            return hash;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA224('message');\n\t     *     var hash = CryptoJS.SHA224(wordArray);\n\t     */\n\t    C.SHA224 = SHA256._createHelper(SHA224);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA224(message, key);\n\t     */\n\t    C.HmacSHA224 = SHA256._createHmacHelper(SHA224);\n\t}());\n\n\n\treturn CryptoJS.SHA224;\n\n}));\n\n//# sourceURL=webpack://lemon/./node_modules/crypto-js/sha224.js?"
          );

          /***/
        },

      /***/ "./node_modules/crypto-js/sha256.js":
        /*!******************************************!*\
  !*** ./node_modules/crypto-js/sha256.js ***!
  \******************************************/
        /***/ function (module, exports, __webpack_require__) {
          eval(
            ";(function (root, factory) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__webpack_require__(/*! ./core */ \"./node_modules/crypto-js/core.js\"));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\t(function (Math) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_algo = C.algo;\n\n\t    // Initialization and round constants tables\n\t    var H = [];\n\t    var K = [];\n\n\t    // Compute constants\n\t    (function () {\n\t        function isPrime(n) {\n\t            var sqrtN = Math.sqrt(n);\n\t            for (var factor = 2; factor <= sqrtN; factor++) {\n\t                if (!(n % factor)) {\n\t                    return false;\n\t                }\n\t            }\n\n\t            return true;\n\t        }\n\n\t        function getFractionalBits(n) {\n\t            return ((n - (n | 0)) * 0x100000000) | 0;\n\t        }\n\n\t        var n = 2;\n\t        var nPrime = 0;\n\t        while (nPrime < 64) {\n\t            if (isPrime(n)) {\n\t                if (nPrime < 8) {\n\t                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));\n\t                }\n\t                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));\n\n\t                nPrime++;\n\t            }\n\n\t            n++;\n\t        }\n\t    }());\n\n\t    // Reusable object\n\t    var W = [];\n\n\t    /**\n\t     * SHA-256 hash algorithm.\n\t     */\n\t    var SHA256 = C_algo.SHA256 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash = new WordArray.init(H.slice(0));\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcut\n\t            var H = this._hash.words;\n\n\t            // Working variables\n\t            var a = H[0];\n\t            var b = H[1];\n\t            var c = H[2];\n\t            var d = H[3];\n\t            var e = H[4];\n\t            var f = H[5];\n\t            var g = H[6];\n\t            var h = H[7];\n\n\t            // Computation\n\t            for (var i = 0; i < 64; i++) {\n\t                if (i < 16) {\n\t                    W[i] = M[offset + i] | 0;\n\t                } else {\n\t                    var gamma0x = W[i - 15];\n\t                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^\n\t                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^\n\t                                   (gamma0x >>> 3);\n\n\t                    var gamma1x = W[i - 2];\n\t                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^\n\t                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^\n\t                                   (gamma1x >>> 10);\n\n\t                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];\n\t                }\n\n\t                var ch  = (e & f) ^ (~e & g);\n\t                var maj = (a & b) ^ (a & c) ^ (b & c);\n\n\t                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));\n\t                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));\n\n\t                var t1 = h + sigma1 + ch + K[i] + W[i];\n\t                var t2 = sigma0 + maj;\n\n\t                h = g;\n\t                g = f;\n\t                f = e;\n\t                e = (d + t1) | 0;\n\t                d = c;\n\t                c = b;\n\t                b = a;\n\t                a = (t1 + t2) | 0;\n\t            }\n\n\t            // Intermediate hash value\n\t            H[0] = (H[0] + a) | 0;\n\t            H[1] = (H[1] + b) | 0;\n\t            H[2] = (H[2] + c) | 0;\n\t            H[3] = (H[3] + d) | 0;\n\t            H[4] = (H[4] + e) | 0;\n\t            H[5] = (H[5] + f) | 0;\n\t            H[6] = (H[6] + g) | 0;\n\t            H[7] = (H[7] + h) | 0;\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);\n\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;\n\t            data.sigBytes = dataWords.length * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Return final computed hash\n\t            return this._hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA256('message');\n\t     *     var hash = CryptoJS.SHA256(wordArray);\n\t     */\n\t    C.SHA256 = Hasher._createHelper(SHA256);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA256(message, key);\n\t     */\n\t    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);\n\t}(Math));\n\n\n\treturn CryptoJS.SHA256;\n\n}));\n\n//# sourceURL=webpack://lemon/./node_modules/crypto-js/sha256.js?"
          );

          /***/
        },

      /***/ "./node_modules/crypto-js/sha3.js":
        /*!****************************************!*\
  !*** ./node_modules/crypto-js/sha3.js ***!
  \****************************************/
        /***/ function (module, exports, __webpack_require__) {
          eval(
            ";(function (root, factory, undef) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__webpack_require__(/*! ./core */ \"./node_modules/crypto-js/core.js\"), __webpack_require__(/*! ./x64-core */ \"./node_modules/crypto-js/x64-core.js\"));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\t(function (Math) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_x64 = C.x64;\n\t    var X64Word = C_x64.Word;\n\t    var C_algo = C.algo;\n\n\t    // Constants tables\n\t    var RHO_OFFSETS = [];\n\t    var PI_INDEXES  = [];\n\t    var ROUND_CONSTANTS = [];\n\n\t    // Compute Constants\n\t    (function () {\n\t        // Compute rho offset constants\n\t        var x = 1, y = 0;\n\t        for (var t = 0; t < 24; t++) {\n\t            RHO_OFFSETS[x + 5 * y] = ((t + 1) * (t + 2) / 2) % 64;\n\n\t            var newX = y % 5;\n\t            var newY = (2 * x + 3 * y) % 5;\n\t            x = newX;\n\t            y = newY;\n\t        }\n\n\t        // Compute pi index constants\n\t        for (var x = 0; x < 5; x++) {\n\t            for (var y = 0; y < 5; y++) {\n\t                PI_INDEXES[x + 5 * y] = y + ((2 * x + 3 * y) % 5) * 5;\n\t            }\n\t        }\n\n\t        // Compute round constants\n\t        var LFSR = 0x01;\n\t        for (var i = 0; i < 24; i++) {\n\t            var roundConstantMsw = 0;\n\t            var roundConstantLsw = 0;\n\n\t            for (var j = 0; j < 7; j++) {\n\t                if (LFSR & 0x01) {\n\t                    var bitPosition = (1 << j) - 1;\n\t                    if (bitPosition < 32) {\n\t                        roundConstantLsw ^= 1 << bitPosition;\n\t                    } else /* if (bitPosition >= 32) */ {\n\t                        roundConstantMsw ^= 1 << (bitPosition - 32);\n\t                    }\n\t                }\n\n\t                // Compute next LFSR\n\t                if (LFSR & 0x80) {\n\t                    // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1\n\t                    LFSR = (LFSR << 1) ^ 0x71;\n\t                } else {\n\t                    LFSR <<= 1;\n\t                }\n\t            }\n\n\t            ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);\n\t        }\n\t    }());\n\n\t    // Reusable objects for temporary values\n\t    var T = [];\n\t    (function () {\n\t        for (var i = 0; i < 25; i++) {\n\t            T[i] = X64Word.create();\n\t        }\n\t    }());\n\n\t    /**\n\t     * SHA-3 hash algorithm.\n\t     */\n\t    var SHA3 = C_algo.SHA3 = Hasher.extend({\n\t        /**\n\t         * Configuration options.\n\t         *\n\t         * @property {number} outputLength\n\t         *   The desired number of bits in the output hash.\n\t         *   Only values permitted are: 224, 256, 384, 512.\n\t         *   Default: 512\n\t         */\n\t        cfg: Hasher.cfg.extend({\n\t            outputLength: 512\n\t        }),\n\n\t        _doReset: function () {\n\t            var state = this._state = []\n\t            for (var i = 0; i < 25; i++) {\n\t                state[i] = new X64Word.init();\n\t            }\n\n\t            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcuts\n\t            var state = this._state;\n\t            var nBlockSizeLanes = this.blockSize / 2;\n\n\t            // Absorb\n\t            for (var i = 0; i < nBlockSizeLanes; i++) {\n\t                // Shortcuts\n\t                var M2i  = M[offset + 2 * i];\n\t                var M2i1 = M[offset + 2 * i + 1];\n\n\t                // Swap endian\n\t                M2i = (\n\t                    (((M2i << 8)  | (M2i >>> 24)) & 0x00ff00ff) |\n\t                    (((M2i << 24) | (M2i >>> 8))  & 0xff00ff00)\n\t                );\n\t                M2i1 = (\n\t                    (((M2i1 << 8)  | (M2i1 >>> 24)) & 0x00ff00ff) |\n\t                    (((M2i1 << 24) | (M2i1 >>> 8))  & 0xff00ff00)\n\t                );\n\n\t                // Absorb message into state\n\t                var lane = state[i];\n\t                lane.high ^= M2i1;\n\t                lane.low  ^= M2i;\n\t            }\n\n\t            // Rounds\n\t            for (var round = 0; round < 24; round++) {\n\t                // Theta\n\t                for (var x = 0; x < 5; x++) {\n\t                    // Mix column lanes\n\t                    var tMsw = 0, tLsw = 0;\n\t                    for (var y = 0; y < 5; y++) {\n\t                        var lane = state[x + 5 * y];\n\t                        tMsw ^= lane.high;\n\t                        tLsw ^= lane.low;\n\t                    }\n\n\t                    // Temporary values\n\t                    var Tx = T[x];\n\t                    Tx.high = tMsw;\n\t                    Tx.low  = tLsw;\n\t                }\n\t                for (var x = 0; x < 5; x++) {\n\t                    // Shortcuts\n\t                    var Tx4 = T[(x + 4) % 5];\n\t                    var Tx1 = T[(x + 1) % 5];\n\t                    var Tx1Msw = Tx1.high;\n\t                    var Tx1Lsw = Tx1.low;\n\n\t                    // Mix surrounding columns\n\t                    var tMsw = Tx4.high ^ ((Tx1Msw << 1) | (Tx1Lsw >>> 31));\n\t                    var tLsw = Tx4.low  ^ ((Tx1Lsw << 1) | (Tx1Msw >>> 31));\n\t                    for (var y = 0; y < 5; y++) {\n\t                        var lane = state[x + 5 * y];\n\t                        lane.high ^= tMsw;\n\t                        lane.low  ^= tLsw;\n\t                    }\n\t                }\n\n\t                // Rho Pi\n\t                for (var laneIndex = 1; laneIndex < 25; laneIndex++) {\n\t                    var tMsw;\n\t                    var tLsw;\n\n\t                    // Shortcuts\n\t                    var lane = state[laneIndex];\n\t                    var laneMsw = lane.high;\n\t                    var laneLsw = lane.low;\n\t                    var rhoOffset = RHO_OFFSETS[laneIndex];\n\n\t                    // Rotate lanes\n\t                    if (rhoOffset < 32) {\n\t                        tMsw = (laneMsw << rhoOffset) | (laneLsw >>> (32 - rhoOffset));\n\t                        tLsw = (laneLsw << rhoOffset) | (laneMsw >>> (32 - rhoOffset));\n\t                    } else /* if (rhoOffset >= 32) */ {\n\t                        tMsw = (laneLsw << (rhoOffset - 32)) | (laneMsw >>> (64 - rhoOffset));\n\t                        tLsw = (laneMsw << (rhoOffset - 32)) | (laneLsw >>> (64 - rhoOffset));\n\t                    }\n\n\t                    // Transpose lanes\n\t                    var TPiLane = T[PI_INDEXES[laneIndex]];\n\t                    TPiLane.high = tMsw;\n\t                    TPiLane.low  = tLsw;\n\t                }\n\n\t                // Rho pi at x = y = 0\n\t                var T0 = T[0];\n\t                var state0 = state[0];\n\t                T0.high = state0.high;\n\t                T0.low  = state0.low;\n\n\t                // Chi\n\t                for (var x = 0; x < 5; x++) {\n\t                    for (var y = 0; y < 5; y++) {\n\t                        // Shortcuts\n\t                        var laneIndex = x + 5 * y;\n\t                        var lane = state[laneIndex];\n\t                        var TLane = T[laneIndex];\n\t                        var Tx1Lane = T[((x + 1) % 5) + 5 * y];\n\t                        var Tx2Lane = T[((x + 2) % 5) + 5 * y];\n\n\t                        // Mix rows\n\t                        lane.high = TLane.high ^ (~Tx1Lane.high & Tx2Lane.high);\n\t                        lane.low  = TLane.low  ^ (~Tx1Lane.low  & Tx2Lane.low);\n\t                    }\n\t                }\n\n\t                // Iota\n\t                var lane = state[0];\n\t                var roundConstant = ROUND_CONSTANTS[round];\n\t                lane.high ^= roundConstant.high;\n\t                lane.low  ^= roundConstant.low;\n\t            }\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\t            var blockSizeBits = this.blockSize * 32;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x1 << (24 - nBitsLeft % 32);\n\t            dataWords[((Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits) >>> 5) - 1] |= 0x80;\n\t            data.sigBytes = dataWords.length * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Shortcuts\n\t            var state = this._state;\n\t            var outputLengthBytes = this.cfg.outputLength / 8;\n\t            var outputLengthLanes = outputLengthBytes / 8;\n\n\t            // Squeeze\n\t            var hashWords = [];\n\t            for (var i = 0; i < outputLengthLanes; i++) {\n\t                // Shortcuts\n\t                var lane = state[i];\n\t                var laneMsw = lane.high;\n\t                var laneLsw = lane.low;\n\n\t                // Swap endian\n\t                laneMsw = (\n\t                    (((laneMsw << 8)  | (laneMsw >>> 24)) & 0x00ff00ff) |\n\t                    (((laneMsw << 24) | (laneMsw >>> 8))  & 0xff00ff00)\n\t                );\n\t                laneLsw = (\n\t                    (((laneLsw << 8)  | (laneLsw >>> 24)) & 0x00ff00ff) |\n\t                    (((laneLsw << 24) | (laneLsw >>> 8))  & 0xff00ff00)\n\t                );\n\n\t                // Squeeze state to retrieve hash\n\t                hashWords.push(laneLsw);\n\t                hashWords.push(laneMsw);\n\t            }\n\n\t            // Return final computed hash\n\t            return new WordArray.init(hashWords, outputLengthBytes);\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\n\t            var state = clone._state = this._state.slice(0);\n\t            for (var i = 0; i < 25; i++) {\n\t                state[i] = state[i].clone();\n\t            }\n\n\t            return clone;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA3('message');\n\t     *     var hash = CryptoJS.SHA3(wordArray);\n\t     */\n\t    C.SHA3 = Hasher._createHelper(SHA3);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA3(message, key);\n\t     */\n\t    C.HmacSHA3 = Hasher._createHmacHelper(SHA3);\n\t}(Math));\n\n\n\treturn CryptoJS.SHA3;\n\n}));\n\n//# sourceURL=webpack://lemon/./node_modules/crypto-js/sha3.js?"
          );

          /***/
        },

      /***/ "./node_modules/crypto-js/sha384.js":
        /*!******************************************!*\
  !*** ./node_modules/crypto-js/sha384.js ***!
  \******************************************/
        /***/ function (module, exports, __webpack_require__) {
          eval(
            ';(function (root, factory, undef) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"), __webpack_require__(/*! ./x64-core */ "./node_modules/crypto-js/x64-core.js"), __webpack_require__(/*! ./sha512 */ "./node_modules/crypto-js/sha512.js"));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_x64 = C.x64;\n\t    var X64Word = C_x64.Word;\n\t    var X64WordArray = C_x64.WordArray;\n\t    var C_algo = C.algo;\n\t    var SHA512 = C_algo.SHA512;\n\n\t    /**\n\t     * SHA-384 hash algorithm.\n\t     */\n\t    var SHA384 = C_algo.SHA384 = SHA512.extend({\n\t        _doReset: function () {\n\t            this._hash = new X64WordArray.init([\n\t                new X64Word.init(0xcbbb9d5d, 0xc1059ed8), new X64Word.init(0x629a292a, 0x367cd507),\n\t                new X64Word.init(0x9159015a, 0x3070dd17), new X64Word.init(0x152fecd8, 0xf70e5939),\n\t                new X64Word.init(0x67332667, 0xffc00b31), new X64Word.init(0x8eb44a87, 0x68581511),\n\t                new X64Word.init(0xdb0c2e0d, 0x64f98fa7), new X64Word.init(0x47b5481d, 0xbefa4fa4)\n\t            ]);\n\t        },\n\n\t        _doFinalize: function () {\n\t            var hash = SHA512._doFinalize.call(this);\n\n\t            hash.sigBytes -= 16;\n\n\t            return hash;\n\t        }\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher\'s object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA384(\'message\');\n\t     *     var hash = CryptoJS.SHA384(wordArray);\n\t     */\n\t    C.SHA384 = SHA512._createHelper(SHA384);\n\n\t    /**\n\t     * Shortcut function to the HMAC\'s object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA384(message, key);\n\t     */\n\t    C.HmacSHA384 = SHA512._createHmacHelper(SHA384);\n\t}());\n\n\n\treturn CryptoJS.SHA384;\n\n}));\n\n//# sourceURL=webpack://lemon/./node_modules/crypto-js/sha384.js?'
          );

          /***/
        },

      /***/ "./node_modules/crypto-js/sha512.js":
        /*!******************************************!*\
  !*** ./node_modules/crypto-js/sha512.js ***!
  \******************************************/
        /***/ function (module, exports, __webpack_require__) {
          eval(
            ";(function (root, factory, undef) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__webpack_require__(/*! ./core */ \"./node_modules/crypto-js/core.js\"), __webpack_require__(/*! ./x64-core */ \"./node_modules/crypto-js/x64-core.js\"));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Hasher = C_lib.Hasher;\n\t    var C_x64 = C.x64;\n\t    var X64Word = C_x64.Word;\n\t    var X64WordArray = C_x64.WordArray;\n\t    var C_algo = C.algo;\n\n\t    function X64Word_create() {\n\t        return X64Word.create.apply(X64Word, arguments);\n\t    }\n\n\t    // Constants\n\t    var K = [\n\t        X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd),\n\t        X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc),\n\t        X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019),\n\t        X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118),\n\t        X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe),\n\t        X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2),\n\t        X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1),\n\t        X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694),\n\t        X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3),\n\t        X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65),\n\t        X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483),\n\t        X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5),\n\t        X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210),\n\t        X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4),\n\t        X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725),\n\t        X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70),\n\t        X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926),\n\t        X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df),\n\t        X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8),\n\t        X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b),\n\t        X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001),\n\t        X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30),\n\t        X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910),\n\t        X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8),\n\t        X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53),\n\t        X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8),\n\t        X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb),\n\t        X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3),\n\t        X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60),\n\t        X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec),\n\t        X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9),\n\t        X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b),\n\t        X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207),\n\t        X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178),\n\t        X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6),\n\t        X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b),\n\t        X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493),\n\t        X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c),\n\t        X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a),\n\t        X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)\n\t    ];\n\n\t    // Reusable objects\n\t    var W = [];\n\t    (function () {\n\t        for (var i = 0; i < 80; i++) {\n\t            W[i] = X64Word_create();\n\t        }\n\t    }());\n\n\t    /**\n\t     * SHA-512 hash algorithm.\n\t     */\n\t    var SHA512 = C_algo.SHA512 = Hasher.extend({\n\t        _doReset: function () {\n\t            this._hash = new X64WordArray.init([\n\t                new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b),\n\t                new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1),\n\t                new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f),\n\t                new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)\n\t            ]);\n\t        },\n\n\t        _doProcessBlock: function (M, offset) {\n\t            // Shortcuts\n\t            var H = this._hash.words;\n\n\t            var H0 = H[0];\n\t            var H1 = H[1];\n\t            var H2 = H[2];\n\t            var H3 = H[3];\n\t            var H4 = H[4];\n\t            var H5 = H[5];\n\t            var H6 = H[6];\n\t            var H7 = H[7];\n\n\t            var H0h = H0.high;\n\t            var H0l = H0.low;\n\t            var H1h = H1.high;\n\t            var H1l = H1.low;\n\t            var H2h = H2.high;\n\t            var H2l = H2.low;\n\t            var H3h = H3.high;\n\t            var H3l = H3.low;\n\t            var H4h = H4.high;\n\t            var H4l = H4.low;\n\t            var H5h = H5.high;\n\t            var H5l = H5.low;\n\t            var H6h = H6.high;\n\t            var H6l = H6.low;\n\t            var H7h = H7.high;\n\t            var H7l = H7.low;\n\n\t            // Working variables\n\t            var ah = H0h;\n\t            var al = H0l;\n\t            var bh = H1h;\n\t            var bl = H1l;\n\t            var ch = H2h;\n\t            var cl = H2l;\n\t            var dh = H3h;\n\t            var dl = H3l;\n\t            var eh = H4h;\n\t            var el = H4l;\n\t            var fh = H5h;\n\t            var fl = H5l;\n\t            var gh = H6h;\n\t            var gl = H6l;\n\t            var hh = H7h;\n\t            var hl = H7l;\n\n\t            // Rounds\n\t            for (var i = 0; i < 80; i++) {\n\t                var Wil;\n\t                var Wih;\n\n\t                // Shortcut\n\t                var Wi = W[i];\n\n\t                // Extend message\n\t                if (i < 16) {\n\t                    Wih = Wi.high = M[offset + i * 2]     | 0;\n\t                    Wil = Wi.low  = M[offset + i * 2 + 1] | 0;\n\t                } else {\n\t                    // Gamma0\n\t                    var gamma0x  = W[i - 15];\n\t                    var gamma0xh = gamma0x.high;\n\t                    var gamma0xl = gamma0x.low;\n\t                    var gamma0h  = ((gamma0xh >>> 1) | (gamma0xl << 31)) ^ ((gamma0xh >>> 8) | (gamma0xl << 24)) ^ (gamma0xh >>> 7);\n\t                    var gamma0l  = ((gamma0xl >>> 1) | (gamma0xh << 31)) ^ ((gamma0xl >>> 8) | (gamma0xh << 24)) ^ ((gamma0xl >>> 7) | (gamma0xh << 25));\n\n\t                    // Gamma1\n\t                    var gamma1x  = W[i - 2];\n\t                    var gamma1xh = gamma1x.high;\n\t                    var gamma1xl = gamma1x.low;\n\t                    var gamma1h  = ((gamma1xh >>> 19) | (gamma1xl << 13)) ^ ((gamma1xh << 3) | (gamma1xl >>> 29)) ^ (gamma1xh >>> 6);\n\t                    var gamma1l  = ((gamma1xl >>> 19) | (gamma1xh << 13)) ^ ((gamma1xl << 3) | (gamma1xh >>> 29)) ^ ((gamma1xl >>> 6) | (gamma1xh << 26));\n\n\t                    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]\n\t                    var Wi7  = W[i - 7];\n\t                    var Wi7h = Wi7.high;\n\t                    var Wi7l = Wi7.low;\n\n\t                    var Wi16  = W[i - 16];\n\t                    var Wi16h = Wi16.high;\n\t                    var Wi16l = Wi16.low;\n\n\t                    Wil = gamma0l + Wi7l;\n\t                    Wih = gamma0h + Wi7h + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0);\n\t                    Wil = Wil + gamma1l;\n\t                    Wih = Wih + gamma1h + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0);\n\t                    Wil = Wil + Wi16l;\n\t                    Wih = Wih + Wi16h + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0);\n\n\t                    Wi.high = Wih;\n\t                    Wi.low  = Wil;\n\t                }\n\n\t                var chh  = (eh & fh) ^ (~eh & gh);\n\t                var chl  = (el & fl) ^ (~el & gl);\n\t                var majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);\n\t                var majl = (al & bl) ^ (al & cl) ^ (bl & cl);\n\n\t                var sigma0h = ((ah >>> 28) | (al << 4))  ^ ((ah << 30)  | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));\n\t                var sigma0l = ((al >>> 28) | (ah << 4))  ^ ((al << 30)  | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));\n\t                var sigma1h = ((eh >>> 14) | (el << 18)) ^ ((eh >>> 18) | (el << 14)) ^ ((eh << 23) | (el >>> 9));\n\t                var sigma1l = ((el >>> 14) | (eh << 18)) ^ ((el >>> 18) | (eh << 14)) ^ ((el << 23) | (eh >>> 9));\n\n\t                // t1 = h + sigma1 + ch + K[i] + W[i]\n\t                var Ki  = K[i];\n\t                var Kih = Ki.high;\n\t                var Kil = Ki.low;\n\n\t                var t1l = hl + sigma1l;\n\t                var t1h = hh + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);\n\t                var t1l = t1l + chl;\n\t                var t1h = t1h + chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);\n\t                var t1l = t1l + Kil;\n\t                var t1h = t1h + Kih + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0);\n\t                var t1l = t1l + Wil;\n\t                var t1h = t1h + Wih + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0);\n\n\t                // t2 = sigma0 + maj\n\t                var t2l = sigma0l + majl;\n\t                var t2h = sigma0h + majh + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0);\n\n\t                // Update working variables\n\t                hh = gh;\n\t                hl = gl;\n\t                gh = fh;\n\t                gl = fl;\n\t                fh = eh;\n\t                fl = el;\n\t                el = (dl + t1l) | 0;\n\t                eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;\n\t                dh = ch;\n\t                dl = cl;\n\t                ch = bh;\n\t                cl = bl;\n\t                bh = ah;\n\t                bl = al;\n\t                al = (t1l + t2l) | 0;\n\t                ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;\n\t            }\n\n\t            // Intermediate hash value\n\t            H0l = H0.low  = (H0l + al);\n\t            H0.high = (H0h + ah + ((H0l >>> 0) < (al >>> 0) ? 1 : 0));\n\t            H1l = H1.low  = (H1l + bl);\n\t            H1.high = (H1h + bh + ((H1l >>> 0) < (bl >>> 0) ? 1 : 0));\n\t            H2l = H2.low  = (H2l + cl);\n\t            H2.high = (H2h + ch + ((H2l >>> 0) < (cl >>> 0) ? 1 : 0));\n\t            H3l = H3.low  = (H3l + dl);\n\t            H3.high = (H3h + dh + ((H3l >>> 0) < (dl >>> 0) ? 1 : 0));\n\t            H4l = H4.low  = (H4l + el);\n\t            H4.high = (H4h + eh + ((H4l >>> 0) < (el >>> 0) ? 1 : 0));\n\t            H5l = H5.low  = (H5l + fl);\n\t            H5.high = (H5h + fh + ((H5l >>> 0) < (fl >>> 0) ? 1 : 0));\n\t            H6l = H6.low  = (H6l + gl);\n\t            H6.high = (H6h + gh + ((H6l >>> 0) < (gl >>> 0) ? 1 : 0));\n\t            H7l = H7.low  = (H7l + hl);\n\t            H7.high = (H7h + hh + ((H7l >>> 0) < (hl >>> 0) ? 1 : 0));\n\t        },\n\n\t        _doFinalize: function () {\n\t            // Shortcuts\n\t            var data = this._data;\n\t            var dataWords = data.words;\n\n\t            var nBitsTotal = this._nDataBytes * 8;\n\t            var nBitsLeft = data.sigBytes * 8;\n\n\t            // Add padding\n\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);\n\t            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);\n\t            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 31] = nBitsTotal;\n\t            data.sigBytes = dataWords.length * 4;\n\n\t            // Hash final blocks\n\t            this._process();\n\n\t            // Convert hash to 32-bit word array before returning\n\t            var hash = this._hash.toX32();\n\n\t            // Return final computed hash\n\t            return hash;\n\t        },\n\n\t        clone: function () {\n\t            var clone = Hasher.clone.call(this);\n\t            clone._hash = this._hash.clone();\n\n\t            return clone;\n\t        },\n\n\t        blockSize: 1024/32\n\t    });\n\n\t    /**\n\t     * Shortcut function to the hasher's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     *\n\t     * @return {WordArray} The hash.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hash = CryptoJS.SHA512('message');\n\t     *     var hash = CryptoJS.SHA512(wordArray);\n\t     */\n\t    C.SHA512 = Hasher._createHelper(SHA512);\n\n\t    /**\n\t     * Shortcut function to the HMAC's object interface.\n\t     *\n\t     * @param {WordArray|string} message The message to hash.\n\t     * @param {WordArray|string} key The secret key.\n\t     *\n\t     * @return {WordArray} The HMAC.\n\t     *\n\t     * @static\n\t     *\n\t     * @example\n\t     *\n\t     *     var hmac = CryptoJS.HmacSHA512(message, key);\n\t     */\n\t    C.HmacSHA512 = Hasher._createHmacHelper(SHA512);\n\t}());\n\n\n\treturn CryptoJS.SHA512;\n\n}));\n\n//# sourceURL=webpack://lemon/./node_modules/crypto-js/sha512.js?"
          );

          /***/
        },

      /***/ "./node_modules/crypto-js/tripledes.js":
        /*!*********************************************!*\
  !*** ./node_modules/crypto-js/tripledes.js ***!
  \*********************************************/
        /***/ function (module, exports, __webpack_require__) {
          eval(
            ';(function (root, factory, undef) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"), __webpack_require__(/*! ./enc-base64 */ "./node_modules/crypto-js/enc-base64.js"), __webpack_require__(/*! ./md5 */ "./node_modules/crypto-js/md5.js"), __webpack_require__(/*! ./evpkdf */ "./node_modules/crypto-js/evpkdf.js"), __webpack_require__(/*! ./cipher-core */ "./node_modules/crypto-js/cipher-core.js"));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\t(function () {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var WordArray = C_lib.WordArray;\n\t    var BlockCipher = C_lib.BlockCipher;\n\t    var C_algo = C.algo;\n\n\t    // Permuted Choice 1 constants\n\t    var PC1 = [\n\t        57, 49, 41, 33, 25, 17, 9,  1,\n\t        58, 50, 42, 34, 26, 18, 10, 2,\n\t        59, 51, 43, 35, 27, 19, 11, 3,\n\t        60, 52, 44, 36, 63, 55, 47, 39,\n\t        31, 23, 15, 7,  62, 54, 46, 38,\n\t        30, 22, 14, 6,  61, 53, 45, 37,\n\t        29, 21, 13, 5,  28, 20, 12, 4\n\t    ];\n\n\t    // Permuted Choice 2 constants\n\t    var PC2 = [\n\t        14, 17, 11, 24, 1,  5,\n\t        3,  28, 15, 6,  21, 10,\n\t        23, 19, 12, 4,  26, 8,\n\t        16, 7,  27, 20, 13, 2,\n\t        41, 52, 31, 37, 47, 55,\n\t        30, 40, 51, 45, 33, 48,\n\t        44, 49, 39, 56, 34, 53,\n\t        46, 42, 50, 36, 29, 32\n\t    ];\n\n\t    // Cumulative bit shift constants\n\t    var BIT_SHIFTS = [1,  2,  4,  6,  8,  10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];\n\n\t    // SBOXes and round permutation constants\n\t    var SBOX_P = [\n\t        {\n\t            0x0: 0x808200,\n\t            0x10000000: 0x8000,\n\t            0x20000000: 0x808002,\n\t            0x30000000: 0x2,\n\t            0x40000000: 0x200,\n\t            0x50000000: 0x808202,\n\t            0x60000000: 0x800202,\n\t            0x70000000: 0x800000,\n\t            0x80000000: 0x202,\n\t            0x90000000: 0x800200,\n\t            0xa0000000: 0x8200,\n\t            0xb0000000: 0x808000,\n\t            0xc0000000: 0x8002,\n\t            0xd0000000: 0x800002,\n\t            0xe0000000: 0x0,\n\t            0xf0000000: 0x8202,\n\t            0x8000000: 0x0,\n\t            0x18000000: 0x808202,\n\t            0x28000000: 0x8202,\n\t            0x38000000: 0x8000,\n\t            0x48000000: 0x808200,\n\t            0x58000000: 0x200,\n\t            0x68000000: 0x808002,\n\t            0x78000000: 0x2,\n\t            0x88000000: 0x800200,\n\t            0x98000000: 0x8200,\n\t            0xa8000000: 0x808000,\n\t            0xb8000000: 0x800202,\n\t            0xc8000000: 0x800002,\n\t            0xd8000000: 0x8002,\n\t            0xe8000000: 0x202,\n\t            0xf8000000: 0x800000,\n\t            0x1: 0x8000,\n\t            0x10000001: 0x2,\n\t            0x20000001: 0x808200,\n\t            0x30000001: 0x800000,\n\t            0x40000001: 0x808002,\n\t            0x50000001: 0x8200,\n\t            0x60000001: 0x200,\n\t            0x70000001: 0x800202,\n\t            0x80000001: 0x808202,\n\t            0x90000001: 0x808000,\n\t            0xa0000001: 0x800002,\n\t            0xb0000001: 0x8202,\n\t            0xc0000001: 0x202,\n\t            0xd0000001: 0x800200,\n\t            0xe0000001: 0x8002,\n\t            0xf0000001: 0x0,\n\t            0x8000001: 0x808202,\n\t            0x18000001: 0x808000,\n\t            0x28000001: 0x800000,\n\t            0x38000001: 0x200,\n\t            0x48000001: 0x8000,\n\t            0x58000001: 0x800002,\n\t            0x68000001: 0x2,\n\t            0x78000001: 0x8202,\n\t            0x88000001: 0x8002,\n\t            0x98000001: 0x800202,\n\t            0xa8000001: 0x202,\n\t            0xb8000001: 0x808200,\n\t            0xc8000001: 0x800200,\n\t            0xd8000001: 0x0,\n\t            0xe8000001: 0x8200,\n\t            0xf8000001: 0x808002\n\t        },\n\t        {\n\t            0x0: 0x40084010,\n\t            0x1000000: 0x4000,\n\t            0x2000000: 0x80000,\n\t            0x3000000: 0x40080010,\n\t            0x4000000: 0x40000010,\n\t            0x5000000: 0x40084000,\n\t            0x6000000: 0x40004000,\n\t            0x7000000: 0x10,\n\t            0x8000000: 0x84000,\n\t            0x9000000: 0x40004010,\n\t            0xa000000: 0x40000000,\n\t            0xb000000: 0x84010,\n\t            0xc000000: 0x80010,\n\t            0xd000000: 0x0,\n\t            0xe000000: 0x4010,\n\t            0xf000000: 0x40080000,\n\t            0x800000: 0x40004000,\n\t            0x1800000: 0x84010,\n\t            0x2800000: 0x10,\n\t            0x3800000: 0x40004010,\n\t            0x4800000: 0x40084010,\n\t            0x5800000: 0x40000000,\n\t            0x6800000: 0x80000,\n\t            0x7800000: 0x40080010,\n\t            0x8800000: 0x80010,\n\t            0x9800000: 0x0,\n\t            0xa800000: 0x4000,\n\t            0xb800000: 0x40080000,\n\t            0xc800000: 0x40000010,\n\t            0xd800000: 0x84000,\n\t            0xe800000: 0x40084000,\n\t            0xf800000: 0x4010,\n\t            0x10000000: 0x0,\n\t            0x11000000: 0x40080010,\n\t            0x12000000: 0x40004010,\n\t            0x13000000: 0x40084000,\n\t            0x14000000: 0x40080000,\n\t            0x15000000: 0x10,\n\t            0x16000000: 0x84010,\n\t            0x17000000: 0x4000,\n\t            0x18000000: 0x4010,\n\t            0x19000000: 0x80000,\n\t            0x1a000000: 0x80010,\n\t            0x1b000000: 0x40000010,\n\t            0x1c000000: 0x84000,\n\t            0x1d000000: 0x40004000,\n\t            0x1e000000: 0x40000000,\n\t            0x1f000000: 0x40084010,\n\t            0x10800000: 0x84010,\n\t            0x11800000: 0x80000,\n\t            0x12800000: 0x40080000,\n\t            0x13800000: 0x4000,\n\t            0x14800000: 0x40004000,\n\t            0x15800000: 0x40084010,\n\t            0x16800000: 0x10,\n\t            0x17800000: 0x40000000,\n\t            0x18800000: 0x40084000,\n\t            0x19800000: 0x40000010,\n\t            0x1a800000: 0x40004010,\n\t            0x1b800000: 0x80010,\n\t            0x1c800000: 0x0,\n\t            0x1d800000: 0x4010,\n\t            0x1e800000: 0x40080010,\n\t            0x1f800000: 0x84000\n\t        },\n\t        {\n\t            0x0: 0x104,\n\t            0x100000: 0x0,\n\t            0x200000: 0x4000100,\n\t            0x300000: 0x10104,\n\t            0x400000: 0x10004,\n\t            0x500000: 0x4000004,\n\t            0x600000: 0x4010104,\n\t            0x700000: 0x4010000,\n\t            0x800000: 0x4000000,\n\t            0x900000: 0x4010100,\n\t            0xa00000: 0x10100,\n\t            0xb00000: 0x4010004,\n\t            0xc00000: 0x4000104,\n\t            0xd00000: 0x10000,\n\t            0xe00000: 0x4,\n\t            0xf00000: 0x100,\n\t            0x80000: 0x4010100,\n\t            0x180000: 0x4010004,\n\t            0x280000: 0x0,\n\t            0x380000: 0x4000100,\n\t            0x480000: 0x4000004,\n\t            0x580000: 0x10000,\n\t            0x680000: 0x10004,\n\t            0x780000: 0x104,\n\t            0x880000: 0x4,\n\t            0x980000: 0x100,\n\t            0xa80000: 0x4010000,\n\t            0xb80000: 0x10104,\n\t            0xc80000: 0x10100,\n\t            0xd80000: 0x4000104,\n\t            0xe80000: 0x4010104,\n\t            0xf80000: 0x4000000,\n\t            0x1000000: 0x4010100,\n\t            0x1100000: 0x10004,\n\t            0x1200000: 0x10000,\n\t            0x1300000: 0x4000100,\n\t            0x1400000: 0x100,\n\t            0x1500000: 0x4010104,\n\t            0x1600000: 0x4000004,\n\t            0x1700000: 0x0,\n\t            0x1800000: 0x4000104,\n\t            0x1900000: 0x4000000,\n\t            0x1a00000: 0x4,\n\t            0x1b00000: 0x10100,\n\t            0x1c00000: 0x4010000,\n\t            0x1d00000: 0x104,\n\t            0x1e00000: 0x10104,\n\t            0x1f00000: 0x4010004,\n\t            0x1080000: 0x4000000,\n\t            0x1180000: 0x104,\n\t            0x1280000: 0x4010100,\n\t            0x1380000: 0x0,\n\t            0x1480000: 0x10004,\n\t            0x1580000: 0x4000100,\n\t            0x1680000: 0x100,\n\t            0x1780000: 0x4010004,\n\t            0x1880000: 0x10000,\n\t            0x1980000: 0x4010104,\n\t            0x1a80000: 0x10104,\n\t            0x1b80000: 0x4000004,\n\t            0x1c80000: 0x4000104,\n\t            0x1d80000: 0x4010000,\n\t            0x1e80000: 0x4,\n\t            0x1f80000: 0x10100\n\t        },\n\t        {\n\t            0x0: 0x80401000,\n\t            0x10000: 0x80001040,\n\t            0x20000: 0x401040,\n\t            0x30000: 0x80400000,\n\t            0x40000: 0x0,\n\t            0x50000: 0x401000,\n\t            0x60000: 0x80000040,\n\t            0x70000: 0x400040,\n\t            0x80000: 0x80000000,\n\t            0x90000: 0x400000,\n\t            0xa0000: 0x40,\n\t            0xb0000: 0x80001000,\n\t            0xc0000: 0x80400040,\n\t            0xd0000: 0x1040,\n\t            0xe0000: 0x1000,\n\t            0xf0000: 0x80401040,\n\t            0x8000: 0x80001040,\n\t            0x18000: 0x40,\n\t            0x28000: 0x80400040,\n\t            0x38000: 0x80001000,\n\t            0x48000: 0x401000,\n\t            0x58000: 0x80401040,\n\t            0x68000: 0x0,\n\t            0x78000: 0x80400000,\n\t            0x88000: 0x1000,\n\t            0x98000: 0x80401000,\n\t            0xa8000: 0x400000,\n\t            0xb8000: 0x1040,\n\t            0xc8000: 0x80000000,\n\t            0xd8000: 0x400040,\n\t            0xe8000: 0x401040,\n\t            0xf8000: 0x80000040,\n\t            0x100000: 0x400040,\n\t            0x110000: 0x401000,\n\t            0x120000: 0x80000040,\n\t            0x130000: 0x0,\n\t            0x140000: 0x1040,\n\t            0x150000: 0x80400040,\n\t            0x160000: 0x80401000,\n\t            0x170000: 0x80001040,\n\t            0x180000: 0x80401040,\n\t            0x190000: 0x80000000,\n\t            0x1a0000: 0x80400000,\n\t            0x1b0000: 0x401040,\n\t            0x1c0000: 0x80001000,\n\t            0x1d0000: 0x400000,\n\t            0x1e0000: 0x40,\n\t            0x1f0000: 0x1000,\n\t            0x108000: 0x80400000,\n\t            0x118000: 0x80401040,\n\t            0x128000: 0x0,\n\t            0x138000: 0x401000,\n\t            0x148000: 0x400040,\n\t            0x158000: 0x80000000,\n\t            0x168000: 0x80001040,\n\t            0x178000: 0x40,\n\t            0x188000: 0x80000040,\n\t            0x198000: 0x1000,\n\t            0x1a8000: 0x80001000,\n\t            0x1b8000: 0x80400040,\n\t            0x1c8000: 0x1040,\n\t            0x1d8000: 0x80401000,\n\t            0x1e8000: 0x400000,\n\t            0x1f8000: 0x401040\n\t        },\n\t        {\n\t            0x0: 0x80,\n\t            0x1000: 0x1040000,\n\t            0x2000: 0x40000,\n\t            0x3000: 0x20000000,\n\t            0x4000: 0x20040080,\n\t            0x5000: 0x1000080,\n\t            0x6000: 0x21000080,\n\t            0x7000: 0x40080,\n\t            0x8000: 0x1000000,\n\t            0x9000: 0x20040000,\n\t            0xa000: 0x20000080,\n\t            0xb000: 0x21040080,\n\t            0xc000: 0x21040000,\n\t            0xd000: 0x0,\n\t            0xe000: 0x1040080,\n\t            0xf000: 0x21000000,\n\t            0x800: 0x1040080,\n\t            0x1800: 0x21000080,\n\t            0x2800: 0x80,\n\t            0x3800: 0x1040000,\n\t            0x4800: 0x40000,\n\t            0x5800: 0x20040080,\n\t            0x6800: 0x21040000,\n\t            0x7800: 0x20000000,\n\t            0x8800: 0x20040000,\n\t            0x9800: 0x0,\n\t            0xa800: 0x21040080,\n\t            0xb800: 0x1000080,\n\t            0xc800: 0x20000080,\n\t            0xd800: 0x21000000,\n\t            0xe800: 0x1000000,\n\t            0xf800: 0x40080,\n\t            0x10000: 0x40000,\n\t            0x11000: 0x80,\n\t            0x12000: 0x20000000,\n\t            0x13000: 0x21000080,\n\t            0x14000: 0x1000080,\n\t            0x15000: 0x21040000,\n\t            0x16000: 0x20040080,\n\t            0x17000: 0x1000000,\n\t            0x18000: 0x21040080,\n\t            0x19000: 0x21000000,\n\t            0x1a000: 0x1040000,\n\t            0x1b000: 0x20040000,\n\t            0x1c000: 0x40080,\n\t            0x1d000: 0x20000080,\n\t            0x1e000: 0x0,\n\t            0x1f000: 0x1040080,\n\t            0x10800: 0x21000080,\n\t            0x11800: 0x1000000,\n\t            0x12800: 0x1040000,\n\t            0x13800: 0x20040080,\n\t            0x14800: 0x20000000,\n\t            0x15800: 0x1040080,\n\t            0x16800: 0x80,\n\t            0x17800: 0x21040000,\n\t            0x18800: 0x40080,\n\t            0x19800: 0x21040080,\n\t            0x1a800: 0x0,\n\t            0x1b800: 0x21000000,\n\t            0x1c800: 0x1000080,\n\t            0x1d800: 0x40000,\n\t            0x1e800: 0x20040000,\n\t            0x1f800: 0x20000080\n\t        },\n\t        {\n\t            0x0: 0x10000008,\n\t            0x100: 0x2000,\n\t            0x200: 0x10200000,\n\t            0x300: 0x10202008,\n\t            0x400: 0x10002000,\n\t            0x500: 0x200000,\n\t            0x600: 0x200008,\n\t            0x700: 0x10000000,\n\t            0x800: 0x0,\n\t            0x900: 0x10002008,\n\t            0xa00: 0x202000,\n\t            0xb00: 0x8,\n\t            0xc00: 0x10200008,\n\t            0xd00: 0x202008,\n\t            0xe00: 0x2008,\n\t            0xf00: 0x10202000,\n\t            0x80: 0x10200000,\n\t            0x180: 0x10202008,\n\t            0x280: 0x8,\n\t            0x380: 0x200000,\n\t            0x480: 0x202008,\n\t            0x580: 0x10000008,\n\t            0x680: 0x10002000,\n\t            0x780: 0x2008,\n\t            0x880: 0x200008,\n\t            0x980: 0x2000,\n\t            0xa80: 0x10002008,\n\t            0xb80: 0x10200008,\n\t            0xc80: 0x0,\n\t            0xd80: 0x10202000,\n\t            0xe80: 0x202000,\n\t            0xf80: 0x10000000,\n\t            0x1000: 0x10002000,\n\t            0x1100: 0x10200008,\n\t            0x1200: 0x10202008,\n\t            0x1300: 0x2008,\n\t            0x1400: 0x200000,\n\t            0x1500: 0x10000000,\n\t            0x1600: 0x10000008,\n\t            0x1700: 0x202000,\n\t            0x1800: 0x202008,\n\t            0x1900: 0x0,\n\t            0x1a00: 0x8,\n\t            0x1b00: 0x10200000,\n\t            0x1c00: 0x2000,\n\t            0x1d00: 0x10002008,\n\t            0x1e00: 0x10202000,\n\t            0x1f00: 0x200008,\n\t            0x1080: 0x8,\n\t            0x1180: 0x202000,\n\t            0x1280: 0x200000,\n\t            0x1380: 0x10000008,\n\t            0x1480: 0x10002000,\n\t            0x1580: 0x2008,\n\t            0x1680: 0x10202008,\n\t            0x1780: 0x10200000,\n\t            0x1880: 0x10202000,\n\t            0x1980: 0x10200008,\n\t            0x1a80: 0x2000,\n\t            0x1b80: 0x202008,\n\t            0x1c80: 0x200008,\n\t            0x1d80: 0x0,\n\t            0x1e80: 0x10000000,\n\t            0x1f80: 0x10002008\n\t        },\n\t        {\n\t            0x0: 0x100000,\n\t            0x10: 0x2000401,\n\t            0x20: 0x400,\n\t            0x30: 0x100401,\n\t            0x40: 0x2100401,\n\t            0x50: 0x0,\n\t            0x60: 0x1,\n\t            0x70: 0x2100001,\n\t            0x80: 0x2000400,\n\t            0x90: 0x100001,\n\t            0xa0: 0x2000001,\n\t            0xb0: 0x2100400,\n\t            0xc0: 0x2100000,\n\t            0xd0: 0x401,\n\t            0xe0: 0x100400,\n\t            0xf0: 0x2000000,\n\t            0x8: 0x2100001,\n\t            0x18: 0x0,\n\t            0x28: 0x2000401,\n\t            0x38: 0x2100400,\n\t            0x48: 0x100000,\n\t            0x58: 0x2000001,\n\t            0x68: 0x2000000,\n\t            0x78: 0x401,\n\t            0x88: 0x100401,\n\t            0x98: 0x2000400,\n\t            0xa8: 0x2100000,\n\t            0xb8: 0x100001,\n\t            0xc8: 0x400,\n\t            0xd8: 0x2100401,\n\t            0xe8: 0x1,\n\t            0xf8: 0x100400,\n\t            0x100: 0x2000000,\n\t            0x110: 0x100000,\n\t            0x120: 0x2000401,\n\t            0x130: 0x2100001,\n\t            0x140: 0x100001,\n\t            0x150: 0x2000400,\n\t            0x160: 0x2100400,\n\t            0x170: 0x100401,\n\t            0x180: 0x401,\n\t            0x190: 0x2100401,\n\t            0x1a0: 0x100400,\n\t            0x1b0: 0x1,\n\t            0x1c0: 0x0,\n\t            0x1d0: 0x2100000,\n\t            0x1e0: 0x2000001,\n\t            0x1f0: 0x400,\n\t            0x108: 0x100400,\n\t            0x118: 0x2000401,\n\t            0x128: 0x2100001,\n\t            0x138: 0x1,\n\t            0x148: 0x2000000,\n\t            0x158: 0x100000,\n\t            0x168: 0x401,\n\t            0x178: 0x2100400,\n\t            0x188: 0x2000001,\n\t            0x198: 0x2100000,\n\t            0x1a8: 0x0,\n\t            0x1b8: 0x2100401,\n\t            0x1c8: 0x100401,\n\t            0x1d8: 0x400,\n\t            0x1e8: 0x2000400,\n\t            0x1f8: 0x100001\n\t        },\n\t        {\n\t            0x0: 0x8000820,\n\t            0x1: 0x20000,\n\t            0x2: 0x8000000,\n\t            0x3: 0x20,\n\t            0x4: 0x20020,\n\t            0x5: 0x8020820,\n\t            0x6: 0x8020800,\n\t            0x7: 0x800,\n\t            0x8: 0x8020000,\n\t            0x9: 0x8000800,\n\t            0xa: 0x20800,\n\t            0xb: 0x8020020,\n\t            0xc: 0x820,\n\t            0xd: 0x0,\n\t            0xe: 0x8000020,\n\t            0xf: 0x20820,\n\t            0x80000000: 0x800,\n\t            0x80000001: 0x8020820,\n\t            0x80000002: 0x8000820,\n\t            0x80000003: 0x8000000,\n\t            0x80000004: 0x8020000,\n\t            0x80000005: 0x20800,\n\t            0x80000006: 0x20820,\n\t            0x80000007: 0x20,\n\t            0x80000008: 0x8000020,\n\t            0x80000009: 0x820,\n\t            0x8000000a: 0x20020,\n\t            0x8000000b: 0x8020800,\n\t            0x8000000c: 0x0,\n\t            0x8000000d: 0x8020020,\n\t            0x8000000e: 0x8000800,\n\t            0x8000000f: 0x20000,\n\t            0x10: 0x20820,\n\t            0x11: 0x8020800,\n\t            0x12: 0x20,\n\t            0x13: 0x800,\n\t            0x14: 0x8000800,\n\t            0x15: 0x8000020,\n\t            0x16: 0x8020020,\n\t            0x17: 0x20000,\n\t            0x18: 0x0,\n\t            0x19: 0x20020,\n\t            0x1a: 0x8020000,\n\t            0x1b: 0x8000820,\n\t            0x1c: 0x8020820,\n\t            0x1d: 0x20800,\n\t            0x1e: 0x820,\n\t            0x1f: 0x8000000,\n\t            0x80000010: 0x20000,\n\t            0x80000011: 0x800,\n\t            0x80000012: 0x8020020,\n\t            0x80000013: 0x20820,\n\t            0x80000014: 0x20,\n\t            0x80000015: 0x8020000,\n\t            0x80000016: 0x8000000,\n\t            0x80000017: 0x8000820,\n\t            0x80000018: 0x8020820,\n\t            0x80000019: 0x8000020,\n\t            0x8000001a: 0x8000800,\n\t            0x8000001b: 0x0,\n\t            0x8000001c: 0x20800,\n\t            0x8000001d: 0x820,\n\t            0x8000001e: 0x20020,\n\t            0x8000001f: 0x8020800\n\t        }\n\t    ];\n\n\t    // Masks that select the SBOX input\n\t    var SBOX_MASK = [\n\t        0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000,\n\t        0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f\n\t    ];\n\n\t    /**\n\t     * DES block cipher algorithm.\n\t     */\n\t    var DES = C_algo.DES = BlockCipher.extend({\n\t        _doReset: function () {\n\t            // Shortcuts\n\t            var key = this._key;\n\t            var keyWords = key.words;\n\n\t            // Select 56 bits according to PC1\n\t            var keyBits = [];\n\t            for (var i = 0; i < 56; i++) {\n\t                var keyBitPos = PC1[i] - 1;\n\t                keyBits[i] = (keyWords[keyBitPos >>> 5] >>> (31 - keyBitPos % 32)) & 1;\n\t            }\n\n\t            // Assemble 16 subkeys\n\t            var subKeys = this._subKeys = [];\n\t            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {\n\t                // Create subkey\n\t                var subKey = subKeys[nSubKey] = [];\n\n\t                // Shortcut\n\t                var bitShift = BIT_SHIFTS[nSubKey];\n\n\t                // Select 48 bits according to PC2\n\t                for (var i = 0; i < 24; i++) {\n\t                    // Select from the left 28 key bits\n\t                    subKey[(i / 6) | 0] |= keyBits[((PC2[i] - 1) + bitShift) % 28] << (31 - i % 6);\n\n\t                    // Select from the right 28 key bits\n\t                    subKey[4 + ((i / 6) | 0)] |= keyBits[28 + (((PC2[i + 24] - 1) + bitShift) % 28)] << (31 - i % 6);\n\t                }\n\n\t                // Since each subkey is applied to an expanded 32-bit input,\n\t                // the subkey can be broken into 8 values scaled to 32-bits,\n\t                // which allows the key to be used without expansion\n\t                subKey[0] = (subKey[0] << 1) | (subKey[0] >>> 31);\n\t                for (var i = 1; i < 7; i++) {\n\t                    subKey[i] = subKey[i] >>> ((i - 1) * 4 + 3);\n\t                }\n\t                subKey[7] = (subKey[7] << 5) | (subKey[7] >>> 27);\n\t            }\n\n\t            // Compute inverse subkeys\n\t            var invSubKeys = this._invSubKeys = [];\n\t            for (var i = 0; i < 16; i++) {\n\t                invSubKeys[i] = subKeys[15 - i];\n\t            }\n\t        },\n\n\t        encryptBlock: function (M, offset) {\n\t            this._doCryptBlock(M, offset, this._subKeys);\n\t        },\n\n\t        decryptBlock: function (M, offset) {\n\t            this._doCryptBlock(M, offset, this._invSubKeys);\n\t        },\n\n\t        _doCryptBlock: function (M, offset, subKeys) {\n\t            // Get input\n\t            this._lBlock = M[offset];\n\t            this._rBlock = M[offset + 1];\n\n\t            // Initial permutation\n\t            exchangeLR.call(this, 4,  0x0f0f0f0f);\n\t            exchangeLR.call(this, 16, 0x0000ffff);\n\t            exchangeRL.call(this, 2,  0x33333333);\n\t            exchangeRL.call(this, 8,  0x00ff00ff);\n\t            exchangeLR.call(this, 1,  0x55555555);\n\n\t            // Rounds\n\t            for (var round = 0; round < 16; round++) {\n\t                // Shortcuts\n\t                var subKey = subKeys[round];\n\t                var lBlock = this._lBlock;\n\t                var rBlock = this._rBlock;\n\n\t                // Feistel function\n\t                var f = 0;\n\t                for (var i = 0; i < 8; i++) {\n\t                    f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];\n\t                }\n\t                this._lBlock = rBlock;\n\t                this._rBlock = lBlock ^ f;\n\t            }\n\n\t            // Undo swap from last round\n\t            var t = this._lBlock;\n\t            this._lBlock = this._rBlock;\n\t            this._rBlock = t;\n\n\t            // Final permutation\n\t            exchangeLR.call(this, 1,  0x55555555);\n\t            exchangeRL.call(this, 8,  0x00ff00ff);\n\t            exchangeRL.call(this, 2,  0x33333333);\n\t            exchangeLR.call(this, 16, 0x0000ffff);\n\t            exchangeLR.call(this, 4,  0x0f0f0f0f);\n\n\t            // Set output\n\t            M[offset] = this._lBlock;\n\t            M[offset + 1] = this._rBlock;\n\t        },\n\n\t        keySize: 64/32,\n\n\t        ivSize: 64/32,\n\n\t        blockSize: 64/32\n\t    });\n\n\t    // Swap bits across the left and right words\n\t    function exchangeLR(offset, mask) {\n\t        var t = ((this._lBlock >>> offset) ^ this._rBlock) & mask;\n\t        this._rBlock ^= t;\n\t        this._lBlock ^= t << offset;\n\t    }\n\n\t    function exchangeRL(offset, mask) {\n\t        var t = ((this._rBlock >>> offset) ^ this._lBlock) & mask;\n\t        this._lBlock ^= t;\n\t        this._rBlock ^= t << offset;\n\t    }\n\n\t    /**\n\t     * Shortcut functions to the cipher\'s object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.DES = BlockCipher._createHelper(DES);\n\n\t    /**\n\t     * Triple-DES block cipher algorithm.\n\t     */\n\t    var TripleDES = C_algo.TripleDES = BlockCipher.extend({\n\t        _doReset: function () {\n\t            // Shortcuts\n\t            var key = this._key;\n\t            var keyWords = key.words;\n\t            // Make sure the key length is valid (64, 128 or >= 192 bit)\n\t            if (keyWords.length !== 2 && keyWords.length !== 4 && keyWords.length < 6) {\n\t                throw new Error(\'Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.\');\n\t            }\n\n\t            // Extend the key according to the keying options defined in 3DES standard\n\t            var key1 = keyWords.slice(0, 2);\n\t            var key2 = keyWords.length < 4 ? keyWords.slice(0, 2) : keyWords.slice(2, 4);\n\t            var key3 = keyWords.length < 6 ? keyWords.slice(0, 2) : keyWords.slice(4, 6);\n\n\t            // Create DES instances\n\t            this._des1 = DES.createEncryptor(WordArray.create(key1));\n\t            this._des2 = DES.createEncryptor(WordArray.create(key2));\n\t            this._des3 = DES.createEncryptor(WordArray.create(key3));\n\t        },\n\n\t        encryptBlock: function (M, offset) {\n\t            this._des1.encryptBlock(M, offset);\n\t            this._des2.decryptBlock(M, offset);\n\t            this._des3.encryptBlock(M, offset);\n\t        },\n\n\t        decryptBlock: function (M, offset) {\n\t            this._des3.decryptBlock(M, offset);\n\t            this._des2.encryptBlock(M, offset);\n\t            this._des1.decryptBlock(M, offset);\n\t        },\n\n\t        keySize: 192/32,\n\n\t        ivSize: 64/32,\n\n\t        blockSize: 64/32\n\t    });\n\n\t    /**\n\t     * Shortcut functions to the cipher\'s object interface.\n\t     *\n\t     * @example\n\t     *\n\t     *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);\n\t     *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);\n\t     */\n\t    C.TripleDES = BlockCipher._createHelper(TripleDES);\n\t}());\n\n\n\treturn CryptoJS.TripleDES;\n\n}));\n\n//# sourceURL=webpack://lemon/./node_modules/crypto-js/tripledes.js?'
          );

          /***/
        },

      /***/ "./node_modules/crypto-js/x64-core.js":
        /*!********************************************!*\
  !*** ./node_modules/crypto-js/x64-core.js ***!
  \********************************************/
        /***/ function (module, exports, __webpack_require__) {
          eval(
            ';(function (root, factory) {\n\tif (true) {\n\t\t// CommonJS\n\t\tmodule.exports = exports = factory(__webpack_require__(/*! ./core */ "./node_modules/crypto-js/core.js"));\n\t}\n\telse {}\n}(this, function (CryptoJS) {\n\n\t(function (undefined) {\n\t    // Shortcuts\n\t    var C = CryptoJS;\n\t    var C_lib = C.lib;\n\t    var Base = C_lib.Base;\n\t    var X32WordArray = C_lib.WordArray;\n\n\t    /**\n\t     * x64 namespace.\n\t     */\n\t    var C_x64 = C.x64 = {};\n\n\t    /**\n\t     * A 64-bit word.\n\t     */\n\t    var X64Word = C_x64.Word = Base.extend({\n\t        /**\n\t         * Initializes a newly created 64-bit word.\n\t         *\n\t         * @param {number} high The high 32 bits.\n\t         * @param {number} low The low 32 bits.\n\t         *\n\t         * @example\n\t         *\n\t         *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);\n\t         */\n\t        init: function (high, low) {\n\t            this.high = high;\n\t            this.low = low;\n\t        }\n\n\t        /**\n\t         * Bitwise NOTs this word.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after negating.\n\t         *\n\t         * @example\n\t         *\n\t         *     var negated = x64Word.not();\n\t         */\n\t        // not: function () {\n\t            // var high = ~this.high;\n\t            // var low = ~this.low;\n\n\t            // return X64Word.create(high, low);\n\t        // },\n\n\t        /**\n\t         * Bitwise ANDs this word with the passed word.\n\t         *\n\t         * @param {X64Word} word The x64-Word to AND with this word.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after ANDing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var anded = x64Word.and(anotherX64Word);\n\t         */\n\t        // and: function (word) {\n\t            // var high = this.high & word.high;\n\t            // var low = this.low & word.low;\n\n\t            // return X64Word.create(high, low);\n\t        // },\n\n\t        /**\n\t         * Bitwise ORs this word with the passed word.\n\t         *\n\t         * @param {X64Word} word The x64-Word to OR with this word.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after ORing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var ored = x64Word.or(anotherX64Word);\n\t         */\n\t        // or: function (word) {\n\t            // var high = this.high | word.high;\n\t            // var low = this.low | word.low;\n\n\t            // return X64Word.create(high, low);\n\t        // },\n\n\t        /**\n\t         * Bitwise XORs this word with the passed word.\n\t         *\n\t         * @param {X64Word} word The x64-Word to XOR with this word.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after XORing.\n\t         *\n\t         * @example\n\t         *\n\t         *     var xored = x64Word.xor(anotherX64Word);\n\t         */\n\t        // xor: function (word) {\n\t            // var high = this.high ^ word.high;\n\t            // var low = this.low ^ word.low;\n\n\t            // return X64Word.create(high, low);\n\t        // },\n\n\t        /**\n\t         * Shifts this word n bits to the left.\n\t         *\n\t         * @param {number} n The number of bits to shift.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after shifting.\n\t         *\n\t         * @example\n\t         *\n\t         *     var shifted = x64Word.shiftL(25);\n\t         */\n\t        // shiftL: function (n) {\n\t            // if (n < 32) {\n\t                // var high = (this.high << n) | (this.low >>> (32 - n));\n\t                // var low = this.low << n;\n\t            // } else {\n\t                // var high = this.low << (n - 32);\n\t                // var low = 0;\n\t            // }\n\n\t            // return X64Word.create(high, low);\n\t        // },\n\n\t        /**\n\t         * Shifts this word n bits to the right.\n\t         *\n\t         * @param {number} n The number of bits to shift.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after shifting.\n\t         *\n\t         * @example\n\t         *\n\t         *     var shifted = x64Word.shiftR(7);\n\t         */\n\t        // shiftR: function (n) {\n\t            // if (n < 32) {\n\t                // var low = (this.low >>> n) | (this.high << (32 - n));\n\t                // var high = this.high >>> n;\n\t            // } else {\n\t                // var low = this.high >>> (n - 32);\n\t                // var high = 0;\n\t            // }\n\n\t            // return X64Word.create(high, low);\n\t        // },\n\n\t        /**\n\t         * Rotates this word n bits to the left.\n\t         *\n\t         * @param {number} n The number of bits to rotate.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after rotating.\n\t         *\n\t         * @example\n\t         *\n\t         *     var rotated = x64Word.rotL(25);\n\t         */\n\t        // rotL: function (n) {\n\t            // return this.shiftL(n).or(this.shiftR(64 - n));\n\t        // },\n\n\t        /**\n\t         * Rotates this word n bits to the right.\n\t         *\n\t         * @param {number} n The number of bits to rotate.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after rotating.\n\t         *\n\t         * @example\n\t         *\n\t         *     var rotated = x64Word.rotR(7);\n\t         */\n\t        // rotR: function (n) {\n\t            // return this.shiftR(n).or(this.shiftL(64 - n));\n\t        // },\n\n\t        /**\n\t         * Adds this word with the passed word.\n\t         *\n\t         * @param {X64Word} word The x64-Word to add with this word.\n\t         *\n\t         * @return {X64Word} A new x64-Word object after adding.\n\t         *\n\t         * @example\n\t         *\n\t         *     var added = x64Word.add(anotherX64Word);\n\t         */\n\t        // add: function (word) {\n\t            // var low = (this.low + word.low) | 0;\n\t            // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;\n\t            // var high = (this.high + word.high + carry) | 0;\n\n\t            // return X64Word.create(high, low);\n\t        // }\n\t    });\n\n\t    /**\n\t     * An array of 64-bit words.\n\t     *\n\t     * @property {Array} words The array of CryptoJS.x64.Word objects.\n\t     * @property {number} sigBytes The number of significant bytes in this word array.\n\t     */\n\t    var X64WordArray = C_x64.WordArray = Base.extend({\n\t        /**\n\t         * Initializes a newly created word array.\n\t         *\n\t         * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.\n\t         * @param {number} sigBytes (Optional) The number of significant bytes in the words.\n\t         *\n\t         * @example\n\t         *\n\t         *     var wordArray = CryptoJS.x64.WordArray.create();\n\t         *\n\t         *     var wordArray = CryptoJS.x64.WordArray.create([\n\t         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\n\t         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\n\t         *     ]);\n\t         *\n\t         *     var wordArray = CryptoJS.x64.WordArray.create([\n\t         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),\n\t         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)\n\t         *     ], 10);\n\t         */\n\t        init: function (words, sigBytes) {\n\t            words = this.words = words || [];\n\n\t            if (sigBytes != undefined) {\n\t                this.sigBytes = sigBytes;\n\t            } else {\n\t                this.sigBytes = words.length * 8;\n\t            }\n\t        },\n\n\t        /**\n\t         * Converts this 64-bit word array to a 32-bit word array.\n\t         *\n\t         * @return {CryptoJS.lib.WordArray} This word array\'s data as a 32-bit word array.\n\t         *\n\t         * @example\n\t         *\n\t         *     var x32WordArray = x64WordArray.toX32();\n\t         */\n\t        toX32: function () {\n\t            // Shortcuts\n\t            var x64Words = this.words;\n\t            var x64WordsLength = x64Words.length;\n\n\t            // Convert\n\t            var x32Words = [];\n\t            for (var i = 0; i < x64WordsLength; i++) {\n\t                var x64Word = x64Words[i];\n\t                x32Words.push(x64Word.high);\n\t                x32Words.push(x64Word.low);\n\t            }\n\n\t            return X32WordArray.create(x32Words, this.sigBytes);\n\t        },\n\n\t        /**\n\t         * Creates a copy of this word array.\n\t         *\n\t         * @return {X64WordArray} The clone.\n\t         *\n\t         * @example\n\t         *\n\t         *     var clone = x64WordArray.clone();\n\t         */\n\t        clone: function () {\n\t            var clone = Base.clone.call(this);\n\n\t            // Clone "words" array\n\t            var words = clone.words = this.words.slice(0);\n\n\t            // Clone each X64Word object\n\t            var wordsLength = words.length;\n\t            for (var i = 0; i < wordsLength; i++) {\n\t                words[i] = words[i].clone();\n\t            }\n\n\t            return clone;\n\t        }\n\t    });\n\t}());\n\n\n\treturn CryptoJS;\n\n}));\n\n//# sourceURL=webpack://lemon/./node_modules/crypto-js/x64-core.js?'
          );

          /***/
        },

      /***/ "./node_modules/dayjs/dayjs.min.js":
        /*!*****************************************!*\
  !*** ./node_modules/dayjs/dayjs.min.js ***!
  \*****************************************/
        /***/ function (module) {
          eval(
            '!function(t,e){ true?module.exports=e():0}(this,(function(){"use strict";var t=1e3,e=6e4,n=36e5,r="millisecond",i="second",s="minute",u="hour",a="day",o="week",c="month",f="quarter",h="year",d="date",l="Invalid Date",$=/^(\\d{4})[-/]?(\\d{1,2})?[-/]?(\\d{0,2})[Tt\\s]*(\\d{1,2})?:?(\\d{1,2})?:?(\\d{1,2})?[.:]?(\\d+)?$/,y=/\\[([^\\]]+)]|Y{1,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g,M={name:"en",weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),ordinal:function(t){var e=["th","st","nd","rd"],n=t%100;return"["+t+(e[(n-20)%10]||e[n]||e[0])+"]"}},m=function(t,e,n){var r=String(t);return!r||r.length>=e?t:""+Array(e+1-r.length).join(n)+t},v={s:m,z:function(t){var e=-t.utcOffset(),n=Math.abs(e),r=Math.floor(n/60),i=n%60;return(e<=0?"+":"-")+m(r,2,"0")+":"+m(i,2,"0")},m:function t(e,n){if(e.date()<n.date())return-t(n,e);var r=12*(n.year()-e.year())+(n.month()-e.month()),i=e.clone().add(r,c),s=n-i<0,u=e.clone().add(r+(s?-1:1),c);return+(-(r+(n-i)/(s?i-u:u-i))||0)},a:function(t){return t<0?Math.ceil(t)||0:Math.floor(t)},p:function(t){return{M:c,y:h,w:o,d:a,D:d,h:u,m:s,s:i,ms:r,Q:f}[t]||String(t||"").toLowerCase().replace(/s$/,"")},u:function(t){return void 0===t}},g="en",D={};D[g]=M;var p=function(t){return t instanceof b},S=function t(e,n,r){var i;if(!e)return g;if("string"==typeof e){var s=e.toLowerCase();D[s]&&(i=s),n&&(D[s]=n,i=s);var u=e.split("-");if(!i&&u.length>1)return t(u[0])}else{var a=e.name;D[a]=e,i=a}return!r&&i&&(g=i),i||!r&&g},w=function(t,e){if(p(t))return t.clone();var n="object"==typeof e?e:{};return n.date=t,n.args=arguments,new b(n)},O=v;O.l=S,O.i=p,O.w=function(t,e){return w(t,{locale:e.$L,utc:e.$u,x:e.$x,$offset:e.$offset})};var b=function(){function M(t){this.$L=S(t.locale,null,!0),this.parse(t)}var m=M.prototype;return m.parse=function(t){this.$d=function(t){var e=t.date,n=t.utc;if(null===e)return new Date(NaN);if(O.u(e))return new Date;if(e instanceof Date)return new Date(e);if("string"==typeof e&&!/Z$/i.test(e)){var r=e.match($);if(r){var i=r[2]-1||0,s=(r[7]||"0").substring(0,3);return n?new Date(Date.UTC(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)):new Date(r[1],i,r[3]||1,r[4]||0,r[5]||0,r[6]||0,s)}}return new Date(e)}(t),this.$x=t.x||{},this.init()},m.init=function(){var t=this.$d;this.$y=t.getFullYear(),this.$M=t.getMonth(),this.$D=t.getDate(),this.$W=t.getDay(),this.$H=t.getHours(),this.$m=t.getMinutes(),this.$s=t.getSeconds(),this.$ms=t.getMilliseconds()},m.$utils=function(){return O},m.isValid=function(){return!(this.$d.toString()===l)},m.isSame=function(t,e){var n=w(t);return this.startOf(e)<=n&&n<=this.endOf(e)},m.isAfter=function(t,e){return w(t)<this.startOf(e)},m.isBefore=function(t,e){return this.endOf(e)<w(t)},m.$g=function(t,e,n){return O.u(t)?this[e]:this.set(n,t)},m.unix=function(){return Math.floor(this.valueOf()/1e3)},m.valueOf=function(){return this.$d.getTime()},m.startOf=function(t,e){var n=this,r=!!O.u(e)||e,f=O.p(t),l=function(t,e){var i=O.w(n.$u?Date.UTC(n.$y,e,t):new Date(n.$y,e,t),n);return r?i:i.endOf(a)},$=function(t,e){return O.w(n.toDate()[t].apply(n.toDate("s"),(r?[0,0,0,0]:[23,59,59,999]).slice(e)),n)},y=this.$W,M=this.$M,m=this.$D,v="set"+(this.$u?"UTC":"");switch(f){case h:return r?l(1,0):l(31,11);case c:return r?l(1,M):l(0,M+1);case o:var g=this.$locale().weekStart||0,D=(y<g?y+7:y)-g;return l(r?m-D:m+(6-D),M);case a:case d:return $(v+"Hours",0);case u:return $(v+"Minutes",1);case s:return $(v+"Seconds",2);case i:return $(v+"Milliseconds",3);default:return this.clone()}},m.endOf=function(t){return this.startOf(t,!1)},m.$set=function(t,e){var n,o=O.p(t),f="set"+(this.$u?"UTC":""),l=(n={},n[a]=f+"Date",n[d]=f+"Date",n[c]=f+"Month",n[h]=f+"FullYear",n[u]=f+"Hours",n[s]=f+"Minutes",n[i]=f+"Seconds",n[r]=f+"Milliseconds",n)[o],$=o===a?this.$D+(e-this.$W):e;if(o===c||o===h){var y=this.clone().set(d,1);y.$d[l]($),y.init(),this.$d=y.set(d,Math.min(this.$D,y.daysInMonth())).$d}else l&&this.$d[l]($);return this.init(),this},m.set=function(t,e){return this.clone().$set(t,e)},m.get=function(t){return this[O.p(t)]()},m.add=function(r,f){var d,l=this;r=Number(r);var $=O.p(f),y=function(t){var e=w(l);return O.w(e.date(e.date()+Math.round(t*r)),l)};if($===c)return this.set(c,this.$M+r);if($===h)return this.set(h,this.$y+r);if($===a)return y(1);if($===o)return y(7);var M=(d={},d[s]=e,d[u]=n,d[i]=t,d)[$]||1,m=this.$d.getTime()+r*M;return O.w(m,this)},m.subtract=function(t,e){return this.add(-1*t,e)},m.format=function(t){var e=this,n=this.$locale();if(!this.isValid())return n.invalidDate||l;var r=t||"YYYY-MM-DDTHH:mm:ssZ",i=O.z(this),s=this.$H,u=this.$m,a=this.$M,o=n.weekdays,c=n.months,f=n.meridiem,h=function(t,n,i,s){return t&&(t[n]||t(e,r))||i[n].slice(0,s)},d=function(t){return O.s(s%12||12,t,"0")},$=f||function(t,e,n){var r=t<12?"AM":"PM";return n?r.toLowerCase():r};return r.replace(y,(function(t,r){return r||function(t){switch(t){case"YY":return String(e.$y).slice(-2);case"YYYY":return O.s(e.$y,4,"0");case"M":return a+1;case"MM":return O.s(a+1,2,"0");case"MMM":return h(n.monthsShort,a,c,3);case"MMMM":return h(c,a);case"D":return e.$D;case"DD":return O.s(e.$D,2,"0");case"d":return String(e.$W);case"dd":return h(n.weekdaysMin,e.$W,o,2);case"ddd":return h(n.weekdaysShort,e.$W,o,3);case"dddd":return o[e.$W];case"H":return String(s);case"HH":return O.s(s,2,"0");case"h":return d(1);case"hh":return d(2);case"a":return $(s,u,!0);case"A":return $(s,u,!1);case"m":return String(u);case"mm":return O.s(u,2,"0");case"s":return String(e.$s);case"ss":return O.s(e.$s,2,"0");case"SSS":return O.s(e.$ms,3,"0");case"Z":return i}return null}(t)||i.replace(":","")}))},m.utcOffset=function(){return 15*-Math.round(this.$d.getTimezoneOffset()/15)},m.diff=function(r,d,l){var $,y=this,M=O.p(d),m=w(r),v=(m.utcOffset()-this.utcOffset())*e,g=this-m,D=function(){return O.m(y,m)};switch(M){case h:$=D()/12;break;case c:$=D();break;case f:$=D()/3;break;case o:$=(g-v)/6048e5;break;case a:$=(g-v)/864e5;break;case u:$=g/n;break;case s:$=g/e;break;case i:$=g/t;break;default:$=g}return l?$:O.a($)},m.daysInMonth=function(){return this.endOf(c).$D},m.$locale=function(){return D[this.$L]},m.locale=function(t,e){if(!t)return this.$L;var n=this.clone(),r=S(t,e,!0);return r&&(n.$L=r),n},m.clone=function(){return O.w(this.$d,this)},m.toDate=function(){return new Date(this.valueOf())},m.toJSON=function(){return this.isValid()?this.toISOString():null},m.toISOString=function(){return this.$d.toISOString()},m.toString=function(){return this.$d.toUTCString()},M}(),_=b.prototype;return w.prototype=_,[["$ms",r],["$s",i],["$m",s],["$H",u],["$W",a],["$M",c],["$y",h],["$D",d]].forEach((function(t){_[t[1]]=function(e){return this.$g(e,t[0],t[1])}})),w.extend=function(t,e){return t.$i||(t(e,b,w),t.$i=!0),w},w.locale=S,w.isDayjs=p,w.unix=function(t){return w(1e3*t)},w.en=D[g],w.Ls=D,w.p={},w}));\n\n//# sourceURL=webpack://lemon/./node_modules/dayjs/dayjs.min.js?'
          );

          /***/
        },

      /***/ "?9157":
        /*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
        /***/ () => {
          eval(
            "/* (ignored) */\n\n//# sourceURL=webpack://lemon/crypto_(ignored)?"
          );

          /***/
        },

      /***/ "./lemon/common/version.json":
        /*!***********************************!*\
  !*** ./lemon/common/version.json ***!
  \***********************************/
        /***/ (module) => {
          "use strict";
          eval(
            'module.exports = JSON.parse(\'{"version":"PUC_V4.1.01.270","buildTime":"2023-08-04 17:55"}\');\n\n//# sourceURL=webpack://lemon/./lemon/common/version.json?'
          );

          /***/
        },

      /******/
    };
    /************************************************************************/
    /******/ // The module cache
    /******/ var __webpack_module_cache__ = {};
    /******/
    /******/ // The require function
    /******/ function __webpack_require__(moduleId) {
      /******/ // Check if module is in cache
      /******/ var cachedModule = __webpack_module_cache__[moduleId];
      /******/ if (cachedModule !== undefined) {
        /******/ return cachedModule.exports;
        /******/
      }
      /******/ // Create a new module (and put it into the cache)
      /******/ var module = (__webpack_module_cache__[moduleId] = {
        /******/ // no module.id needed
        /******/ // no module.loaded needed
        /******/ exports: {},
        /******/
      });
      /******/
      /******/ // Execute the module function
      /******/ __webpack_modules__[moduleId].call(
        module.exports,
        module,
        module.exports,
        __webpack_require__
      );
      /******/
      /******/ // Return the exports of the module
      /******/ return module.exports;
      /******/
    }
    /******/
    /************************************************************************/
    /******/ /* webpack/runtime/compat get default export */
    /******/ (() => {
      /******/ // getDefaultExport function for compatibility with non-harmony modules
      /******/ __webpack_require__.n = (module) => {
        /******/ var getter =
          module && module.__esModule
            ? /******/ () => module["default"]
            : /******/ () => module;
        /******/ __webpack_require__.d(getter, { a: getter });
        /******/ return getter;
        /******/
      };
      /******/
    })();
    /******/
    /******/ /* webpack/runtime/define property getters */
    /******/ (() => {
      /******/ // define getter functions for harmony exports
      /******/ __webpack_require__.d = (exports, definition) => {
        /******/ for (var key in definition) {
          /******/ if (
            __webpack_require__.o(definition, key) &&
            !__webpack_require__.o(exports, key)
          ) {
            /******/ Object.defineProperty(exports, key, {
              enumerable: true,
              get: definition[key],
            });
            /******/
          }
          /******/
        }
        /******/
      };
      /******/
    })();
    /******/
    /******/ /* webpack/runtime/global */
    /******/ (() => {
      /******/ __webpack_require__.g = (function () {
        /******/ if (typeof globalThis === "object") return globalThis;
        /******/ try {
          /******/ return this || new Function("return this")();
          /******/
        } catch (e) {
          /******/ if (typeof window === "object") return window;
          /******/
        }
        /******/
      })();
      /******/
    })();
    /******/
    /******/ /* webpack/runtime/hasOwnProperty shorthand */
    /******/ (() => {
      /******/ __webpack_require__.o = (obj, prop) =>
        Object.prototype.hasOwnProperty.call(obj, prop);
      /******/
    })();
    /******/
    /******/ /* webpack/runtime/make namespace object */
    /******/ (() => {
      /******/ // define __esModule on exports
      /******/ __webpack_require__.r = (exports) => {
        /******/ if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
          /******/ Object.defineProperty(exports, Symbol.toStringTag, {
            value: "Module",
          });
          /******/
        }
        /******/ Object.defineProperty(exports, "__esModule", { value: true });
        /******/
      };
      /******/
    })();
    /******/
    /************************************************************************/
    /******/
    /******/ // startup
    /******/ // Load entry module and return exports
    /******/ // This entry module is referenced by other modules so it can't be inlined
    /******/ var __webpack_exports__ = __webpack_require__(
      "./lemon/littleLemon.js"
    );
    /******/ __webpack_exports__ = __webpack_exports__["default"];
    /******/
    /******/ return __webpack_exports__;
    /******/
  })();
});
